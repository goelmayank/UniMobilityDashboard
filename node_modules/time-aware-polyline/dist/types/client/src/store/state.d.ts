import { BehaviorSubject } from "rxjs/BehaviorSubject";
import { Dispatcher } from "./dispatcher";
import { Observable } from "rxjs/Observable";
import { Action, ActionReducer } from "./models";
import { ScannedActionsSubject } from "./scanned-action";
import { ReducerObservable } from "./reducer-manager";
export declare abstract class StateObservable extends Observable<any> {
}
export declare class State<T> extends BehaviorSubject<any> {
    static readonly INIT: string;
    private stateSubscription;
    constructor(actions$: Dispatcher, reducer$: ReducerObservable, scannedActions: ScannedActionsSubject, initialState: any);
    ngOnDestroy(): void;
}
export declare type StateActionPair<T, V extends Action = Action> = {
    state: T | undefined;
    action?: V;
};
export declare function reduceState<T, V extends Action = Action>(stateActionPair: StateActionPair<T, V>, [action, reducer]: [V, ActionReducer<T, V>]): StateActionPair<T, V>;
