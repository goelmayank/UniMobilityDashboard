import { ITimeAwarePoint } from "ht-models";
export * from "worker-service";
export declare class TimeAwarePolyline {
    encodeTimeAwarePolyline(points: ITimeAwarePoint[]): string;
    decodeTimeAwarePolyline(polyline: string): any[];
    getLocationsAtTimestamps(decodedTimeAwarePolyline: ITimeAwarePoint[], timeStamps: string[]): any[];
    getLocationsElapsedByTimestamp(decodedTimeAwarePolyline: ITimeAwarePoint[], timeStamp: string): {
        'path': any[];
        'bearing': number;
    };
    getPolylineSegmentsPublic(decodedTimeAwarePolyline: ITimeAwarePoint[]): any[];
    getPolylineSegmentsForLocationsElapsed(decodedTimeAwarePolyline: ITimeAwarePoint[], timeStamp: string): any[];
    getLocationsTillTimeStamp(decodedPolyline: ITimeAwarePoint[], timeStamp: string): {
        'locations': any[];
        'bearing': number;
    };
    private isDifferentSegment(end, start);
    private getPolylineSegments(decoded, timeLimit);
    private updateBearing(oldBearing, gpxPair);
    private getLocationInPair(gpxPair, timeStamp);
    private getNextLatLng(decoded, timeStamp);
    private getDistance(origin, destination);
    private toRadian(degree);
    private computeHeading(start, end);
    private areEqualLatlngs(latlngA, latlngB);
    private removeTimeStamps(segment);
    private getDecodedDimensionFromPolyline(polyline, index);
    private extendTimeAwarePolyline(polyline, points, lastPoint);
    private getCoordinate(intRepresentation);
    private getIsoTime(timeStamp);
    private getGpxLog(lat, lng, timeStamp);
    private getLat(gpxLog);
    private getLng(gpxLog);
    private getTimeStamp(gpxLog);
    private lshiftOperator(num, bits);
    private rshiftOperator(num, bits);
    private notOperator(num);
}
export declare const EARTH_RADIUS = 6371;
