export function memoize(t) {
    var lastArguments = null;
    var lastResult = null;
    function reset() {
        lastArguments = null;
        lastResult = null;
    }
    function memoized() {
        if (!lastArguments) {
            lastResult = t.apply(null, arguments);
            lastArguments = arguments;
            return lastResult;
        }
        for (var i = 0; i < arguments.length; i++) {
            if (arguments[i] !== lastArguments[i]) {
                lastResult = t.apply(null, arguments);
                lastArguments = arguments;
                return lastResult;
            }
        }
        return lastResult;
    }
    return { memoized: memoized, reset: reset };
}
export function createSelector() {
    var input = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        input[_i] = arguments[_i];
    }
    var args = input;
    if (Array.isArray(args[0])) {
        var head = args[0], tail = args.slice(1);
        args = head.concat(tail);
    }
    var selectors = args.slice(0, args.length - 1);
    var projector = args[args.length - 1];
    var memoizedSelectors = selectors.filter(function (selector) {
        return selector.release && typeof selector.release === "function";
    });
    var memoizedProjector = memoize(function () {
        var selectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selectors[_i] = arguments[_i];
        }
        return projector.apply(null, selectors);
    });
    var memoizedState = memoize(function (state) {
        var args = selectors.map(function (fn) { return fn(state); });
        return memoizedProjector.memoized.apply(null, args);
    });
    function release() {
        memoizedState.reset();
        memoizedProjector.reset();
        memoizedSelectors.forEach(function (selector) { return selector.release(); });
    }
    return Object.assign(memoizedState.memoized, {
        release: release,
        projector: memoizedProjector.memoized
    });
}
export function createFeatureSelector(featureName) {
    return createSelector(function (state) { return state[featureName]; }, function (featureState) { return featureState; });
}
//# sourceMappingURL=selector.js.map