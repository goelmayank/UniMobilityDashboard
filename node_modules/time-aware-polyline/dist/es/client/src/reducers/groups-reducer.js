var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as GroupDispatcher from "../dispatchers/groups-dispatcher";
export var initialState = {
    listActive: false
};
export function groupsReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case GroupDispatcher.SET_LIST_ACTIVE: {
            return __assign({}, state, { listActive: action.payload });
        }
        case GroupDispatcher.SET_ID: {
            return __assign({}, state, { selectedId: action.payload });
        }
        case GroupDispatcher.SET_GROUPS: {
            return __assign({}, state, { allGroups: action.payload });
        }
        case GroupDispatcher.SET_GROUP: {
            return __assign({}, state, { group: action.payload });
        }
        default: {
            return state;
        }
    }
}
export var getId = function (state) { return state.selectedId; };
export var getAllGroups = function (state) { return state.allGroups; };
export var getListActive = function (state) { return state.listActive; };
//# sourceMappingURL=groups-reducer.js.map