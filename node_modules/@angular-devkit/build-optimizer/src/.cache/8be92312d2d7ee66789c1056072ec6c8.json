{"remainingRequest":"/Github/UniDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Github/UniDashboard/node_modules/ht-angular/esm5/ht-angular.js","dependencies":[{"path":"/Github/UniDashboard/node_modules/ht-angular/esm5/ht-angular.js","mtime":0},{"path":"/Github/UniDashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Github/UniDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends, __spread, __read, __values } from 'tslib';\nimport { HtClient, HtUsersClient, HtGroupsClient, AccountsClient, HtActionsClient, usersClientFactory, groupsClientFactory, htClientService, actionsClientFactory, ApiType, dateRangeService, DateRange, dateRangeFactory } from 'ht-client';\nimport { InjectionToken, Inject, NgModule, Component, Input, EventEmitter, Output, ChangeDetectionStrategy, Pipe, Directive, HostListener, HostBinding, ChangeDetectorRef, ElementRef, ViewChild, Optional, ContentChild, ViewContainerRef, Injectable, ComponentFactoryResolver, Renderer2 } from '@angular/core';\nimport { HtMapClass, MapInstance, StopsHeatmapTrace, mapTypeService, ActionsHeatmapTrace, ActionTrace } from 'ht-maps';\nimport { HtRequest, htRequestService, HtTrackingApi } from 'ht-api';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { animate, style, transition, trigger, keyframes, query, state } from '@angular/animations';\nimport { TimeString, DateString, NameCase, DotString, DateHumanize, DistanceLocale, HMString, Color, GetUrlParam, dateRangeDisplay } from 'ht-utility';\nimport { htAction, listwithSelectedId$, listWithItem$, HtPlaceline, isSameDateRange, DateRangeLabelMap, tableFormat, userTableFormat, DateRangeMap, actionTableFormat } from 'ht-data';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { last, reduce, reject, sortBy, map } from 'underscore';\nimport { distinctUntilChanged, map as map$1, skip, take, filter, switchMap, withLatestFrom, takeUntil, tap, catchError, concatMap, expand, debounceTime } from 'rxjs/operators';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { addDays, addMonths, addWeeks, endOfDay, format, isBefore, isFuture, isSameDay, isSameMonth, isToday, isWithinRange, startOfMonth, startOfWeek } from 'date-fns';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport Chart from 'frappe-charts/dist/frappe-charts.min.esm';\nimport { Observable } from 'rxjs/Observable';\nimport { timer } from 'rxjs/observable/timer';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport Popper from 'popper.js';\nvar HtClientService = /*@__PURE__*/ (function (_super) {\n    __extends(HtClientService, _super);\n    function HtClientService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return HtClientService;\n}(HtClient));\nvar HtUsersService = /*@__PURE__*/ (function (_super) {\n    __extends(HtUsersService, _super);\n    function HtUsersService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return HtUsersService;\n}(HtUsersClient));\nvar HtMapService = /*@__PURE__*/ (function (_super) {\n    __extends(HtMapService, _super);\n    function HtMapService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return HtMapService;\n}(HtMapClass));\nvar MAP_TYPE = new InjectionToken('app.mapType');\nvar HtGroupsService = /*@__PURE__*/ (function (_super) {\n    __extends(HtGroupsService, _super);\n    function HtGroupsService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return HtGroupsService;\n}(HtGroupsClient));\nvar HtAccountService = /*@__PURE__*/ (function (_super) {\n    __extends(HtAccountService, _super);\n    function HtAccountService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return HtAccountService;\n}(AccountsClient));\nvar HtActionsService = /*@__PURE__*/ (function (_super) {\n    __extends(HtActionsService, _super);\n    function HtActionsService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return HtActionsService;\n}(HtActionsClient));\nvar HtRequestService = /*@__PURE__*/ (function (_super) {\n    __extends(HtRequestService, _super);\n    function HtRequestService(http, token) {\n        var _this = _super.call(this, token) || this;\n        _this.http = http;\n        return _this;\n    }\n    HtRequestService.prototype.getObservable = function (url, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.http.get(url, options);\n    };\n    HtRequestService.prototype.postObservable = function (url, body, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.http.post(url, body, options);\n    };\n    return HtRequestService;\n}(HtRequest));\nvar TOKEN = new InjectionToken('app.token');\nvar MAP_KEY = new InjectionToken('app.mapKey');\nvar BASE_URL = new InjectionToken('app.baseUrl');\nfunction requestServiceFactory(http, token, baseUrl) {\n    var request = new HtRequestService(http, token);\n    if (baseUrl)\n        request.baseUrl = baseUrl;\n    return request;\n}\nfunction clientServiceFactory(token, request) {\n    var client = htClientService.getInstance(token, request);\n    return client;\n}\nfunction mapServiceFactory(mapType, mapKey) {\n    if (mapType === void 0) {\n        mapType = 'google';\n    }\n    var options = {};\n    if (mapKey)\n        options.mapKey = mapKey;\n    return new HtMapService(mapType, options);\n}\nfunction userClientServiceFactory() {\n    return usersClientFactory();\n}\nfunction actionClientServiceFactory() {\n    return actionsClientFactory();\n}\nfunction groupClientServiceFactory() {\n    return groupsClientFactory();\n}\nfunction accountUsersClientServiceFactory() {\n    return new AccountsClient();\n}\nvar HtModule = /*@__PURE__*/ (function () {\n    function HtModule(token, clientService, mapService) {\n    }\n    HtModule.forRoot = function (config) {\n        return {\n            ngModule: HtModule,\n            providers: [\n                HttpClient,\n                { provide: MAP_TYPE, useValue: config.mapType },\n                { provide: TOKEN, useValue: config.token },\n                { provide: MAP_KEY, useValue: config.mapKey },\n                { provide: BASE_URL, useValue: config.baseUrl },\n                { provide: HtMapService, useFactory: mapServiceFactory, deps: [MAP_TYPE, MAP_KEY] },\n                { provide: HtRequestService, useFactory: requestServiceFactory, deps: [HttpClient, TOKEN, BASE_URL] },\n                { provide: HtClientService,\n                    useFactory: clientServiceFactory,\n                    deps: [TOKEN, HtRequestService]\n                },\n                {\n                    provide: HtUsersService,\n                    useFactory: userClientServiceFactory\n                },\n                {\n                    provide: HtActionsService,\n                    useFactory: actionClientServiceFactory\n                },\n                {\n                    provide: HtGroupsService,\n                    useFactory: groupClientServiceFactory\n                },\n                {\n                    provide: HtAccountService,\n                    useFactory: accountUsersClientServiceFactory\n                },\n            ]\n        };\n    };\n    return HtModule;\n}());\nvar UsersSummaryContainerComponent = /*@__PURE__*/ (function () {\n    function UsersSummaryContainerComponent(usersClientService) {\n        this.usersClientService = usersClientService;\n        this.hideTotal = false;\n        this.selectable = false;\n        this.clearDataOnDestroy = true;\n        this.toSetActive = true;\n    }\n    UsersSummaryContainerComponent.prototype.ngOnInit = function () {\n        if (this.toSetActive)\n            this.usersClientService.summary.setActive();\n        this.summary$ = this.usersClientService.listStatusChart$(this.queryLabels);\n    };\n    UsersSummaryContainerComponent.prototype.onClearQueryKey = function (key) {\n        this.usersClientService.list.clearQueryKey(key);\n    };\n    UsersSummaryContainerComponent.prototype.setQuery = function (query$$1) {\n        this.usersClientService.list.setQueryReset(query$$1);\n    };\n    UsersSummaryContainerComponent.prototype.ngOnDestroy = function () {\n        if (this.clearDataOnDestroy)\n            this.usersClientService.summary.clearData();\n    };\n    return UsersSummaryContainerComponent;\n}());\nvar UsersSummaryComponent = /*@__PURE__*/ (function () {\n    function UsersSummaryComponent() {\n        this.setQuery = new EventEmitter();\n        this.clearQueryKey = new EventEmitter();\n        this.selectable = false;\n    }\n    UsersSummaryComponent.prototype.ngOnInit = function () {\n    };\n    UsersSummaryComponent.prototype.onHoverQuery = function (query$$1) {\n        this.hoveredQuery = query$$1.label;\n    };\n    UsersSummaryComponent.prototype.onHoveroutQuery = function () {\n        this.hoveredQuery = \"\";\n    };\n    UsersSummaryComponent.prototype.indexId = function (index, item) {\n        return item.label;\n    };\n    UsersSummaryComponent.prototype.setFilter = function (datum) {\n        var query$$1 = { status: datum.values.toString() };\n        this.setQuery.next(query$$1);\n    };\n    UsersSummaryComponent.prototype.clearFilter = function (datum) {\n        this.clearQueryKey.next('status');\n    };\n    UsersSummaryComponent.prototype.selectLabel = function (datum) {\n        if (!this.selectable)\n            return false;\n        if (datum.selected) {\n            this.clearFilter(datum);\n        }\n        else {\n            this.setFilter(datum);\n        }\n    };\n    return UsersSummaryComponent;\n}());\nvar ProfileComponent = /*@__PURE__*/ (function () {\n    function ProfileComponent() {\n        this.height = 30;\n        this.defaultUrl = \"\";\n    }\n    ProfileComponent.prototype.ngOnInit = function () {\n    };\n    return ProfileComponent;\n}());\nvar BatteryIconComponent = /*@__PURE__*/ (function () {\n    function BatteryIconComponent() {\n        this.battery = 0;\n        this.layout = 'row';\n        this.reverse = false;\n        this.iconType = 'fa';\n    }\n    BatteryIconComponent.prototype.ngOnInit = function () {\n    };\n    BatteryIconComponent.prototype.batteryClass = function (level) {\n        return this.iconType == 'ionicon' ? this.ioniconBatteryClass(level) : this.faBatteryClass(level);\n    };\n    BatteryIconComponent.prototype.faBatteryClass = function (level) {\n        var className = '';\n        if (level > 90) {\n            className = 'fa fa-battery-4';\n        }\n        else if (level > 70) {\n            className = 'fa fa-battery-3';\n        }\n        else if (level > 25) {\n            className = 'fa fa-battery-2';\n        }\n        else if (level > 5) {\n            className = 'fa fa-battery-1 text-red';\n        }\n        else {\n            className = 'fa fa-battery-0 text-red';\n        }\n        return className;\n    };\n    BatteryIconComponent.prototype.ioniconBatteryClass = function (level) {\n        var className = '';\n        if (level > 90) {\n            className = 'ion-battery-full';\n        }\n        else if (level > 50) {\n            className = 'ion-battery-half';\n        }\n        else if (level > 10) {\n            className = 'ion-battery-low';\n        }\n        else {\n            className = 'ion-battery-empty text-red';\n        }\n        return className;\n    };\n    return BatteryIconComponent;\n}());\nvar TimeStringPipe = /*@__PURE__*/ (function () {\n    function TimeStringPipe() {\n    }\n    TimeStringPipe.prototype.transform = function (value, args) {\n        return TimeString(value, args);\n    };\n    return TimeStringPipe;\n}());\nvar DateStringPipe = /*@__PURE__*/ (function () {\n    function DateStringPipe() {\n    }\n    DateStringPipe.prototype.transform = function (value, args) {\n        return DateString(value, args);\n    };\n    return DateStringPipe;\n}());\nvar NameCasePipe = /*@__PURE__*/ (function () {\n    function NameCasePipe() {\n    }\n    NameCasePipe.prototype.transform = function (value, args) {\n        return NameCase(value);\n    };\n    return NameCasePipe;\n}());\nvar DotPipe = /*@__PURE__*/ (function () {\n    function DotPipe() {\n    }\n    DotPipe.prototype.transform = function (value, args) {\n        return DotString(value, args);\n    };\n    return DotPipe;\n}());\nvar LoadingDotsComponent = /*@__PURE__*/ (function () {\n    function LoadingDotsComponent() {\n        this.show = true;\n    }\n    LoadingDotsComponent.prototype.ngOnInit = function () {\n    };\n    return LoadingDotsComponent;\n}());\nvar LoadingDataComponent = /*@__PURE__*/ (function () {\n    function LoadingDataComponent() {\n        this.message = \"\";\n    }\n    LoadingDataComponent.prototype.ngOnInit = function () {\n    };\n    return LoadingDataComponent;\n}());\nvar DateHumanizePipe = /*@__PURE__*/ (function () {\n    function DateHumanizePipe() {\n    }\n    DateHumanizePipe.prototype.transform = function (value, args) {\n        return DateHumanize(value);\n    };\n    return DateHumanizePipe;\n}());\nvar DistanceLocalePipe = /*@__PURE__*/ (function () {\n    function DistanceLocalePipe() {\n    }\n    DistanceLocalePipe.prototype.transform = function (value, args) {\n        return DistanceLocale(value, args);\n    };\n    return DistanceLocalePipe;\n}());\nvar HmStringPipe = /*@__PURE__*/ (function () {\n    function HmStringPipe() {\n    }\n    HmStringPipe.prototype.transform = function (value, args, args2) {\n        return HMString(value, args);\n    };\n    return HmStringPipe;\n}());\nvar UsersStatusStringPipe = /*@__PURE__*/ (function () {\n    function UsersStatusStringPipe() {\n    }\n    UsersStatusStringPipe.prototype.transform = function (value, args) {\n        if (status.split(',').length === 4)\n            return 'Fit to map';\n    };\n    return UsersStatusStringPipe;\n}());\nvar ActionStatusStringPipe = /*@__PURE__*/ (function () {\n    function ActionStatusStringPipe() {\n    }\n    ActionStatusStringPipe.prototype.transform = function (value, args) {\n        return htAction().getFilterString(value);\n    };\n    return ActionStatusStringPipe;\n}());\nvar UserSortingStringPipe = /*@__PURE__*/ (function () {\n    function UserSortingStringPipe() {\n    }\n    UserSortingStringPipe.prototype.transform = function (value, args) {\n        return value;\n    };\n    return UserSortingStringPipe;\n}());\nvar ActionSortingStringPipe = /*@__PURE__*/ (function () {\n    function ActionSortingStringPipe() {\n    }\n    ActionSortingStringPipe.prototype.transform = function (value, args) {\n        return htAction().getSortingString(value);\n    };\n    return ActionSortingStringPipe;\n}());\nvar SafeUrlPipe = /*@__PURE__*/ (function () {\n    function SafeUrlPipe() {\n    }\n    SafeUrlPipe.prototype.transform = function (value, args) {\n    };\n    return SafeUrlPipe;\n}());\nvar PluralizePipe = /*@__PURE__*/ (function () {\n    function PluralizePipe() {\n    }\n    PluralizePipe.prototype.transform = function (value, args, suffix, singularSuffix) {\n        if (suffix === void 0) {\n            suffix = 's';\n        }\n        if (singularSuffix === void 0) {\n            singularSuffix = '';\n        }\n        if (args && typeof args === 'number') {\n            return args > 1 ? value + suffix : value + singularSuffix;\n        }\n        return value;\n    };\n    return PluralizePipe;\n}());\nvar ButtonComponent = /*@__PURE__*/ (function () {\n    function ButtonComponent() {\n    }\n    ButtonComponent.prototype.ngOnInit = function () {\n    };\n    return ButtonComponent;\n}());\nvar LoadingBarComponent = /*@__PURE__*/ (function () {\n    function LoadingBarComponent() {\n    }\n    LoadingBarComponent.prototype.ngOnInit = function () {\n    };\n    return LoadingBarComponent;\n}());\nvar DropdownDirective = /*@__PURE__*/ (function () {\n    function DropdownDirective() {\n        this.show = false;\n        this.appDropdown = 'onHover';\n    }\n    DropdownDirective.prototype.onMouseEnter = function (event) {\n        if (!this.appDropdown || this.appDropdown === 'onHover') {\n            this.show = true;\n        }\n    };\n    DropdownDirective.prototype.onMouseLeave = function (event) {\n        if (!this.appDropdown || this.appDropdown === 'onHover') {\n            this.show = false;\n        }\n    };\n    DropdownDirective.prototype.onClick = function (event) {\n        if (this.appDropdown == 'onClick') {\n            this.show = !this.show;\n        }\n    };\n    DropdownDirective.prototype.ngOnInit = function () {\n    };\n    return DropdownDirective;\n}());\nvar SharedModule = /*@__PURE__*/ (function () {\n    function SharedModule() {\n    }\n    return SharedModule;\n}());\nvar UsersSummaryModule = /*@__PURE__*/ (function () {\n    function UsersSummaryModule() {\n    }\n    return UsersSummaryModule;\n}());\nvar UsersSummaryContainerModule = /*@__PURE__*/ (function () {\n    function UsersSummaryContainerModule() {\n    }\n    return UsersSummaryContainerModule;\n}());\nvar UserCardComponent = /*@__PURE__*/ (function () {\n    function UserCardComponent() {\n        this.selectedUserId = null;\n        this.action = 'default';\n        this.onAction = new EventEmitter();\n        this.showStatus = true;\n        this.hovered = false;\n    }\n    UserCardComponent.prototype.hoverIn = function () {\n        this.hovered = true;\n    };\n    UserCardComponent.prototype.hoverOut = function () {\n        this.hovered = false;\n    };\n    UserCardComponent.prototype.ngOnInit = function () {\n    };\n    UserCardComponent.prototype.getShowStatus = function (user) {\n        if (user.segments) {\n            return !!user.segments.length && !last(user.segments)['ended_at'];\n        }\n        return !!user;\n    };\n    UserCardComponent.prototype.fireAction = function () {\n        this.onAction.next({ user: this.user, action: this.action });\n    };\n    UserCardComponent.prototype.ngOnChanges = function (a) {\n        this.showStatus = a.user ? this.getShowStatus(a.user.currentValue) : this.showStatus;\n    };\n    UserCardComponent.prototype.getActionText = function () {\n        switch (this.action) {\n            case \"close\":\n                return \"Close\";\n            case \"detail\":\n                return \"\";\n            case \"loading\":\n                return \"loading\";\n            default:\n                return \"View on Map\";\n        }\n    };\n    UserCardComponent.prototype.debug = function (e) {\n        console.log(e);\n    };\n    return UserCardComponent;\n}());\nvar UserCardModule = /*@__PURE__*/ (function () {\n    function UserCardModule() {\n    }\n    return UserCardModule;\n}());\nvar UsersComponent = /*@__PURE__*/ (function () {\n    function UsersComponent() {\n        this.hasMap = false;\n        this.showExtraBtn = true;\n        this.onSelectUser = new EventEmitter();\n        this.onAction = new EventEmitter();\n        this.onHover = new EventEmitter();\n    }\n    UsersComponent.prototype.ngOnInit = function () {\n    };\n    UsersComponent.prototype.getAction = function (user) {\n        var id = user.id;\n        if (!this.hasMap)\n            return 'detail';\n        if (this.selectedUserId === user.id) {\n            return \"close\";\n        }\n        else if (id === this.loadingUserDataId && (!this.selectedUserId || !user.segments)) {\n            return 'loading';\n        }\n        else if (this.selectedUserDataId === user.id) {\n            return 'detail';\n        }\n        else {\n            return \"default\";\n        }\n    };\n    UsersComponent.prototype.indexId = function (index, item) {\n        return item.id;\n    };\n    UsersComponent.prototype.selectUser = function (user) {\n        this.onSelectUser.next(user);\n    };\n    UsersComponent.prototype.hover = function (id) {\n        this.onHover.next(id);\n    };\n    UsersComponent.prototype.ngOnDestroy = function () {\n    };\n    return UsersComponent;\n}());\nvar UsersModule = /*@__PURE__*/ (function () {\n    function UsersModule() {\n    }\n    return UsersModule;\n}());\nvar UsersContainerComponent = /*@__PURE__*/ (function () {\n    function UsersContainerComponent(userService, mapService) {\n        this.userService = userService;\n        this.mapService = mapService;\n        this.hasPlaceline = true;\n        this.hasMap = false;\n        this.showStatusSummary = true;\n        this.showActiveSummary = true;\n        this.apiType = ApiType.analytics;\n        this.showAll = false;\n        this._queryMap = [\n            {\n                label: 'Logged in',\n                values: ['stopped', 'on_trip', 'network_offline'],\n                color: Color.blue\n            },\n            {\n                label: 'Logged off',\n                values: ['logged_off'],\n                color: '#a8a8a8',\n            },\n            {\n                label: 'Location disabled',\n                values: ['location_disabled'],\n                color: Color.red\n            },\n        ];\n    }\n    UsersContainerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.userService.list.setActive();\n        if (this.hasPlaceline) {\n            var selectedUser$ = listwithSelectedId$(this.userService.list.data$, this.userService.list.id$);\n            this.user$ = this.userService.placeline.data$;\n            this.usersPage$ = listWithItem$(selectedUser$, this.user$);\n            this.mapService.usersCluster.onClick = function (entity) {\n                _this.selectUserCard(entity.data);\n            };\n        }\n        else {\n            this.usersPage$ = this.userService.list.data$;\n        }\n        this.users$ = this.usersPage$.pipe(map$1(function (pageData) {\n            return pageData ? pageData.results : pageData;\n        }));\n        this.loadingUsers$ = this.userService.getLoading$();\n        this.loadingUserDataId$ = this.userService.placeline.loading$\n            .pipe(map$1(function (data) { return !!data; }), distinctUntilChanged());\n        this.selectedUserDataId$ = this.userService.placeline.id$;\n        this.selectedUserId$ = this.userService.list.id$;\n        this.showSummary$ = this.selectedUserId$.pipe(map$1(function (id) {\n            return id ? false : true;\n        }), distinctUntilChanged());\n    };\n    Object.defineProperty(UsersContainerComponent.prototype, \"queryMap\", {\n        get: function () {\n            var showAllLabel = this.userService.filterClass.showAllQueryArray;\n            return this.showAll ? __spread(this._queryMap, showAllLabel) : this._queryMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UsersContainerComponent.prototype.clear = function () {\n        this.mapService.segmentTrace.trace(null);\n    };\n    UsersContainerComponent.prototype.selectUserMarker = function (user) {\n        this.mapService.usersCluster.highlight(user);\n    };\n    UsersContainerComponent.prototype.onAction = function (payload) {\n        switch (payload['action']) {\n            case \"close\":\n                this.closeUser(payload.event);\n                break;\n            case \"detail\": {\n                this.selectUserCard(payload.user);\n                break;\n            }\n            case \"default\": {\n                this.selectUserCardAction(payload.user, payload.event);\n                break;\n            }\n            default:\n        }\n    };\n    UsersContainerComponent.prototype.selectUserCard = function (user) {\n        if (this.hasPlaceline) {\n            this.selectUser(user);\n        }\n        else {\n            this.selectUserMarker(user);\n        }\n    };\n    UsersContainerComponent.prototype.selectUserCardAction = function (user, event) {\n        if (this.hasPlaceline) {\n            this.selectUserData(user, event);\n        }\n        else {\n            this.selectUserMarker(user);\n        }\n    };\n    UsersContainerComponent.prototype.closeUser = function (event) {\n        event.stopPropagation();\n        this.userService.list.setId(null);\n        this.userService.placeline.setId(null);\n    };\n    UsersContainerComponent.prototype.selectUser = function (user) {\n        var id = user.id;\n        this.userService.list.toggleId(id);\n        this.userService.placeline.toggleId(id);\n    };\n    UsersContainerComponent.prototype.selectUserData = function (userData, event) {\n        var id = userData.id;\n        event.stopPropagation();\n        this.userService.placeline.toggleId(id);\n    };\n    UsersContainerComponent.prototype.fetchPage = function (number) {\n        this.userService.list.addQuery({ page: number });\n    };\n    UsersContainerComponent.prototype.hoverUser = function (userId) {\n        this.mapService.usersCluster.setPopup(userId);\n    };\n    UsersContainerComponent.prototype.closeHoverUser = function () {\n        this.hoverUser(null);\n    };\n    UsersContainerComponent.prototype.ngOnDestroy = function () {\n        this.userService.list.clearData();\n        this.userService.list.setId(null);\n    };\n    return UsersContainerComponent;\n}());\nvar PlacelineComponent = /*@__PURE__*/ (function () {\n    function PlacelineComponent(ref) {\n        this.ref = ref;\n        this.highlightedSegmentId = new EventEmitter();\n        this.hoveredAction = new EventEmitter();\n        this.selectedSegment = new EventEmitter();\n        this.selectedSegmentId = \"__\";\n        this.isMobile = false;\n        this.selectedAction = null;\n        this.selectedActivity = \"\";\n        this.hardSelectedActivity = \"\";\n        this.actionMap = {};\n    }\n    PlacelineComponent.prototype.selectInUserData = function (segment, event) {\n        if (segment && (segment.type === 'trip' || segment.type === 'stop')) {\n            var id = segment.id;\n            var hardSelectedActivity = this.selectedSegmentId === id ? null : segment.id;\n            console.log(\"emit\", this.hardSelectedActivity);\n            this.selectedSegment.next(hardSelectedActivity);\n        }\n        else {\n            this.hardSelectedActivity = \"\";\n            this.selectedSegment.next(null);\n            if (event)\n                event.stopPropagation();\n        }\n    };\n    PlacelineComponent.prototype.selectSegment = function (segment, toShow) {\n        if (toShow === void 0) {\n            toShow = true;\n        }\n        if (segment.actionText) {\n            var actionId = toShow ? segment.action_id : null;\n            this.selectAction(actionId);\n        }\n        else {\n            var userId = toShow ? segment.id : null;\n            this.highlightActivity(userId);\n        }\n    };\n    PlacelineComponent.prototype.hoverActivity = function (activityId) {\n        this.selectedActivity = activityId;\n        this.ref.detectChanges();\n    };\n    PlacelineComponent.prototype.highlightActivity = function (activityId) {\n        if (this.selectedSegmentId)\n            return false;\n        this.highlightedSegmentId.next(activityId);\n        this.hoverActivity(activityId);\n    };\n    PlacelineComponent.prototype.selectAction = function (actionId) {\n        this.selectedAction = actionId;\n        this.hoveredAction.next(actionId);\n        this.ref.detectChanges();\n    };\n    Object.defineProperty(PlacelineComponent.prototype, \"placelineMod\", {\n        get: function () {\n            var _this = this;\n            var placeline = this.userData;\n            if (this.userData.segments.length === 0)\n                return [];\n            var actions = placeline.actions;\n            this.actionMap = {};\n            var _a = this.currentExpActions(actions), currentActions = _a.currentActions, expActions = _a.expActions;\n            var allEvents = this.userData.events;\n            var activitySegments = reduce(this.userData.segments, function (acc, segment) {\n                var time = segment.started_at;\n                var activityText = _this.getActivityText(segment);\n                var activityClass = _this.getActivityClass(segment);\n                var placeAddress = _this.getActivityPlaceAddress(segment);\n                var lastSeg = segment;\n                var gapSegment = _this.getGapSegment(segment, acc.lastSeg);\n                var currentActivitySegment = Object.assign({}, segment, { time: time, events: [] }, _this.getSegmentStyle(activityClass), { activityText: activityText, placeAddress: placeAddress });\n                var events = reject(acc.events, function (event) {\n                    if (_this.isEventInSegment(segment, event)) {\n                        var eventDisplay = _this.getEventDisplay(event);\n                        event = Object.assign({}, event, eventDisplay);\n                        if (eventDisplay)\n                            currentActivitySegment.events.push(event);\n                        return true;\n                    }\n                    return false;\n                });\n                var activitySegments = __spread(acc.activitySegments, gapSegment, [currentActivitySegment]);\n                return { activitySegments: activitySegments, events: events, lastSeg: lastSeg };\n            }, { activitySegments: [], events: allEvents, lastSeg: null }).activitySegments;\n            var lastSeg = this.lastSeg(placeline);\n            var _b = reduce(__spread(activitySegments, [lastSeg]), function (acc, segment, i, placelineM) {\n                activitySegments = acc.activitySegments;\n                var lastSeg = segment;\n                var activityClass = acc.lastSeg ? acc.lastSeg.activityClass : 'no-info';\n                var actionSegments = acc.actionSegments;\n                var actionEvents = reject(acc.actionEvents, function (actionEvent) {\n                    var actionMin = _this.getMinute(actionEvent.actionTime);\n                    var segTime = _this.getMinute(segment.time);\n                    if (actionMin == segTime && !segment.ended && !segment.actionText) {\n                        var actionSegment = _this.createActionSegment(actionEvent, activityClass, acc.lastSeg);\n                        segment = Object.assign({}, actionSegment, segment);\n                        return true;\n                    }\n                    else if (actionEvent.actionTime <= segment.time) {\n                        var actionSegment = _this.createActionSegment(actionEvent, activityClass, acc.lastSeg);\n                        actionSegments.push(actionSegment);\n                        return true;\n                    }\n                    else {\n                    }\n                    return false;\n                });\n                if (segment.ended && !segment.actionText) {\n                }\n                else if (segment.ended) {\n                    activitySegments.push(Object.assign({}, segment, { ended: false, type: segment.type }));\n                }\n                else {\n                    activitySegments.push(Object.assign({}, segment, { type: segment.type }));\n                }\n                return { activitySegments: activitySegments, actionEvents: actionEvents, lastSeg: lastSeg, actionSegments: actionSegments };\n            }, { activitySegments: [], actionEvents: currentActions, lastSeg: null, actionSegments: [] }), actionSegments = _b.actionSegments, actionEvents = _b.actionEvents;\n            var unsortedCurrentSegment = __spread(activitySegments, actionSegments);\n            var currentSegment = sortBy(unsortedCurrentSegment, function (segment) {\n                return segment.time;\n            });\n            var restActiviySegments = map(actionEvents, function (actionEvent, i) {\n                lastSeg['activityBorder'] = 'no-info-border';\n                lastSeg['activityText'] = 'No information';\n                return _this.createActionSegment(actionEvent, 'no-info');\n            });\n            var expActionSegments = map(expActions, function (actionEvent, i, expEvents) {\n                if (actionEvents.length === 0) {\n                    lastSeg['activityBorder'] = 'line-border';\n                }\n                var activityClass = i < expEvents.length - 2 ? 'line' : '';\n                return _this.createActionSegment(actionEvent, activityClass);\n            });\n            if (restActiviySegments.length == 1 && restActiviySegments[0].actionText && lastSeg['time']) {\n                var actionTime = this.getMinute(restActiviySegments[0].time);\n                var lastTime = this.getMinute(lastSeg['time']);\n                if (actionTime == lastTime) {\n                    return lastSeg['time'] ? __spread(currentSegment, restActiviySegments, expActionSegments) : __spread(currentSegment, expActionSegments);\n                }\n            }\n            return lastSeg['time'] ? __spread(currentSegment, [lastSeg], restActiviySegments, expActionSegments) : __spread(currentSegment, expActionSegments);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PlacelineComponent.prototype.createActionSegment = function (actionEvent, activityClass, seg) {\n        if (activityClass === void 0) {\n            activityClass = 'no-info';\n        }\n        if (seg === void 0) {\n            seg = {};\n        }\n        var id = seg ? seg['id'] : '';\n        return Object.assign({}, actionEvent, { time: actionEvent.actionTime }, this.getSegmentStyle(activityClass), { ended: false, isLive: false, id: id });\n    };\n    PlacelineComponent.prototype.getSegmentStyle = function (activityClass) {\n        if (activityClass === void 0) {\n            activityClass = 'no-info';\n        }\n        return activityClass ?\n            {\n                activityBg: activityClass + \"-bg\",\n                activityBorder: activityClass + \"-border\",\n                activityClass: activityClass,\n                activityColor: activityClass + \"-color\"\n            } : {};\n    };\n    PlacelineComponent.prototype.isEventInSegment = function (segment, event) {\n        if (!!segment.ended_at && !!event.recorded_at) {\n            var eventMin = this.getMinute(event.recorded_at);\n            var segEndMin = this.getMinute(segment.ended_at);\n            var segStartMin = this.getMinute(segment.started_at);\n            return eventMin >= segStartMin && eventMin <= segEndMin;\n        }\n        return false;\n    };\n    PlacelineComponent.prototype.getMinute = function (time) {\n        var timeStamp = new Date(time).getTime();\n        return Math.round(timeStamp - timeStamp % 60000);\n    };\n    PlacelineComponent.prototype.currentExpActions = function (actions) {\n        var _this = this;\n        return reduce(actions, function (acc, action) {\n            var expActions = [];\n            _this.actionMap = _this.setActionMap(action);\n            var assign = Object.assign({ actionText: NameCase(action.type) + \" assigned\", actionTime: action.assigned_at, actionD: NameCase(action.type[0]) + _this.actionMap[action.id], action_id: action.id, actionLookupId: action.lookup_id }, action);\n            var currentActions = (assign.actionTime) ? __spread(acc.currentActions, [assign]) : acc.currentActions;\n            if (action.display.ended_at) {\n                var end = Object.assign({ actionText: NameCase(action.type) + \" \" + action.status, actionTime: action.display.ended_at, actionD: NameCase(action.type[0]) + _this.actionMap[action.id], actionEnd: true, action_id: action.id, action_distance: action.distance, action_duration: action.duration, actionEnded: true, actionLookupId: action.lookup_id }, action);\n                currentActions = __spread(currentActions, [end]);\n            }\n            else {\n                var end = Object.assign({ actionText: NameCase(action.type) + \" scheduled\", actionTime: action.eta || null, actionD: NameCase(action.type[0]) + _this.actionMap[action.id], actionEnd: true, action_id: action.id, action_distance: action.distance, action_duration: action.duration, actionLookupId: action.lookup_id }, action);\n                expActions.push(end);\n            }\n            return { currentActions: currentActions, expActions: expActions };\n        }, { currentActions: [], expActions: [] });\n    };\n    PlacelineComponent.prototype.lastSeg = function (placeline) {\n        var lastSeg = last(placeline.segments);\n        if (!lastSeg)\n            return {};\n        var pipeClass = \"\";\n        var time;\n        var isLive = new HtPlaceline().isLive(placeline);\n        if (!isLive) {\n            time = lastSeg.ended_at;\n        }\n        else {\n            isLive = true;\n            time = placeline.last_heartbeat_at;\n        }\n        var activityClass = this.getActivityClass(lastSeg);\n        return {\n            time: time,\n            pipeClass: pipeClass,\n            id: '..',\n            lastSeg: true,\n            isLive: isLive,\n            ended: true,\n            activityClass: activityClass,\n            activityBg: this.getActivityClass(lastSeg) + \"-bg\",\n            type: lastSeg.type\n        };\n    };\n    PlacelineComponent.prototype.isSegmentLive = function (placeline) {\n        var old = placeline.display.seconds_elapsed_since_last_heartbeat;\n        var status = placeline.display.status_text;\n        return status !== 'Logged off' && old < 15 * 60;\n    };\n    PlacelineComponent.prototype.getActivityClass = function (segment) {\n        var type = segment.type;\n        if (type === 'location_void') {\n            return 'warning';\n        }\n        return type === 'stop' ? 'stop' : 'trip';\n    };\n    PlacelineComponent.prototype.getPipeClass = function (status) {\n        return status === 'stop' ? 'stop solid' : 'trip solid';\n    };\n    PlacelineComponent.prototype.getActivityText = function (segment) {\n        if (segment.type === 'stop') {\n            return segment.place && segment.place.display_text ? segment.place.display_text : 'Stop';\n        }\n        else if (segment.activity) {\n            return segment.activity;\n        }\n        else if (segment.reason) {\n            return this.getLocationVoidText(segment);\n        }\n        else {\n            return NameCase(segment.type);\n        }\n    };\n    PlacelineComponent.prototype.getActivityPlaceAddress = function (segment) {\n        if (segment.type === 'stop' && segment.place && segment.place.locality) {\n            return segment.place.locality;\n        }\n        return \"\";\n    };\n    PlacelineComponent.prototype.getLocationVoidText = function (segment) {\n        switch (segment.reason) {\n            case 'disabled':\n                return \"Location disabled\";\n            case 'no_permission':\n                return \"Location permission unavailable\";\n            case 'unknown':\n                return \"Location unavailable\";\n            case 'sdk_inactive': {\n                return \"SDK inactive\";\n            }\n            case \"no_activity_permission\": {\n                return \"No activity permission\";\n            }\n            case \"device_off\": {\n                return \"Device off\";\n            }\n            default:\n                return \"Location unavailable\";\n        }\n    };\n    PlacelineComponent.prototype.getEventDisplay = function (event) {\n        switch (event.type) {\n            case 'tracking.started':\n                return {\n                    text: 'Tracking started',\n                    subtext: ''\n                };\n            case 'tracking.ended':\n                return {\n                    text: 'Tracking ended',\n                    subtext: ''\n                };\n            case 'device.secondary.ignored':\n                return {\n                    text: 'Secondary device ignored',\n                    subtext: ''\n                };\n        }\n        return {\n            text: \"\",\n            subtext: \"\"\n        };\n    };\n    PlacelineComponent.prototype.getGapSegment = function (segment, lastSeg) {\n        var gaps = [];\n        if (!lastSeg)\n            return [];\n        if (segment.started_at && lastSeg.ended_at) {\n            var endMin = this.getMinute(segment.started_at);\n            var startMin = this.getMinute(lastSeg.ended_at);\n            var duration = (new Date(segment.started_at).getTime() - new Date(lastSeg.ended_at).getTime()) / 1000;\n            if (endMin !== startMin && startMin < endMin) {\n                var gap = Object.assign({}, this.getSegmentStyle('no-info'), { time: lastSeg.ended_at, activityText: 'No information', events: [], id: '...', duration: duration });\n                gaps.push(gap);\n            }\n        }\n        return gaps;\n    };\n    PlacelineComponent.prototype.setActionMap = function (action) {\n        var actionMap = this.actionMap;\n        var type = action.type;\n        var id = action.id;\n        var typeCount = this.actionMap[type];\n        var actionShort = this.actionMap[id];\n        if (typeCount) {\n            if (!actionShort) {\n                actionMap[type] = this.actionMap[type] + 1;\n                actionMap[id] = '' + this.actionMap[type];\n            }\n        }\n        else {\n            actionMap[type] = 1;\n            actionMap[id] = '';\n        }\n        return Object.assign({}, actionMap);\n    };\n    PlacelineComponent.prototype.indexId = function (index, item) {\n        return item.id;\n    };\n    PlacelineComponent.prototype.indexPlaceline = function (index, item) {\n        return item.time || \"\";\n    };\n    PlacelineComponent.prototype.log = function (a) {\n        console.log(a);\n    };\n    PlacelineComponent.prototype.ngOnInit = function () {\n    };\n    return PlacelineComponent;\n}());\nvar PlacelineModule = /*@__PURE__*/ (function () {\n    function PlacelineModule() {\n    }\n    return PlacelineModule;\n}());\nvar PlacelineContainerComponent = /*@__PURE__*/ (function () {\n    function PlacelineContainerComponent(userClientService) {\n        this.userClientService = userClientService;\n        this.showUserCard = true;\n    }\n    PlacelineContainerComponent.prototype.ngOnInit = function () {\n        this.selectedSegmentId$ = this.userClientService.placeline.segmentResetId$;\n        this.userData$ = this.userClientService.placeline.data$;\n        if (this.userId) {\n            this.userClientService.placeline.setId(this.userId);\n        }\n    };\n    PlacelineContainerComponent.prototype.onHighlightSegment = function (segmentId) {\n        this.userClientService.placeline.setSegmentSelectedId(segmentId);\n    };\n    PlacelineContainerComponent.prototype.onSelectSegmentId = function (segmentId) {\n        this.userClientService.placeline.setSegmentResetMapId(segmentId);\n    };\n    PlacelineContainerComponent.prototype.ngOnDestroy = function () {\n        this.userClientService.placeline.setId(null);\n        this.userClientService.placeline.clearData();\n    };\n    return PlacelineContainerComponent;\n}());\nvar PlacelineContainerModule = /*@__PURE__*/ (function () {\n    function PlacelineContainerModule() {\n    }\n    return PlacelineContainerModule;\n}());\nvar PaginationComponent = /*@__PURE__*/ (function () {\n    function PaginationComponent() {\n        this.pageSize = 10;\n        this.fetchPage = new EventEmitter();\n    }\n    PaginationComponent.prototype.ngOnInit = function () {\n    };\n    Object.defineProperty(PaginationComponent.prototype, \"currentPage\", {\n        get: function () {\n            var preUrl = this.pageDate.previous;\n            var page = 1;\n            if (preUrl) {\n                var prevPage = GetUrlParam('page', this.pageDate.previous) || 1;\n                page = +prevPage + 1;\n            }\n            return page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PaginationComponent.prototype, \"pagesCount\", {\n        get: function () {\n            var count = this.pageDate.count;\n            return Math.ceil(count / this.pageSize);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PaginationComponent.prototype, \"visiblePages\", {\n        get: function () {\n            var _this = this;\n            return Array(this.pagesCount).fill(1).map(function (n, i) { return n + i; }).filter(function (i) {\n                if (_this.currentPage === 1) {\n                    return (_this.currentPage - i >= -2);\n                }\n                else if (_this.currentPage + 1 === i) {\n                    return true;\n                }\n                else if (_this.currentPage + 2 === i) {\n                    return true;\n                }\n                else if (_this.currentPage === i) {\n                    return true;\n                }\n                else if (_this.currentPage === _this.pagesCount) {\n                    return (_this.currentPage - i <= 2);\n                }\n                return false;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PaginationComponent.prototype.onFetchPage = function (pageNumber) {\n        if (pageNumber < 1 || pageNumber > this.pagesCount)\n            return;\n        this.fetchPage.next(pageNumber);\n    };\n    return PaginationComponent;\n}());\nvar PaginationModule = /*@__PURE__*/ (function () {\n    function PaginationModule() {\n    }\n    return PaginationModule;\n}());\nvar UsersContainerModule = /*@__PURE__*/ (function () {\n    function UsersContainerModule() {\n    }\n    return UsersContainerModule;\n}());\nvar UsersMapContainerComponent = /*@__PURE__*/ (function () {\n    function UsersMapContainerComponent(userClientService) {\n        this.userClientService = userClientService;\n        this.hasPlaceline = true;\n        this.apiType = ApiType.analytics;\n        this.showFilter = true;\n        this.showSidebar = true;\n        this.showAll = false;\n    }\n    UsersMapContainerComponent.prototype.ngOnInit = function () {\n        this.userClientService.listAll.setActive();\n    };\n    return UsersMapContainerComponent;\n}());\nvar MapContainerComponent = /*@__PURE__*/ (function () {\n    function MapContainerComponent(userClientService, mapService) {\n        this.userClientService = userClientService;\n        this.mapService = mapService;\n        this.showLoading = true;\n        this.subs = [];\n    }\n    MapContainerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.mapService.usersCluster.setPageData$(this.userClientService.listAll.data$, {\n            hide$: this.userClientService.placeline.id$\n        });\n        this.mapService.placeline.setCompoundData$(this.userClientService.placeline.data$, {\n            roots: ['segments', 'actions'],\n            highlighted$: this.userClientService.placeline.segmentSelectedId$,\n            filter$: this.userClientService.placeline.segmentResetId$,\n            resetMap$: this.userClientService.placeline.segmentResetId$\n        });\n        var loading$1 = this.userClientService.placeline.loading$\n            .pipe(map$1(function (data) { return !!data && _this.showLoading; }), distinctUntilChanged());\n        var loading$2 = this.userClientService.listAll.loading$\n            .pipe(map$1(function (data) { return !!data; }), distinctUntilChanged());\n        this.loading$ = merge(loading$1, loading$2);\n    };\n    MapContainerComponent.prototype.ngAfterContentInit = function () {\n    };\n    MapContainerComponent.prototype.ngOnDestroy = function () {\n        this.userClientService.listAll.clearData();\n        this.mapService.usersCluster.trace([]);\n    };\n    return MapContainerComponent;\n}());\nvar MapComponent = /*@__PURE__*/ (function () {\n    function MapComponent(elRef, htMapService) {\n        this.elRef = elRef;\n        this.loading = false;\n        this.showReset = true;\n        this.onReady = new EventEmitter();\n        this.onMapReset = new EventEmitter();\n        if (htMapService)\n            this.mapInstance = htMapService.mapInstance;\n    }\n    MapComponent.prototype.onMapResize = function () {\n        this.mapInstance.inValidateSize();\n    };\n    MapComponent.prototype.ngOnInit = function () {\n        this.mapInstance = this.mapInstance;\n    };\n    MapComponent.prototype.resetMap = function () {\n        this.mapInstance.resetBounds(this.setBoundsOptions);\n        this.onMapReset.next(true);\n    };\n    MapComponent.prototype.ngAfterViewInit = function () {\n        var el = this.mapElem.nativeElement;\n        this.mapInstance.renderMap(el, this.options);\n        this.onReady.next(this.mapInstance.map);\n        if (this.reset)\n            this.resetCta.createEmbeddedView(this.reset);\n    };\n    return MapComponent;\n}());\nvar MapModule = /*@__PURE__*/ (function () {\n    function MapModule() {\n    }\n    return MapModule;\n}());\nvar MapContainerModule = /*@__PURE__*/ (function () {\n    function MapContainerModule() {\n    }\n    return MapContainerModule;\n}());\nvar UsersFilterComponent = /*@__PURE__*/ (function () {\n    function UsersFilterComponent(usersClientService, cd) {\n        this.usersClientService = usersClientService;\n        this.cd = cd;\n        this.query$ = of(null);\n        this.loading$ = of(false);\n        this._options = {\n            showSearch: true,\n            showFilter: true,\n            showSorting: true,\n            showDatePicker: true,\n            showQueries: true\n        };\n        this.usersClient = this.usersClient || this.usersClientService;\n    }\n    Object.defineProperty(UsersFilterComponent.prototype, \"options\", {\n        get: function () {\n            return this._options;\n        },\n        set: function (options) {\n            this._options = Object.assign({}, options, this._options);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UsersFilterComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.query$ = _this.usersClient.queryLabel$;\n            _this.loading$ = _this.usersClient.list.loading$\n                .pipe(skip(1), map$1(function (data) { return !!data; }), distinctUntilChanged());\n            _this.cd.detectChanges();\n        });\n        this.statusFiltes = this.usersClient.filterClass.statusQueryArray;\n        this.sortingLabels = this.usersClient.filterClass.sortingQueryLabel;\n        this.ordering$ = this.usersClient.ordering$;\n        this.showFilter$ = this.usersClient.list.id$.pipe(map$1(function (id) { return !id ? 'show' : 'hide'; }));\n    };\n    UsersFilterComponent.prototype.onQuery = function (query$$1) {\n        this.usersClient.list.setQueryReset(query$$1);\n    };\n    UsersFilterComponent.prototype.clearQuery = function (key) {\n        this.usersClient.list.clearQueryKey(key);\n    };\n    UsersFilterComponent.prototype.setStatus = function (key, event) {\n        this.onQuery({ status: key });\n    };\n    UsersFilterComponent.prototype.setOrdering = function (key) {\n        this.onQuery({ ordering: key });\n    };\n    return UsersFilterComponent;\n}());\nvar EntitySearchComponent = /*@__PURE__*/ (function () {\n    function EntitySearchComponent() {\n        this.query$ = new Subject();\n        this.entity = \"\";\n        this.onSearchQuery = new EventEmitter();\n    }\n    EntitySearchComponent.prototype.clickSearch = function (e) {\n        this.input.nativeElement.focus();\n    };\n    EntitySearchComponent.prototype.ngOnInit = function () {\n    };\n    EntitySearchComponent.prototype.test = function (string) {\n        this.query$.next(string);\n    };\n    EntitySearchComponent.prototype.setSearch = function (el) {\n        var search = el.value;\n        el.value = '';\n        if (search)\n            this.onSearchQuery.next({ search: search });\n    };\n    return EntitySearchComponent;\n}());\nvar EntitySearchModule = /*@__PURE__*/ (function () {\n    function EntitySearchModule() {\n    }\n    return EntitySearchModule;\n}());\nvar DateRangeComponent = /*@__PURE__*/ (function () {\n    function DateRangeComponent(elRef, cd) {\n        this.elRef = elRef;\n        this.cd = cd;\n        this.dateRangeService = dateRangeService.getInstance();\n        this.isRight = false;\n        this.showSingleDay = true;\n        this.customDates = DateRangeLabelMap;\n        this.isActive = false;\n    }\n    DateRangeComponent.prototype.open = function () {\n        this.isActive = true;\n    };\n    DateRangeComponent.prototype.close = function () {\n        this.isActive = false;\n    };\n    DateRangeComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.dateRange$ = this.dateRangeService.display$;\n        this.dateRangeOptions$ = this.dateRangeService.data$.pipe(map$1(function (dateRange) {\n            return _this.customDates.filter(function (customRange) {\n                return _this.showSingleDay ? true : !customRange.isSingleDay;\n            }).map(function (customRange) {\n                return isSameDateRange(customRange.range, dateRange) ? Object.assign({}, customRange, { isActive: true }) : Object.assign({}, customRange);\n            });\n        }));\n        this.dateRangeOptions$.subscribe();\n    };\n    DateRangeComponent.prototype.setDateRange = function (range) {\n        var _this = this;\n        this.dateRangeService.setDateRange(range);\n        setTimeout(function () {\n            _this.isActive = false;\n            _this.cd.detectChanges();\n        }, 200);\n    };\n    return DateRangeComponent;\n}());\nvar DateRangePickerComponent = /*@__PURE__*/ (function () {\n    function DateRangePickerComponent() {\n        this.options = {};\n        this.onRangeChange = new EventEmitter();\n        this.onDateChange = new EventEmitter();\n        this.selectedDate$ = new BehaviorSubject(null);\n        this.hoveredDate = new BehaviorSubject(null);\n        this.days = [\n            'Sun',\n            'Mon',\n            'Tue',\n            'Wed',\n            'Thu',\n            'Fri',\n            'Sat'\n        ];\n        this.customDates = DateRangeLabelMap;\n        var monthStart = startOfMonth(new Date());\n        this.currentMonthStart$ = new BehaviorSubject(monthStart);\n    }\n    DateRangePickerComponent.prototype.ngOnInit = function () {\n    };\n    DateRangePickerComponent.prototype.ngOnChanges = function () {\n        if (this.options.datePicker) {\n            this.dateRange = { end: this.date, start: this.date };\n        }\n        this.initDateRange(this.dateRange);\n        this.display = dateRangeDisplay(this.dateRange);\n    };\n    DateRangePickerComponent.prototype.initDateRange = function (range) {\n        var _this = this;\n        this.customDates$ = this.customDates.filter(function (customRange) {\n            return !_this.options.hideSingleDay ? true : !customRange.isSingleDay;\n        }).map(function (customRange) {\n            return isSameDateRange(customRange.range, range) ? Object.assign({}, customRange, { isActive: true }) : Object.assign({}, customRange);\n        });\n        this.currentDateStyle$ = combineLatest(this.selectedDate$.pipe(distinctUntilChanged()), this.hoveredDate.pipe(distinctUntilChanged()), function (selectedDate, hoveredDate) {\n            var dateRange = range;\n            var selectedRange;\n            var display;\n            if (selectedDate && hoveredDate) {\n                if (isBefore(hoveredDate, selectedDate)) {\n                    selectedRange = { end: selectedDate };\n                    display = [null, format(selectedDate, 'DD MMM')];\n                }\n                else {\n                    selectedRange = { start: selectedDate };\n                    display = [format(selectedDate, 'DD MMM'), null];\n                }\n            }\n            else if (selectedDate) {\n                selectedRange = { end: selectedDate };\n                display = [format(selectedDate, 'DD MMM'), null];\n            }\n            else {\n                selectedRange = dateRange;\n                display = [format(dateRange.start, 'DD MMM'), format(dateRange.end, 'DD MMM')];\n            }\n            if (_this.options.datePicker) {\n                display = [format(dateRange.start, 'DD MMM')];\n            }\n            return {\n                selectedRange: selectedRange,\n                hoveredDate: hoveredDate,\n                display: display\n            };\n        });\n        this.dates$ = combineLatest(this.currentMonthStart$, this.currentDateStyle$, function (monthStart, dateStyle) {\n            return _this.generateDates(monthStart, dateStyle);\n        });\n        this.month$ = this.currentMonthStart$.pipe(map$1(function (date) {\n            return {\n                display: format(date, 'MMM YY')\n            };\n        }));\n    };\n    DateRangePickerComponent.prototype.changeMonth = function (inc) {\n        var month = addMonths(new Date(this.currentMonthStart$.getValue()), inc);\n        this.currentMonthStart$.next(month);\n    };\n    DateRangePickerComponent.prototype.generateDates = function (monthStart, dateStyle) {\n        var _this = this;\n        var start = startOfWeek(monthStart);\n        var weekStarts = [0, 1, 2, 3, 4, 5].map(function (v, i) {\n            return addWeeks(start, i);\n        });\n        var days = weekStarts.map(function (weekStart) {\n            return [0, 1, 2, 3, 4, 5, 6].map(function (i) {\n                var date = addDays(weekStart, i);\n                return _this.getDay(date, monthStart, dateStyle);\n            });\n        });\n        return days;\n    };\n    DateRangePickerComponent.prototype.getDay = function (date, monthStart, dateStyle) {\n        var selectedRange = this.getRangeFromStyle(dateStyle);\n        var isEnd = false;\n        var isStart = false;\n        var isHovered = this.isHovered(date, dateStyle);\n        if (selectedRange.end) {\n            isEnd = isSameDay(selectedRange.end, date);\n        }\n        if (selectedRange.start) {\n            isStart = isSameDay(selectedRange.start, date);\n        }\n        return {\n            date: date,\n            timeStamp: date.toISOString(),\n            day: format(date, 'D'),\n            isInMonth: isSameMonth(date, monthStart),\n            today: isToday(date),\n            isEnd: isEnd,\n            isStart: isStart,\n            isHovered: isHovered,\n            isInvalid: isFuture(date)\n        };\n    };\n    DateRangePickerComponent.prototype.isHovered = function (date, dateStyle) {\n        var hovered = dateStyle.hoveredDate;\n        var start = dateStyle.selectedRange.start || hovered;\n        var end = dateStyle.selectedRange.end || hovered || start;\n        return isWithinRange(date, start, end);\n    };\n    DateRangePickerComponent.prototype.setDateRange = function (range) {\n        range = { start: range.start, end: endOfDay(range.end).toISOString() };\n        this.onRangeChange.next(range);\n    };\n    DateRangePickerComponent.prototype.setDate = function (date) {\n        this.onDateChange.next(date.timeStamp);\n    };\n    DateRangePickerComponent.prototype.getRangeFromStyle = function (_a) {\n        var selectedRange = _a.selectedRange, hoveredDate = _a.hoveredDate;\n        return selectedRange;\n    };\n    DateRangePickerComponent.prototype.pickDate = function (date) {\n        var _this = this;\n        if (date.isInvalid)\n            return false;\n        if (this.options.datePicker) {\n            this.setDate(date);\n        }\n        else {\n            this.currentDateStyle$.pipe(take(1)).subscribe(function (dateStyle) {\n                if (dateStyle.hoveredDate || (!dateStyle.selectedRange.start || !dateStyle.selectedRange.end)) {\n                    _this.setDateFromDayRange(date, dateStyle);\n                }\n                else {\n                    _this.selectedDate$.next(new Date(date.date).toISOString());\n                }\n            });\n        }\n    };\n    DateRangePickerComponent.prototype.setDateFromDayRange = function (date, dateStyle) {\n        var range = { end: dateStyle.selectedRange.end || date.timeStamp, start: dateStyle.selectedRange.start || date.timeStamp };\n        this.selectedDate$.next(null);\n        this.hoveredDate.next(null);\n        this.setDateRange(range);\n    };\n    DateRangePickerComponent.prototype.hoverDate = function (date) {\n        var timeStamp = date ? new Date(date.date).toISOString() : null;\n        if (timeStamp) {\n            var selected = this.selectedDate$.getValue();\n            if (selected)\n                this.hoveredDate.next(timeStamp);\n        }\n        else {\n            this.hoveredDate.next(timeStamp);\n        }\n    };\n    DateRangePickerComponent.prototype.indexBy = function (a, v) {\n        return v.timeStamp;\n    };\n    DateRangePickerComponent.prototype.indexByWeek = function (a, v) {\n        return v[0].timeStamp;\n    };\n    DateRangePickerComponent.prototype.reset = function () {\n        this.selectedDate$.next(null);\n        this.hoveredDate.next(null);\n        var monthStart = startOfMonth(new Date());\n        this.currentMonthStart$.next(monthStart);\n    };\n    return DateRangePickerComponent;\n}());\nvar DateRangePickerModule = /*@__PURE__*/ (function () {\n    function DateRangePickerModule() {\n    }\n    return DateRangePickerModule;\n}());\nvar DateRangeModule = /*@__PURE__*/ (function () {\n    function DateRangeModule() {\n    }\n    return DateRangeModule;\n}());\nvar UsersFilterModule = /*@__PURE__*/ (function () {\n    function UsersFilterModule() {\n    }\n    return UsersFilterModule;\n}());\nvar UsersMapContainerModule = /*@__PURE__*/ (function () {\n    function UsersMapContainerModule() {\n    }\n    return UsersMapContainerModule;\n}());\nvar UsersSummaryChartComponent = /*@__PURE__*/ (function () {\n    function UsersSummaryChartComponent() {\n        this.noData = false;\n    }\n    UsersSummaryChartComponent.prototype.ngOnInit = function () {\n    };\n    UsersSummaryChartComponent.prototype.setChart = function (data) {\n        if (data.labels.length <= 1) {\n            this.noData = true;\n            return false;\n        }\n        if (this.chart) {\n            this.noData = false;\n        }\n        else {\n            this.chart = new Chart({\n                parent: this.charElem.nativeElement,\n                data: data,\n                type: 'percentage',\n                height: 150,\n                format_tooltip_x: function (d) { return d; },\n                format_tooltip_y: function (d) { return d; }\n            });\n        }\n    };\n    UsersSummaryChartComponent.prototype.formatSummary = function (data) {\n        var labels = data.chart.map(function (item) { return item.label; });\n        var values = data.chart.map(function (item) { return item.value; });\n        return {\n            labels: labels,\n            datasets: [\n                {\n                    values: values\n                }\n            ]\n        };\n    };\n    return UsersSummaryChartComponent;\n}());\nvar UsersSummaryChartModule = /*@__PURE__*/ (function () {\n    function UsersSummaryChartModule() {\n    }\n    return UsersSummaryChartModule;\n}());\nvar UsersAnalyticsListComponent = /*@__PURE__*/ (function () {\n    function UsersAnalyticsListComponent() {\n        this.selectedUser = null;\n    }\n    UsersAnalyticsListComponent.prototype.ngOnInit = function () {\n    };\n    UsersAnalyticsListComponent.prototype.showUserDetail = function (row) {\n        this.selectedUser = row.data;\n    };\n    UsersAnalyticsListComponent.prototype.closeModal = function () {\n        this.selectedUser = null;\n    };\n    UsersAnalyticsListComponent.prototype.ngOnDestroy = function () {\n    };\n    return UsersAnalyticsListComponent;\n}());\nvar UserTableComponent = /*@__PURE__*/ (function () {\n    function UserTableComponent() {\n        this.excludedKey = [\n            'name',\n            'status',\n            'photo',\n            'created_at',\n            'modified_at',\n            'id',\n            'availability_status',\n            'location_status',\n            'vehicle_type'\n        ];\n    }\n    UserTableComponent.prototype.ngOnInit = function () {\n    };\n    Object.defineProperty(UserTableComponent.prototype, \"tableData\", {\n        get: function () {\n            return tableFormat(this.user, { excludes: this.excludedKey, format: userTableFormat });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserTableComponent.prototype, \"actionData\", {\n        get: function () {\n            return tableFormat(this.user, { excludes: this.excludedKey, format: userTableFormat });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserTableComponent.prototype, \"currentUser\", {\n        get: function () {\n            return this.action ? this.action.user : this.user;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UserTableComponent.prototype.isKeyIncluded = function (key) {\n        return !!!this.excludedKey.includes(key);\n    };\n    return UserTableComponent;\n}());\nvar DataTableComponent = /*@__PURE__*/ (function () {\n    function DataTableComponent() {\n        this.clickable = false;\n        this.select = new EventEmitter();\n    }\n    DataTableComponent.prototype.ngOnInit = function () {\n    };\n    DataTableComponent.prototype.selectRow = function (row) {\n        if (this.clickable) {\n            this.select.next(row);\n        }\n    };\n    return DataTableComponent;\n}());\nvar DataTableModule = /*@__PURE__*/ (function () {\n    function DataTableModule() {\n    }\n    return DataTableModule;\n}());\nvar UserTableModule = /*@__PURE__*/ (function () {\n    function UserTableModule() {\n    }\n    return UserTableModule;\n}());\nvar UsersAnalyticsListModule = /*@__PURE__*/ (function () {\n    function UsersAnalyticsListModule() {\n    }\n    return UsersAnalyticsListModule;\n}());\nvar UsersListContainerComponent = /*@__PURE__*/ (function () {\n    function UsersListContainerComponent() {\n        this.dateRangeService = new DateRange(DateRangeMap.today);\n        this.date = DateRangeMap.today.start;\n    }\n    UsersListContainerComponent.prototype.ngOnInit = function () {\n        this.options = {\n            datePicker: true\n        };\n    };\n    UsersListContainerComponent.prototype.dateChange = function (date) {\n        this.date = date;\n    };\n    UsersListContainerComponent.prototype.rangeChange = function (range) {\n        this.dateRangeService.setDateRange(range);\n    };\n    return UsersListContainerComponent;\n}());\nvar UsersListContainerModule = /*@__PURE__*/ (function () {\n    function UsersListContainerModule() {\n    }\n    return UsersListContainerModule;\n}());\nvar GroupsComponent = /*@__PURE__*/ (function () {\n    function GroupsComponent() {\n        this.groupIdParam = 'id';\n    }\n    GroupsComponent.prototype.ngOnInit = function () {\n    };\n    return GroupsComponent;\n}());\nvar GroupsModule = /*@__PURE__*/ (function () {\n    function GroupsModule() {\n    }\n    return GroupsModule;\n}());\nvar GroupsContainerComponent = /*@__PURE__*/ (function () {\n    function GroupsContainerComponent(groupsClient) {\n        this.groupsClient = groupsClient;\n        this.groupIdParam = 'id';\n    }\n    GroupsContainerComponent.prototype.ngOnInit = function () {\n        this.groupsClient.list.setActive();\n        this.groups$ = this.groupsClient.list.dataArray$;\n    };\n    return GroupsContainerComponent;\n}());\nvar GroupsContainerModule = /*@__PURE__*/ (function () {\n    function GroupsContainerModule() {\n    }\n    return GroupsContainerModule;\n}());\nvar GroupsChartService = /*@__PURE__*/ (function () {\n    function GroupsChartService(groupsService) {\n        this.groupsService = groupsService;\n        this.selectedGroups$ = new BehaviorSubject([]);\n        this.groupsLevelsEntity$ = new BehaviorSubject({});\n        this.setGroupsLevels();\n        this.groupsLevels$ = combineLatest(this.selectedGroups$, this.groupsLevelsEntity$, function (selectedGroups, groupslevelsEntity) {\n            return selectedGroups.map(function (group) {\n                var id = group ? group.id : null;\n                return id && groupslevelsEntity[id] ? groupslevelsEntity[id] : null;\n            });\n        });\n    }\n    GroupsChartService.prototype.setRootGroupId = function (groupId) {\n        var _this = this;\n        this.selectedGroups$.pipe(take(1), filter(function (groups) {\n            var firstGroup = groups && groups[0] ? groups[0] : null;\n            var id = firstGroup ? firstGroup.id : null;\n            return id !== groupId || (groupId == null && !groups.length);\n        }), switchMap(function () {\n            return groupId ? _this.groupsService.item.api$(groupId) : of(null);\n        })).subscribe(function (group) {\n            _this.setSelectedGroup(group, 0);\n        });\n    };\n    GroupsChartService.prototype.setSelectedGroup = function (group, level) {\n        var _this = this;\n        this.selectedGroups$.asObservable().pipe(take(1), map$1(function (selectedGroups) {\n            selectedGroups.splice(level);\n            selectedGroups.push(group);\n            return selectedGroups;\n        })).subscribe(function (selectedGroups) {\n            _this.selectedGroups$.next(selectedGroups);\n        });\n    };\n    GroupsChartService.prototype.setGroupsLevels = function () {\n        var _this = this;\n        if (this.groupsSub)\n            return false;\n        this.groupsSub = this.selectedGroups$.pipe(filter(function (data) { return !!data.length; }), withLatestFrom(this.groupsLevelsEntity$), switchMap(function (_a) {\n            var _b = __read(_a, 2), selectedGroups = _b[0], groupsLevels = _b[1];\n            var level = selectedGroups.length;\n            var lastSelectedGroup = level && selectedGroups.length ? selectedGroups[level - 1] : null;\n            var lastId = lastSelectedGroup ? lastSelectedGroup.id : null;\n            groupsLevels = selectedGroups.reduce(function (acc, group) {\n                var groupId = group ? group.id : null;\n                return groupId && groupsLevels[groupId] ? Object.assign({}, acc, (_a = {}, _a[groupId] = groupsLevels[groupId], _a)) : acc;\n                var _a;\n            }, {});\n            if (lastId && groupsLevels[lastId]) {\n                return of(groupsLevels);\n            }\n            else {\n                return _this.getGroups(lastId).pipe(map$1(function (groupsPage) {\n                    return lastId ? Object.assign({}, groupsLevels, (_a = {}, _a[lastId] = groupsPage.results, _a)) : groupsLevels;\n                    var _a;\n                }));\n            }\n        })).subscribe(function (data) {\n            _this.groupsLevelsEntity$.next(data);\n        });\n    };\n    GroupsChartService.prototype.getGroups = function (parentId) {\n        return parentId ? this.groupsService.getChildren(parentId) : this.groupsService.getRoot();\n    };\n    GroupsChartService.prototype.setLevel = function (level) {\n        var _this = this;\n        this.selectedGroups$.asObservable().pipe(take(1), map$1(function (selectedGroups) {\n            selectedGroups.splice(level + 1);\n            return selectedGroups;\n        })).subscribe(function (selectedGroups) {\n            _this.selectedGroups$.next(selectedGroups);\n        });\n    };\n    return GroupsChartService;\n}());\nvar GroupsChartContainerComponent = /*@__PURE__*/ (function () {\n    function GroupsChartContainerComponent(groupsChartService) {\n        this.groupsChartService = groupsChartService;\n        this.loading = false;\n        this.onGroup = new EventEmitter();\n    }\n    GroupsChartContainerComponent.prototype.ngOnInit = function () {\n        var groupId = this.groupId ? this.groupId : null;\n        this.groupsChartService.setRootGroupId(groupId);\n    };\n    Object.defineProperty(GroupsChartContainerComponent.prototype, \"selectedGroups$\", {\n        get: function () {\n            return this.groupsChartService.selectedGroups$;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupsChartContainerComponent.prototype, \"groupsLevels$\", {\n        get: function () {\n            return this.groupsChartService.groupsLevels$;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GroupsChartContainerComponent.prototype.setGroup = function (group) {\n        this.onGroup.next(group);\n    };\n    GroupsChartContainerComponent.prototype.selectGroup = function (group, level, event) {\n        var id = group.id;\n        event.stopPropagation();\n        event.preventDefault();\n        this.groupsChartService.setSelectedGroup(group, level + 1);\n    };\n    return GroupsChartContainerComponent;\n}());\nvar GroupsChartContainerModule = /*@__PURE__*/ (function () {\n    function GroupsChartContainerModule() {\n    }\n    return GroupsChartContainerModule;\n}());\nvar PlacelineMapContainerComponent = /*@__PURE__*/ (function () {\n    function PlacelineMapContainerComponent(userClientService, mapService) {\n        this.userClientService = userClientService;\n        this.mapService = mapService;\n        this.showSidebar = true;\n    }\n    PlacelineMapContainerComponent.prototype.ngOnInit = function () {\n        this.userClientService.placeline.setId(this.userId);\n    };\n    return PlacelineMapContainerComponent;\n}());\nvar PlacelineMapContainerModule = /*@__PURE__*/ (function () {\n    function PlacelineMapContainerModule() {\n    }\n    return PlacelineMapContainerModule;\n}());\nvar destroy$ = Symbol('destroy$');\nvar untilDestroy = function (component) {\n    return function (source) {\n        if (component[destroy$] === undefined) {\n            addDestroyObservableToComponent(component);\n        }\n        return source.pipe(takeUntil(component[destroy$]));\n    };\n};\nfunction addDestroyObservableToComponent(component) {\n    component[destroy$] = new Observable(function (observer) {\n        var orignalDestroy = component.ngOnDestroy;\n        if (orignalDestroy === undefined) {\n            throw new Error('untilDestroy operator needs the component to have an ngOnDestroy method');\n        }\n        component.ngOnDestroy = function () {\n            observer.next();\n            observer.complete();\n            orignalDestroy.call(component);\n        };\n        return function (_) { return (component[destroy$] = undefined); };\n    });\n}\nvar ActionsStatusGraphComponent = /*@__PURE__*/ (function () {\n    function ActionsStatusGraphComponent() {\n        this.noData = false;\n    }\n    ActionsStatusGraphComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.service.data$.pipe(untilDestroy(this))\n            .subscribe(function (data) {\n            _this.setChart(data);\n        });\n    };\n    ActionsStatusGraphComponent.prototype.ngAfterViewInit = function () {\n    };\n    ActionsStatusGraphComponent.prototype.setChart = function (data) {\n        if (data.labels.length <= 1) {\n            this.noData = true;\n            return false;\n        }\n        if (this.chart) {\n            this.noData = false;\n            var labels = data.labels;\n            var dataset = data.datasets;\n            this.chart.update_values(dataset, labels);\n            var type = data.labels.length > 1 ? 'line' : 'bar';\n        }\n        else {\n            this.chart = new Chart({\n                parent: this.charElem.nativeElement,\n                data: data,\n                type: 'line',\n                height: 250,\n                is_series: 1,\n                colors: ['#60c1fd', 'red'],\n                region_fill: 1,\n                format_tooltip_x: function (d) {\n                    return d;\n                },\n                format_tooltip_y: function (d) { return d; }\n            });\n        }\n    };\n    ActionsStatusGraphComponent.prototype.ngOnDestroy = function () {\n    };\n    return ActionsStatusGraphComponent;\n}());\nvar ActionsStatusGraphModule = /*@__PURE__*/ (function () {\n    function ActionsStatusGraphModule() {\n    }\n    return ActionsStatusGraphModule;\n}());\nvar UsersAnalyticsListService = /*@__PURE__*/ (function () {\n    function UsersAnalyticsListService(config) {\n        this.component = UsersAnalyticsListComponent;\n        this.className = \"is-6\";\n        this.tags = ['users'];\n        this.initState(config);\n        this.initClient(config);\n    }\n    UsersAnalyticsListService.prototype.initState = function (config) {\n        this.dateRangeService$ = dateRangeFactory(config.initialDateRange || DateRangeMap.last_7_days);\n        this.title = config.title;\n        this.tableFormat = config.tableFormat;\n        this.query = config.query;\n        this.columns = this.tableFormat.map(function (data) { return data.label; });\n        this.hideDatePicker = config.hideDatePicker;\n        if (config.tags && config.tags.length)\n            this.tags = __spread(this.tags, config.tags);\n    };\n    UsersAnalyticsListService.prototype.initClient = function (config) {\n        var _this = this;\n        var userClient = usersClientFactory({ dateRange: this.dateRangeService$ });\n        this.client = userClient.list;\n        this.client.updateStrategy = config.updateStrategy || \"once\";\n        this.client.setQuery(this.query);\n        this.loading$ = this.client.loading$;\n        var data$ = this.client.dataArray$;\n        this.dataTable$ = data$.pipe(filter(function (data) { return !!data; }), map$1(function (users) {\n            _this.noData = users.length ? false : true;\n            return users.map(function (user) {\n                var values = _this.tableFormat.map(function (data) { return data.selector(user); });\n                return { data: user, values: values };\n            });\n        }));\n    };\n    UsersAnalyticsListService.prototype.setData = function (instance) {\n        instance.listService = this;\n    };\n    UsersAnalyticsListService.prototype.setActive = function (isActive) {\n        if (isActive === void 0) {\n            isActive = true;\n        }\n        this.client.setActive(isActive);\n    };\n    return UsersAnalyticsListService;\n}());\nvar UsersSummaryService = /*@__PURE__*/ (function () {\n    function UsersSummaryService(config) {\n        this.component = UsersSummaryChartComponent;\n        this.className = 'is-6';\n        this.tags = ['users', 'live'];\n        this.hideDatePicker = true;\n        this.noData = false;\n        this.minHeight = 50;\n        this.setState(config);\n    }\n    UsersSummaryService.prototype.setData = function (instance) {\n        instance.service = this;\n    };\n    UsersSummaryService.prototype.setState = function (config) {\n        this.dateRangeService$ = dateRangeFactory(DateRangeMap.last_30_days);\n        this.title = config.title;\n        var client = config.client || usersClientFactory({ dateRange: this.dateRangeService$ });\n        client.setShowAll();\n        this.client = client.summary;\n        this.loading$ = this.client.loading$;\n        this.summary$ = client.listStatusChart$(config.queryLabels);\n    };\n    UsersSummaryService.prototype.destroy = function () {\n        this.client.destroy();\n    };\n    UsersSummaryService.prototype.setActive = function (isActive) {\n        if (isActive === void 0) {\n            isActive = true;\n        }\n        this.client.setActive(isActive);\n    };\n    return UsersSummaryService;\n}());\nvar AnalyticsMapContainerComponent = /*@__PURE__*/ (function () {\n    function AnalyticsMapContainerComponent() {\n        this.mapOptions = {\n            scrollWheelZoom: false\n        };\n    }\n    AnalyticsMapContainerComponent.prototype.ngOnInit = function () {\n    };\n    return AnalyticsMapContainerComponent;\n}());\nvar StopsHeatmapService = /*@__PURE__*/ (function () {\n    function StopsHeatmapService(config) {\n        this.component = AnalyticsMapContainerComponent;\n        this.className = \"is-6\";\n        this.tags = ['users'];\n        this.noData = false;\n        this.loading$ = of(false);\n        this.mapInstance = new MapInstance();\n        this.setMapType(mapTypeService.getInstance().mapType);\n        this.initClient(config);\n    }\n    StopsHeatmapService.prototype.setMapType = function (mapType) {\n        this.mapInstance.setMapType(mapType);\n    };\n    StopsHeatmapService.prototype.setData = function (instance) {\n        instance.service = this;\n    };\n    StopsHeatmapService.prototype.setActive = function (active) {\n        if (active === void 0) {\n            active = true;\n        }\n        this.client.setActive(active);\n    };\n    StopsHeatmapService.prototype.initClient = function (config) {\n        var _this = this;\n        this.dateRangeService$ = dateRangeFactory(config.initialDateRange || DateRangeMap.last_7_days);\n        this.title = config.title;\n        var userClient = usersClientFactory({ dateRange: this.dateRangeService$ });\n        this.client = userClient.heatmap;\n        this.mapLoading$ = this.client.loading$;\n        this.data$ = this.client.data$.pipe(tap(function (data) {\n            _this.noData = data && data.count == 0 ? true : false;\n        }));\n        var heatMapTrace = new StopsHeatmapTrace(this.mapInstance);\n        heatMapTrace.setPageData$(this.data$);\n    };\n    return StopsHeatmapService;\n}());\nvar usersAnalyticsListPresets = {\n    stops_heatmap: function () {\n        return {\n            service: StopsHeatmapService,\n            initialConfig: {\n                title: \"Heatmap of stops by users\",\n                query: { page_size: 500 },\n                tags: ['user behaviour'],\n                initialDateRange: DateRangeMap.last_7_days\n            }\n        };\n    },\n    max_location_disabled_duration: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Users with max location disabled duration\",\n                query: { ordering: \"-location_disabled_duration\" },\n                tags: ['user behaviour', 'device health'],\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.location_disabled_duration,\n                    {\n                        label: \"% of total duration\",\n                        selector: function (user) {\n                            return user.total_duration && user.location_disabled_duration ?\n                                (100 * (user.location_disabled_duration / user.total_duration)).toFixed(1) :\n                                \"NA\";\n                        }\n                    }\n                ]\n            }\n        };\n    },\n    current_location_disabled: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Recent users with location disabled\",\n                query: { status: 'location_disabled', show_all: true, ordering: '-last_heartbeat' },\n                updateStrategy: 'live',\n                hideDatePicker: true,\n                tags: ['user behaviour', 'device health', 'live'],\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.last_heartbeat_at\n                ]\n            }\n        };\n    },\n    max_stop_duration: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Users with max stop duration\",\n                query: { ordering: \"-stop_duration\" },\n                tags: ['activity'],\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.stop_duration,\n                    {\n                        label: \"% of total duration\",\n                        selector: function (user) {\n                            return user.total_duration && user.stop_duration ?\n                                (100 * (user.stop_duration / user.total_duration)).toFixed(1) + '%' :\n                                \"NA\";\n                        }\n                    }\n                ]\n            }\n        };\n    },\n    max_network_offline: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Users with max network offline duration\",\n                query: { ordering: \"-network_offline_duration\" },\n                tags: ['device health'],\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.network_offline_duration,\n                    {\n                        label: \"% of total duration\",\n                        selector: function (user) {\n                            return user.total_duration && user.network_offline_duration ?\n                                (100 * (user.network_offline_duration / user.total_duration)).toFixed(1) + '%' :\n                                \"NA\";\n                        }\n                    }\n                ]\n            }\n        };\n    },\n    max_distance: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Users with max distance travelled\",\n                query: { ordering: \"-total_distance\" },\n                tags: ['distance'],\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.total_distance\n                ]\n            }\n        };\n    },\n    users_summary: function (usersClient, title, queryLabels) {\n        return {\n            service: UsersSummaryService,\n            initialConfig: {\n                title: title || \"Users status summary\",\n                queryLabels: queryLabels,\n                client: usersClient,\n            }\n        };\n    },\n    last_recorded: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Recent active users\",\n                query: { ordering: \"-last_heartbeat_at\" },\n                tags: ['live'],\n                initialDateRange: DateRangeMap.last_30_days,\n                hideDatePicker: true,\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.last_heartbeat_at\n                ]\n            }\n        };\n    },\n    users_actions: function () {\n        return {\n            service: UsersAnalyticsListService,\n            initialConfig: {\n                title: \"Users with max actions\",\n                query: { ordering: \"-num_actions\" },\n                tags: ['actions'],\n                initialDateRange: DateRangeMap.today,\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (user) {\n                            return user.name;\n                        }\n                    },\n                    userTableFormat.num_actions\n                ]\n            }\n        };\n    }\n};\nvar ActionsStatusGraphService = /*@__PURE__*/ (function () {\n    function ActionsStatusGraphService(config) {\n        this.component = ActionsStatusGraphComponent;\n        this.tags = ['actions'];\n        this.className = \"is-12\";\n        this.initState(config);\n        this.initClient();\n    }\n    ActionsStatusGraphService.prototype.initState = function (config) {\n        this.dateRangeService$ = dateRangeFactory(config.initialDateRange || DateRangeMap.last_7_days);\n        this.title = config.title || \"Actions graph\";\n        this.chartFormat = config.chartFormat;\n        if (config.tags && config.tags.length)\n            this.tags = __spread(this.tags, config.tags);\n    };\n    ActionsStatusGraphService.prototype.initClient = function () {\n        var _this = this;\n        var graphClient = actionsClientFactory({ dateRange: this.dateRangeService$ });\n        this.client = graphClient.graph;\n        this.loading$ = this.client.loading$;\n        this.data$ = this.client.data$.pipe(filter(function (data) { return !!data; }), map$1(function (data) {\n            _this.noData = data.length ? false : true;\n            return _this.getCompletedActionChart(data);\n        }));\n    };\n    ActionsStatusGraphService.prototype.getCompletedActionChart = function (data) {\n        var labels = data.map(function (item) {\n            return format(item.created_date, 'ddd, MMM Do');\n        });\n        var datasets = this.chartFormat.map(function (item) {\n            return {\n                title: item.title,\n                values: data.map(item.selector)\n            };\n        });\n        return {\n            labels: labels,\n            datasets: datasets\n        };\n    };\n    ActionsStatusGraphService.prototype.setData = function (instance) {\n        instance.service = this;\n    };\n    ActionsStatusGraphService.prototype.setActive = function (isActive) {\n        if (isActive === void 0) {\n            isActive = true;\n        }\n    };\n    return ActionsStatusGraphService;\n}());\nvar ActionsAnalyticsListComponent = /*@__PURE__*/ (function () {\n    function ActionsAnalyticsListComponent() {\n        this.selectedAction = null;\n    }\n    ActionsAnalyticsListComponent.prototype.ngOnInit = function () {\n    };\n    ActionsAnalyticsListComponent.prototype.showActionDetail = function (row) {\n        this.selectedAction = row.data;\n    };\n    ActionsAnalyticsListComponent.prototype.closeModal = function () {\n        this.selectedAction = null;\n    };\n    return ActionsAnalyticsListComponent;\n}());\nvar ActionsAnalyticsListService = /*@__PURE__*/ (function () {\n    function ActionsAnalyticsListService(config) {\n        this.component = ActionsAnalyticsListComponent;\n        this.className = \"is-6\";\n        this.tags = ['actions'];\n        this.noData = false;\n        this.initState(config);\n        this.initClient(config);\n    }\n    ActionsAnalyticsListService.prototype.initState = function (config) {\n        this.dateRangeService$ = dateRangeFactory(config.initialDateRange || DateRangeMap.last_7_days);\n        this.title = config.title;\n        this.tableFormat = config.tableFormat;\n        this.query = config.query;\n        this.columns = this.tableFormat.map(function (data) { return data.label; });\n        this.hideDatePicker = config.hideDatePicker;\n        if (config.tags && config.tags.length)\n            this.tags = __spread(this.tags, config.tags);\n    };\n    ActionsAnalyticsListService.prototype.initClient = function (config) {\n        var _this = this;\n        var userClient = actionsClientFactory({ dateRange: this.dateRangeService$ });\n        this.client = userClient.list;\n        this.client.updateStrategy = config.updateStrategy || \"once\";\n        this.client.setQuery(this.query);\n        this.loading$ = this.client.loading$;\n        var data$ = this.client.dataArray$;\n        this.dataTable$ = data$.pipe(filter(function (data) { return !!data; }), map$1(function (users) {\n            _this.noData = (users.length === 0) ? true : false;\n            return users.map(function (user) {\n                var values = _this.tableFormat.map(function (data) { return data.selector(user); });\n                return { data: user, values: values };\n            });\n        }));\n    };\n    ActionsAnalyticsListService.prototype.setData = function (instance) {\n        instance.listService = this;\n    };\n    ActionsAnalyticsListService.prototype.setActive = function (isActive) {\n        if (isActive === void 0) {\n            isActive = true;\n        }\n        this.client.setActive(isActive);\n    };\n    return ActionsAnalyticsListService;\n}());\nvar ActionsSummaryChartComponent = /*@__PURE__*/ (function () {\n    function ActionsSummaryChartComponent() {\n    }\n    ActionsSummaryChartComponent.prototype.ngOnInit = function () {\n    };\n    return ActionsSummaryChartComponent;\n}());\nvar ActionsSummaryService = /*@__PURE__*/ (function () {\n    function ActionsSummaryService(config) {\n        this.component = ActionsSummaryChartComponent;\n        this.className = \"is-6\";\n        this.tags = ['actions', 'live'];\n        this.hideDatePicker = false;\n        this.noData = false;\n        this.minHeight = 50;\n        this.initState(config);\n    }\n    ActionsSummaryService.prototype.setData = function (instance) {\n        instance.service = this;\n    };\n    ActionsSummaryService.prototype.initState = function (config) {\n        this.dateRangeService$ = dateRangeFactory(DateRangeMap.today);\n        this.title = config.title;\n        var client = config.client || actionsClientFactory({ dateRange: this.dateRangeService$ });\n        if (config.dateRangeService)\n            this.dateRangeService$ = config.dateRangeService;\n        this.client = client.summary;\n        this.loading$ = this.client.loading$;\n        this.summary$ = this.client.summaryChart$;\n    };\n    ActionsSummaryService.prototype.setActive = function (isActive) {\n        if (isActive === void 0) {\n            isActive = true;\n        }\n        this.client.setActive(isActive);\n    };\n    return ActionsSummaryService;\n}());\nvar ActionsHeatmapService = /*@__PURE__*/ (function () {\n    function ActionsHeatmapService(config) {\n        this.component = AnalyticsMapContainerComponent;\n        this.className = \"is-6\";\n        this.tags = ['actions'];\n        this.noData = false;\n        this.loading$ = of(false);\n        this.mapInstance = new MapInstance();\n        this.setMapType(mapTypeService.getInstance().mapType);\n        this.initClient(config);\n    }\n    ActionsHeatmapService.prototype.setMapType = function (mapType) {\n        this.mapInstance.setMapType(mapType);\n    };\n    ActionsHeatmapService.prototype.setData = function (instance) {\n        instance.service = this;\n    };\n    ActionsHeatmapService.prototype.setActive = function (active) {\n        if (active === void 0) {\n            active = true;\n        }\n        this.client.setActive(active);\n    };\n    ActionsHeatmapService.prototype.initClient = function (config) {\n        var _this = this;\n        this.dateRangeService$ = dateRangeFactory(config.initialDateRange || DateRangeMap.last_7_days);\n        this.title = config.title;\n        var actionsClient = actionsClientFactory({ dateRange: this.dateRangeService$ });\n        this.client = actionsClient.heatmap;\n        this.mapLoading$ = this.client.loading$;\n        this.data$ = this.client.data$.pipe(tap(function (data) {\n            _this.noData = data && data.count == 0 ? true : false;\n        }));\n        var heatMapTrace = new ActionsHeatmapTrace(this.mapInstance);\n        heatMapTrace.setPageData$(this.data$);\n    };\n    return ActionsHeatmapService;\n}());\nvar actionsConfigPreset = {\n    heatmap: function () {\n        return {\n            service: ActionsHeatmapService,\n            initialConfig: {\n                title: \"Heatmap of completed actions\",\n                initialDateRange: DateRangeMap.last_7_days,\n                query: { page_size: 500 }\n            }\n        };\n    },\n    status: function () {\n        return {\n            service: ActionsStatusGraphService,\n            initialConfig: {\n                title: \"Actions status chart\",\n                initialDateRange: DateRangeMap.last_30_days,\n                tags: [],\n                chartFormat: [\n                    {\n                        title: \"Assigned\",\n                        selector: function (graphData) {\n                            return graphData.assigned;\n                        }\n                    },\n                    {\n                        title: \"Completed\",\n                        selector: function (graphData) {\n                            return graphData.completed;\n                        }\n                    },\n                ]\n            }\n        };\n    },\n    max_distance: function () {\n        return {\n            service: ActionsAnalyticsListService,\n            initialConfig: {\n                title: \"Actions with max distance\",\n                tags: ['distance'],\n                query: { ordering: '-distance' },\n                tableFormat: [\n                    {\n                        label: \"id\",\n                        selector: function (action) {\n                            return action.lookup_id || \"NA\";\n                        }\n                    },\n                    {\n                        label: \"Type\",\n                        selector: function (action) {\n                            return action.type;\n                        }\n                    },\n                    actionTableFormat.distance,\n                    actionTableFormat.duration\n                ]\n            }\n        };\n    },\n    recently_assigned: function () {\n        return {\n            service: ActionsAnalyticsListService,\n            initialConfig: {\n                title: \"Recent assigned actions\",\n                tags: ['live'],\n                query: { ordering: '-assigned_at', status: 'assigned,started' },\n                updateStrategy: \"live\",\n                hideDatePicker: true,\n                initialDateRange: DateRangeMap.last_30_days,\n                tableFormat: [\n                    {\n                        label: \"User\",\n                        selector: function (action) {\n                            return action.user ? NameCase(action.user.name) : \"NA\";\n                        }\n                    },\n                    {\n                        label: \"Type\",\n                        selector: function (action) {\n                            return action.type;\n                        }\n                    },\n                    actionTableFormat.assigned_at,\n                    {\n                        label: \"Expected at\",\n                        selector: function (action) {\n                            return action.expected_at ?\n                                TimeString(action.expected_at) + \" \" + DateString(action.expected_at, 'short') : action.eta ?\n                                TimeString(action.eta) + \" \" + DateString(action.eta, 'short') : \"--\";\n                        }\n                    },\n                    {\n                        label: \"Distance remaining\",\n                        selector: function (action) {\n                            return action.display.distance_remaining ? DistanceLocale(action.display.distance_remaining) : \"--\";\n                        }\n                    }\n                ]\n            }\n        };\n    },\n    recently_completed: function () {\n        return {\n            service: ActionsAnalyticsListService,\n            initialConfig: {\n                title: \"Recent completed actions\",\n                tags: ['live'],\n                query: { ordering: '-completed_at', status: 'completed' },\n                updateStrategy: \"live\",\n                hideDatePicker: true,\n                initialDateRange: DateRangeMap.last_30_days,\n                tableFormat: [\n                    {\n                        label: \"User\",\n                        selector: function (action) {\n                            return action.user ? NameCase(action.user.name) : \"NA\";\n                        }\n                    },\n                    {\n                        label: \"Type\",\n                        selector: function (action) {\n                            return action.type;\n                        }\n                    },\n                    actionTableFormat.completed_at,\n                    {\n                        label: \"Ontime\",\n                        selector: function (action) {\n                            return action.display.is_late ? \"Late\" : \"Ontime\";\n                        }\n                    },\n                    actionTableFormat['distance&duration']\n                ]\n            }\n        };\n    },\n    max_duration: function () {\n        return {\n            service: ActionsAnalyticsListService,\n            initialConfig: {\n                title: \"Actions with max duration\",\n                query: { ordering: '-duration' },\n                tableFormat: [\n                    {\n                        label: \"User\",\n                        selector: function (action) {\n                            return action.user ? NameCase(action.user.name) : \"NA\";\n                        }\n                    },\n                    {\n                        label: \"Type\",\n                        selector: function (action) {\n                            return action.type;\n                        }\n                    },\n                    actionTableFormat.duration,\n                    actionTableFormat.distance\n                ]\n            }\n        };\n    },\n    users_on_action: function () {\n        return {\n            service: ActionsAnalyticsListService,\n            initialConfig: {\n                title: \"Recent user on action\",\n                query: { ordering: '-assigned_at' },\n                tags: ['users', 'live'],\n                updateStrategy: 'live',\n                hideDatePicker: true,\n                tableFormat: [\n                    {\n                        label: \"Name\",\n                        selector: function (action) {\n                            return action.user ? action.user.name : \"NA\";\n                        }\n                    },\n                    actionTableFormat.assigned_at,\n                    {\n                        label: \"Last updated at\",\n                        selector: function (action) {\n                            return action.user ? TimeString(action.user.last_heartbeat_at) : \"--\";\n                        }\n                    },\n                    {\n                        label: \"Action type\",\n                        selector: function (action) {\n                            return action.type;\n                        }\n                    },\n                    {\n                        label: \"Expected At\",\n                        selector: function (action) {\n                            return action.expected_at ?\n                                TimeString(action.expected_at) + \" \" + DateString(action.expected_at, 'short') : action.eta ?\n                                TimeString(action.eta) + \" \" + DateString(action.eta, 'short') : \"--\";\n                        }\n                    }\n                ]\n            }\n        };\n    },\n    summary: function (actionsClient, dateRangeService$$1, title, queryLabels) {\n        return {\n            service: ActionsSummaryService,\n            initialConfig: {\n                title: title || \"Actions status summary\",\n                updateStrategy: 'live',\n                tags: ['live'],\n                query: {},\n                queryLabels: queryLabels,\n                dateRangeService: dateRangeService$$1,\n                client: actionsClient\n            }\n        };\n    }\n};\nvar AnalyticsItemsService = /*@__PURE__*/ (function () {\n    function AnalyticsItemsService() {\n        this.chosenItemCreater = [];\n        this.selectedTags$ = new BehaviorSubject([]);\n        var usersClient = usersClientFactory({ dateRange: dateRangeFactory(DateRangeMap.today) });\n        var usersFilter = usersClient.filterClass;\n        var activityQueryLabel = usersFilter.activityQueryArray;\n        var showAllQueryLable = usersFilter.showAllQueryArray;\n        var actionDateRangeService = dateRangeFactory(DateRangeMap.today);\n        var actionsClient = actionsClientFactory({ dateRange: actionDateRangeService });\n        this.presets = [\n            actionsConfigPreset[\"summary\"](actionsClient, actionDateRangeService),\n            usersAnalyticsListPresets[\"users_summary\"](usersClient, 'Users activity summary', __spread(activityQueryLabel, showAllQueryLable)),\n            actionsConfigPreset[\"status\"](),\n            actionsConfigPreset[\"heatmap\"](),\n            usersAnalyticsListPresets[\"stops_heatmap\"](),\n            actionsConfigPreset[\"recently_assigned\"](),\n            actionsConfigPreset[\"recently_completed\"](),\n            usersAnalyticsListPresets[\"last_recorded\"](),\n            usersAnalyticsListPresets[\"users_actions\"](),\n            usersAnalyticsListPresets[\"max_location_disabled_duration\"](),\n            usersAnalyticsListPresets[\"current_location_disabled\"](),\n            usersAnalyticsListPresets[\"max_stop_duration\"](),\n            usersAnalyticsListPresets[\"max_distance\"](),\n        ];\n        this.chosenItemCreater = this.presets;\n    }\n    AnalyticsItemsService.prototype.initPresets = function () {\n        var _this = this;\n        if (!this.items$) {\n            this.items$ = new BehaviorSubject(this.getItems(this.presets));\n            this.allTags$ = this.items$.pipe(map$1(function (items) {\n                _this.totalTags = items.length;\n                return items.reduce(function (tags, item) {\n                    var itemTags = item.tags;\n                    return itemTags.reduce(function (currentTags, tag) {\n                        return currentTags.includes(tag) ? currentTags : __spread(currentTags, [tag]);\n                    }, tags);\n                }, ['users', 'actions']);\n            }));\n            this.filteredItems$ = combineLatest(this.items$, this.selectedTags$, function (items, tags) {\n                return tags.length ? items.filter(function (item) {\n                    return tags.reduce(function (pass, selectedTag) {\n                        return pass && item.tags.includes(selectedTag);\n                    }, true);\n                }) : items;\n            });\n            this.tags$ = combineLatest(this.allTags$, this.selectedTags$, function (allTags, selectedTags) {\n                return allTags.map(function (tag) {\n                    var isActive = selectedTags.includes(tag);\n                    return { key: tag, isActive: isActive };\n                });\n            });\n        }\n    };\n    AnalyticsItemsService.prototype.isItemCreatorActive = function (itemCreator) {\n        return this.chosenItemCreater.includes(itemCreator);\n    };\n    AnalyticsItemsService.prototype.toggleTag = function (tag) {\n        var _this = this;\n        this.selectedTags$.pipe(take(1))\n            .subscribe(function (tags) {\n            if (tags.includes(tag)) {\n                tags.splice(tags.indexOf(tag), 1);\n            }\n            else {\n                tags.push(tag);\n            }\n            _this.selectedTags$.next(__spread(tags));\n        });\n    };\n    AnalyticsItemsService.prototype.selectTag = function (tag) {\n        var _this = this;\n        this.selectedTags$.pipe(take(1))\n            .subscribe(function (tags) {\n            if (tags.includes(tag)) {\n                tags.splice(tags.indexOf(tag), 1);\n            }\n            else {\n                tags = [tag];\n            }\n            _this.selectedTags$.next(__spread(tags));\n        });\n    };\n    AnalyticsItemsService.prototype.setPreset = function (choosenPreset) {\n        this.items$.next(this.getItems(choosenPreset));\n        this.initServices();\n    };\n    AnalyticsItemsService.prototype.getItems = function (itemsConfigs) {\n        return itemsConfigs.map(function (preset) {\n            var service = new preset.service(preset.initialConfig);\n            return service;\n        });\n    };\n    AnalyticsItemsService.prototype.initServices = function () {\n        this.setServicesActive(true);\n    };\n    AnalyticsItemsService.prototype.setServicesActive = function (isActive) {\n        if (isActive === void 0) {\n            isActive = true;\n        }\n        this.items$.pipe(take(1)).subscribe(function (items) {\n            items.forEach(function (item) {\n                item.setActive(isActive);\n            });\n        });\n    };\n    AnalyticsItemsService.prototype.destroy = function () {\n        this.setServicesActive(false);\n    };\n    return AnalyticsItemsService;\n}());\nvar AnalyticsContainerComponent = /*@__PURE__*/ (function () {\n    function AnalyticsContainerComponent(analyticsItemsService) {\n        this.analyticsItemsService = analyticsItemsService;\n        this.configure = false;\n    }\n    AnalyticsContainerComponent.prototype.ngOnInit = function () {\n        this.analyticsItemsService.initPresets();\n        this.analyticsItemsService.initServices();\n    };\n    AnalyticsContainerComponent.prototype.openConfig = function () {\n        this.configure = true;\n    };\n    AnalyticsContainerComponent.prototype.trackByFn = function (index, item) {\n        return item.title;\n    };\n    AnalyticsContainerComponent.prototype.ngOnDestroy = function () {\n        this.analyticsItemsService.destroy();\n    };\n    return AnalyticsContainerComponent;\n}());\nvar AnalyticsSlotDirective = /*@__PURE__*/ (function () {\n    function AnalyticsSlotDirective(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n    }\n    return AnalyticsSlotDirective;\n}());\nvar AnalyticsItemComponent = /*@__PURE__*/ (function () {\n    function AnalyticsItemComponent(componentFactoryResolver) {\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n    AnalyticsItemComponent.prototype.ngOnInit = function () {\n        this.addComponent();\n    };\n    AnalyticsItemComponent.prototype.addComponent = function () {\n        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.item.component);\n        var viewContainerRef = this.slot.viewContainerRef;\n        viewContainerRef.clear();\n        var componentRef = viewContainerRef.createComponent(componentFactory);\n        this.item.setData(componentRef.instance);\n    };\n    return AnalyticsItemComponent;\n}());\nvar AnalyticsSelectorComponent = /*@__PURE__*/ (function () {\n    function AnalyticsSelectorComponent(analyticsItemsService) {\n        this.analyticsItemsService = analyticsItemsService;\n        this.selected = new EventEmitter();\n        this.choosenPreset = [];\n    }\n    AnalyticsSelectorComponent.prototype.ngOnInit = function () {\n        (_a = this.choosenPreset).push.apply(_a, __spread(this.analyticsItemsService.presets));\n        var _a;\n    };\n    AnalyticsSelectorComponent.prototype.isActive = function (preset) {\n        return this.choosenPreset.includes(preset);\n    };\n    AnalyticsSelectorComponent.prototype.togglePreset = function (preset) {\n        if (this.isActive(preset)) {\n            var index = this.choosenPreset.indexOf(preset);\n            this.choosenPreset.splice(index, 1);\n        }\n        else {\n            this.choosenPreset.push(preset);\n        }\n    };\n    AnalyticsSelectorComponent.prototype.setPreset = function () {\n        this.analyticsItemsService.setPreset(this.choosenPreset);\n        this.selected.next(true);\n    };\n    return AnalyticsSelectorComponent;\n}());\nvar AnalyticsTagsComponent = /*@__PURE__*/ (function () {\n    function AnalyticsTagsComponent() {\n        this.remove = new EventEmitter();\n        this.selectTag = new EventEmitter();\n        this.edit = new EventEmitter();\n    }\n    AnalyticsTagsComponent.prototype.ngOnInit = function () {\n    };\n    AnalyticsTagsComponent.prototype.isTagActive = function (tag) {\n        return this.selectedTags.includes(tag);\n    };\n    return AnalyticsTagsComponent;\n}());\nvar AnalyticsTagsModule = /*@__PURE__*/ (function () {\n    function AnalyticsTagsModule() {\n    }\n    return AnalyticsTagsModule;\n}());\nvar ActionTableComponent = /*@__PURE__*/ (function () {\n    function ActionTableComponent() {\n        this.excludedKey = [\n            'type',\n            'lookup_id',\n            'id',\n            'short_code',\n            'vehicle_type',\n            'status',\n            \"created_at\",\n            \"modified_at\",\n            'sub_status',\n            'started_at',\n            'tracking_url'\n        ];\n    }\n    ActionTableComponent.prototype.ngOnInit = function () {\n    };\n    Object.defineProperty(ActionTableComponent.prototype, \"tableData\", {\n        get: function () {\n            return tableFormat(this.action, { excludes: this.excludedKey, format: actionTableFormat });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ActionTableComponent;\n}());\nvar ActionTableModule = /*@__PURE__*/ (function () {\n    function ActionTableModule() {\n    }\n    return ActionTableModule;\n}());\nvar ActionsAnalyticsListModule = /*@__PURE__*/ (function () {\n    function ActionsAnalyticsListModule() {\n    }\n    return ActionsAnalyticsListModule;\n}());\nvar ActionsSummaryChartModule = /*@__PURE__*/ (function () {\n    function ActionsSummaryChartModule() {\n    }\n    return ActionsSummaryChartModule;\n}());\nvar AnalyticsTitleComponent = /*@__PURE__*/ (function () {\n    function AnalyticsTitleComponent() {\n    }\n    AnalyticsTitleComponent.prototype.ngOnInit = function () {\n    };\n    return AnalyticsTitleComponent;\n}());\nvar AnalyticsItemLoadComponent = /*@__PURE__*/ (function () {\n    function AnalyticsItemLoadComponent() {\n        this.noData = false;\n    }\n    Object.defineProperty(AnalyticsItemLoadComponent.prototype, \"_minHeight\", {\n        get: function () {\n            return this.minHeight || 300;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AnalyticsItemLoadComponent.prototype.ngOnInit = function () {\n    };\n    return AnalyticsItemLoadComponent;\n}());\nvar AnalyticsItemLoadModule = /*@__PURE__*/ (function () {\n    function AnalyticsItemLoadModule() {\n    }\n    return AnalyticsItemLoadModule;\n}());\nvar AnalyticsMapContainerModule = /*@__PURE__*/ (function () {\n    function AnalyticsMapContainerModule() {\n    }\n    return AnalyticsMapContainerModule;\n}());\nvar AnalyticsContainerModule = /*@__PURE__*/ (function () {\n    function AnalyticsContainerModule() {\n    }\n    return AnalyticsContainerModule;\n}());\nvar HTPublishableKey = 'pk_fe8200189bbdfd44b078bd462b08cb86174aa97c';\nvar TrackingService = /*@__PURE__*/ (function () {\n    function TrackingService() {\n        this.isMapDirty = false;\n        this.isSliding = false;\n        this.actions$ = new ReplaySubject();\n        this.error$ = new ReplaySubject();\n        this.setTrackApi();\n    }\n    TrackingService.prototype.setTrackApi = function () {\n        var request = htRequestService.getInstance(HTPublishableKey);\n        request.setClientType('hypertrack/trct.at');\n        this.trackApi = new HtTrackingApi(request);\n    };\n    TrackingService.prototype.initShortCode = function (shortCode) {\n        var _this = this;\n        this.trackApi.track(shortCode).pipe(tap(function (data) {\n        }), expand(function (data) {\n            return timer(2000).pipe(concatMap(function (_) {\n                return _this.trackApi.track(shortCode).pipe(catchError(function (err) {\n                    _this.handleOnError(err);\n                    return of(null);\n                }));\n            }));\n        }), filter(function (data) {\n            if (data)\n                _this.handleOnError(null);\n            return !!data;\n        }), tap(function (data) {\n            _this.handleOnUpdate(data);\n        })).subscribe(this.actions$);\n    };\n    TrackingService.prototype.handleOnReady = function (actions) {\n        console.log('On Actions ready', actions);\n    };\n    TrackingService.prototype.handleOnUpdate = function (actions) {\n    };\n    TrackingService.prototype.handleOnError = function (err) {\n        this.error$.next(err);\n    };\n    TrackingService.prototype.handleDeepLinkRedirect = function (subAccount, action) {\n    };\n    return TrackingService;\n}());\nvar TrackingMapService = /*@__PURE__*/ (function () {\n    function TrackingMapService(mapService) {\n        this.mapService = mapService;\n        this.dirty$ = new BehaviorSubject(false);\n        this.actionCompleted = false;\n        this.defaultSetBoundsOptions = {\n            paddingTopLeft: [15, 15],\n            paddingBottomRight: [15, 70],\n            duration: 2,\n            animate: true,\n            easeLinearity: 0.2,\n        };\n        this.setBoundsOptions = this.defaultSetBoundsOptions;\n        this.mapInstance = this.mapService.mapInstance;\n    }\n    TrackingMapService.prototype.resetCleanMap = function (action) {\n        var _this = this;\n        if (!this.dirty$.getValue()) {\n            this.mapService.resetBounds();\n        }\n        if (!this.checkDirtySub) {\n            this.checkDirtySub = this.mapInstance.onEvent$('click mousedown dragstart')\n                .subscribe(function (data) {\n                _this.dirty$.next(true);\n            });\n        }\n    };\n    TrackingMapService.prototype.setData$ = function (actionsData$) {\n        var mapInstance = this.mapService.mapInstance;\n        if (!this.actionsTrace)\n            this.actionsTrace = new ActionTrace(mapInstance, { hasPulse: true });\n        this.setStyle();\n        this.actionsTrace.setData$(actionsData$);\n    };\n    TrackingMapService.prototype.resetMap = function () {\n        if (!this.actionCompleted)\n            this.dirty$.next(false);\n    };\n    TrackingMapService.prototype.onComplete = function (action) {\n        this.actionsTrace.polyline.toIncludeInBounds = true;\n        this.actionsTrace.start.toIncludeInBounds = true;\n        this.setBoundsOptions = Object.assign({}, this.setBoundsOptions, { paddingBottomRight: [15, 120] });\n        this.mapService.resetBounds(this.setBoundsOptions);\n        this.dirty$.next(true);\n        this.actionCompleted = true;\n    };\n    TrackingMapService.prototype.setStyle = function () {\n        var _this = this;\n        var destinationStyle = {\n            radius: 20,\n            innerRadius: 12,\n            liveColor: \"#250D47\",\n            summaryColor: \"#250D47\"\n        };\n        var polylineStyle = {\n            color: '#9013FE',\n            weight: 3,\n        };\n        var userStyle = {\n            radius: 24,\n            color: '#9013FE',\n            markerSize: 17,\n        };\n        var destination = this.actionsTrace.destination;\n        var polyline = this.actionsTrace.polyline;\n        var start = this.actionsTrace.start;\n        var user = this.actionsTrace.user;\n        var pulse = this.actionsTrace.pulse;\n        polyline.toIncludeInBounds = false;\n        start.toIncludeInBounds = false;\n        user.styleObj = {\n            default: {\n                zIndexOffset: 12,\n                iconSize: [userStyle.radius, userStyle.radius],\n                className: \"user-marker\"\n            }\n        };\n        pulse.styleObj = {\n            default: {\n                zIndexOffset: 10,\n                iconSize: [userStyle.radius, userStyle.radius],\n                className: \"user-marker\"\n            }\n        };\n        destination.styleObj = {\n            default: {\n                zIndexOffset: 10,\n                iconSize: [destinationStyle.radius, destinationStyle.radius],\n                className: \"destination-marker\"\n            }\n        };\n        polyline.toIncludeInBounds = false;\n        polyline.styleObj = {\n            default: {\n                fillColor: polylineStyle.color,\n                color: polylineStyle.color,\n                weight: polylineStyle.weight\n            },\n            popup: {\n                offset: [0, -5],\n                closeButton: false\n            }\n        };\n        pulse.getDivContent = function (data) {\n            var pulse = data.user.availability_status == 'online' ? 'pulse' : '';\n            var content = \"\\n    <div class=\\\"box-\" + userStyle.radius + \"\\\" style=\\\"background: \" + userStyle.color + \"\\\">\\n  <div class=\\\"box-\" + userStyle.radius + \" \" + pulse + \"\\\" style=\\\"background: \" + userStyle.color + \"; margin: auto\\\">\\n</div>\\n</div>\\n    \";\n            return content;\n        };\n        user.getDivContent = function (data, bearing) {\n            var iconDiv = _this.getUserIconDiv(data, bearing, userStyle.markerSize);\n            return \"<div class=\\\"box-\" + userStyle.radius + \"\\\" style=\\\"position: absolute\\\">\\n    \" + iconDiv + \"\\n</div>\";\n        };\n        destination.getDivContent = function (action) {\n            if (action.display.show_summary) {\n                return \"<div class=\\\"box-\" + destinationStyle.radius + \"\\\" style=\\\"background: \" + destinationStyle.liveColor + \"\\\">\\n<!--<div class=\\\"icon\\\" style=\\\"font-size: 1.5rem; color: white; margin: auto\\\">-->\\n        <!--<i class=\\\"ion-checkmark\\\"></i>-->\\n      <!--</div>-->\\n</div>\";\n            }\n            else {\n                return \"<div class=\\\"box-\" + destinationStyle.radius + \" is-bordered\\\" style=\\\"display: flex; border-color: #\" + destinationStyle.summaryColor + \"\\\">\\n    <div class=\\\"box-\" + destinationStyle.innerRadius + \"\\\" style=\\\"background: \" + destinationStyle.summaryColor + \"; margin: auto\\\"></div>\\n</div>\";\n            }\n        };\n    };\n    TrackingMapService.prototype.getUserIconDiv = function (action, bearing, size) {\n        return \"<i class=\\\"ion-android-navigate\\\" style=\\\"margin: auto;\\n    color: white;\\n    font-size: \" + size + \"px;\\n    transition: transform 0.4s;\\n    transform: rotate(\" + bearing + \"deg)\\\"></i>\";\n    };\n    return TrackingMapService;\n}());\nvar TrackingComponent = /*@__PURE__*/ (function () {\n    function TrackingComponent(trackinService, mapService, trackingMapService) {\n        this.trackinService = trackinService;\n        this.mapService = mapService;\n        this.trackingMapService = trackingMapService;\n        this.init = false;\n        this.loading = true;\n    }\n    TrackingComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.trackinService.initShortCode(this.shortCode);\n        this.actionsData$ = this.trackinService.actions$.asObservable();\n        this.init = true;\n        this.trackingMapService.setData$(this.actionsData$);\n        this.popups$ = this.actionsData$.pipe(map$1(function (data) {\n            var entities = _this.trackingMapService.actionsTrace.destination.entities;\n            var keys = Object.keys(entities);\n            var mapUtils = _this.trackingMapService.actionsTrace.mapInstance.mapUtils;\n            return keys.reduce(function (acc, key) {\n                var entity = entities[key];\n                var elem = mapUtils.getElement(entity.item);\n                return elem ? __spread(acc, [{ data: entity.data, elem: elem, id: key }]) : acc;\n            }, []);\n        }));\n        this.userPopup$ = this.actionsData$.pipe(debounceTime(100), map$1(function (data) {\n            var entities = _this.trackingMapService.actionsTrace.user.entities;\n            var keys = Object.keys(entities);\n            var mapUtils = _this.trackingMapService.mapInstance.mapUtils;\n            return keys.reduce(function (acc, key) {\n                var entity = entities[key];\n                var elem = mapUtils.getElement(entity.item);\n                var onUpdate = _this.trackingMapService.actionsTrace.user.onEntityUpdate(key);\n                return elem ? __spread(acc, [{ data: entity.data, elem: elem, id: key, onUpdate: onUpdate }]) : acc;\n            }, []);\n        }));\n        var completedAction$ = this.actionsData$.pipe(filter(function (data) {\n            return !!data && data.length && data[0].display.show_summary;\n        }), take(1));\n        this.actionsData$.pipe(filter(function (data) { return !!data && data.length && !data[0].display.show_summary; }), takeUntil(completedAction$)).subscribe(function (action) {\n            _this.loading = false;\n            _this.trackingMapService.resetCleanMap(action);\n        });\n        completedAction$.subscribe(function (action) {\n            _this.loading = false;\n            _this.trackingMapService.onComplete(action);\n        });\n        this.startPopup$ = completedAction$.pipe(map$1(function (data) {\n            var entities = _this.trackingMapService.actionsTrace.start.entities;\n            var keys = Object.keys(entities);\n            var mapUtils = _this.trackingMapService.actionsTrace.mapInstance.mapUtils;\n            return keys.reduce(function (acc, key) {\n                var entity = entities[key];\n                var elem = mapUtils.getElement(entity.item);\n                return elem ? __spread(acc, [{ data: entity.data, elem: elem, id: key }]) : acc;\n            }, []);\n        }));\n    };\n    TrackingComponent.prototype.ngAfterContentInit = function () {\n    };\n    TrackingComponent.prototype.trackId = function (a, b) {\n        return b.id;\n    };\n    return TrackingComponent;\n}());\nvar ActionSummaryComponent = /*@__PURE__*/ (function () {\n    function ActionSummaryComponent() {\n        this.test = \"str\";\n    }\n    ActionSummaryComponent.prototype.ngOnInit = function () {\n    };\n    return ActionSummaryComponent;\n}());\nvar ActionSummaryModule = /*@__PURE__*/ (function () {\n    function ActionSummaryModule() {\n    }\n    return ActionSummaryModule;\n}());\nvar DestinationPopupComponent = /*@__PURE__*/ (function () {\n    function DestinationPopupComponent() {\n    }\n    DestinationPopupComponent.prototype.ngOnInit = function () {\n    };\n    DestinationPopupComponent.prototype.getDestinationName = function (action) {\n        var place = action.completed_place || action.expected_place;\n        if (place) {\n            return place.name;\n        }\n        else {\n            return \"\";\n        }\n    };\n    return DestinationPopupComponent;\n}());\nvar DestinationPopupModule = /*@__PURE__*/ (function () {\n    function DestinationPopupModule() {\n    }\n    return DestinationPopupModule;\n}());\nvar UserPopupComponent = /*@__PURE__*/ (function () {\n    function UserPopupComponent() {\n        this.opened = false;\n    }\n    UserPopupComponent.prototype.ngOnInit = function () {\n    };\n    UserPopupComponent.prototype.openCard = function () {\n        this.opened = !this.opened;\n    };\n    return UserPopupComponent;\n}());\nvar UserPopupModule = /*@__PURE__*/ (function () {\n    function UserPopupModule() {\n    }\n    return UserPopupModule;\n}());\nvar ActionStatusComponent = /*@__PURE__*/ (function () {\n    function ActionStatusComponent() {\n    }\n    ActionStatusComponent.prototype.ngOnInit = function () {\n    };\n    return ActionStatusComponent;\n}());\nvar ActionStatusModule = /*@__PURE__*/ (function () {\n    function ActionStatusModule() {\n    }\n    return ActionStatusModule;\n}());\nvar StartPopupComponent = /*@__PURE__*/ (function () {\n    function StartPopupComponent() {\n    }\n    StartPopupComponent.prototype.ngOnInit = function () {\n    };\n    StartPopupComponent.prototype.getStartName = function (action) {\n        var place = action.started_place;\n        if (place) {\n            return place.name;\n        }\n        else {\n            return \"\";\n        }\n    };\n    return StartPopupComponent;\n}());\nvar StartPopupModule = /*@__PURE__*/ (function () {\n    function StartPopupModule() {\n    }\n    return StartPopupModule;\n}());\nvar TrackingMapComponent = /*@__PURE__*/ (function () {\n    function TrackingMapComponent(mapService, trackingMapService) {\n        this.mapService = mapService;\n        this.trackingMapService = trackingMapService;\n        this.showSummary = false;\n        this.mapInstance = this.mapService.mapInstance;\n    }\n    Object.defineProperty(TrackingMapComponent.prototype, \"dirty$\", {\n        get: function () {\n            return this.trackingMapService.dirty$;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TrackingMapComponent.prototype, \"setBoundsOptions\", {\n        get: function () {\n            var options = this.showSummary ? Object.assign({}, this.trackingMapService.defaultSetBoundsOptions, { paddingBottomRight: [15, 120] }) : Object.assign({}, this.trackingMapService.defaultSetBoundsOptions);\n            return options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TrackingMapComponent.prototype.ngOnInit = function () {\n        this.mapInstance.setBoundsOptions = this.setBoundsOptions;\n    };\n    return TrackingMapComponent;\n}());\nvar TrackingMapModule = /*@__PURE__*/ (function () {\n    function TrackingMapModule() {\n    }\n    return TrackingMapModule;\n}());\nvar Triggers = /*@__PURE__*/ (function () { function Triggers() {\n} Triggers.CLICK = 'click'; Triggers.HOVER = 'hover'; Triggers.MOUSEDOWN = 'mousedown'; Triggers.NONE = 'none'; return Triggers; }());\nvar Placements = /*@__PURE__*/ (function () { function Placements() {\n} Placements.Top = 'top'; Placements.Bottom = 'bottom'; Placements.Left = 'left'; Placements.Right = 'right'; Placements.TopStart = 'top-start'; Placements.BottomStart = 'bottom-start'; Placements.LeftStart = 'left-start'; Placements.RightStart = 'right-start'; Placements.TopEnd = 'top-end'; Placements.BottomEnd = 'bottom-end'; Placements.LeftEnd = 'left-end'; Placements.RightEnd = 'right-end'; Placements.Auto = 'auto'; Placements.AutoTop = 'auto-top'; Placements.AutoBottom = 'auto-bottom'; Placements.AutoLeft = 'auto-left'; Placements.AutoRight = 'auto-right'; return Placements; }());\nvar PopperService = /*@__PURE__*/ (function () {\n    function PopperService() {\n        this.poppers = [];\n    }\n    PopperService.prototype.addPopper = function (popper) {\n        var didMatch = false;\n        this.poppers = this.poppers.map(function (currentPopper) {\n            if (popper.instance == currentPopper.instance) {\n                didMatch = true;\n                return popper;\n            }\n            else {\n                return currentPopper;\n            }\n        });\n        if (!didMatch) {\n            this.poppers.push(popper);\n        }\n    };\n    PopperService.prototype.checkCollision = function (data) {\n        var otherPoppers = this.getOtherPoppers(data);\n        return this.detctCollisions(data, otherPoppers);\n    };\n    PopperService.prototype.getOtherPoppers = function (data) {\n        return this.poppers.reduce(function (rest, p) {\n            return p.instance == data.instance ? rest : __spread(rest, [p]);\n        }, []);\n    };\n    PopperService.prototype.detctCollisions = function (data, otherPoppers) {\n        var _this = this;\n        var detected = otherPoppers.reduce(function (acc, data1) {\n            var col = _this.detctCollision(data, data1);\n            return col ? __spread(acc, [data1]) : acc;\n        }, []);\n        return detected.length ? detected : false;\n    };\n    PopperService.prototype.detctCollision = function (data1, data2) {\n        var d1_offset = data1.popper;\n        var d1_height = data1.popper.height;\n        var d1_width = data1.popper.width;\n        var d1_distance_from_top = d1_offset.top + d1_height;\n        var d1_distance_from_left = d1_offset.left + d1_width;\n        var d2_offset = data2.popper;\n        var d2_height = data2.popper.height;\n        var d2_width = data2.popper.width;\n        var d2_distance_from_top = d2_offset.top + d2_height;\n        var d2_distance_from_left = d2_offset.left + d2_width;\n        var not_colliding = (d1_distance_from_top < d2_offset.top || d1_offset.top > d2_distance_from_top || d1_distance_from_left < d2_offset.left || d1_offset.left > d2_distance_from_left);\n        return !not_colliding;\n    };\n    return PopperService;\n}());\nvar PopperContent = /*@__PURE__*/ (function () {\n    function PopperContent(renderer, popperService) {\n        this.renderer = renderer;\n        this.popperService = popperService;\n        this.popperOptions = ({\n            disableAnimation: false,\n            disableDefaultStyling: false,\n            placement: Placements.AutoTop,\n            boundariesElement: '',\n            trigger: Triggers.HOVER,\n            positionFixed: false,\n            popperModifiers: {}\n        });\n        this.isMouseOver = false;\n        this.onHidden = new EventEmitter();\n        this.displayType = \"none\";\n        this.opacity = 0;\n    }\n    PopperContent.prototype.onMouseOver = function () {\n        this.isMouseOver = true;\n    };\n    PopperContent.prototype.showOnLeave = function () {\n        this.isMouseOver = false;\n        if (this.popperOptions.trigger !== Triggers.HOVER) {\n            return;\n        }\n        this.hide();\n    };\n    PopperContent.prototype.onDocumentResize = function () {\n        this.update();\n    };\n    PopperContent.prototype.ngOnInit = function () {\n        this.show();\n    };\n    PopperContent.prototype.ngOnDestroy = function () {\n        if (!this.popperInstance) {\n            return;\n        }\n        ((this.popperInstance)).disableEventListeners();\n        this.popperInstance.destroy();\n    };\n    PopperContent.prototype.col = function (data) {\n        var collision = this.popperService.checkCollision(data);\n        if (collision) {\n            data = Object.assign({}, data, { placement: this.clockwise(data.placement) });\n        }\n        this.popperService.addPopper(data);\n        return data;\n    };\n    PopperContent.prototype.clockwise = function (placement) {\n        var placements = [\n            'auto-start',\n            'auto',\n            'auto-end',\n            'top-start',\n            'top',\n            'top-end',\n            'right-start',\n            'right',\n            'right-end',\n            'bottom-end',\n            'bottom',\n            'bottom-start',\n            'left-end',\n            'left',\n            'left-start',\n        ];\n        var validPlacements = placements.slice(3);\n        var index = validPlacements.indexOf(placement);\n        var arr = validPlacements\n            .slice(index + 1)\n            .concat(validPlacements.slice(0, index));\n        return arr.reverse()[1];\n    };\n    PopperContent.prototype.show = function () {\n        var _this = this;\n        if (!this.referenceObject) {\n            return;\n        }\n        var popperOptions = ({\n            placement: this.popperOptions.placement,\n            positionFixed: this.popperOptions.positionFixed,\n            modifiers: {\n                preventOverflow: {\n                    escapeWithReference: true,\n                },\n                offset: {\n                    offset: '0px, 8px'\n                },\n                flipCol: {\n                    enabled: true,\n                    order: 504,\n                    fn: function (data) {\n                        return _this.col(data);\n                    }\n                },\n            }\n        });\n        var boundariesElement = this.popperOptions.boundariesElement && document.querySelector(this.popperOptions.boundariesElement);\n        if (popperOptions.modifiers && boundariesElement) {\n            popperOptions.modifiers.preventOverflow = { boundariesElement: boundariesElement };\n        }\n        popperOptions.modifiers = Object.assign(popperOptions.modifiers, this.popperOptions.popperModifiers);\n        this.popperInstance = new Popper(this.referenceObject, this.popperViewRef.nativeElement, popperOptions);\n        ((this.popperInstance)).enableEventListeners();\n        this.scheduleUpdate();\n        this.toggleVisibility(true);\n        this.globalResize = this.renderer.listen('document', 'resize', this.onDocumentResize.bind(this));\n    };\n    PopperContent.prototype.update = function () {\n        this.popperInstance && ((this.popperInstance)).update();\n    };\n    PopperContent.prototype.scheduleUpdate = function () {\n        this.popperInstance && ((this.popperInstance)).scheduleUpdate();\n    };\n    PopperContent.prototype.hide = function () {\n    };\n    PopperContent.prototype.toggleVisibility = function (state$$1) {\n        if (!state$$1) {\n            this.opacity = 0;\n        }\n        else {\n            this.opacity = 1;\n            this.displayType = \"block\";\n        }\n    };\n    PopperContent.prototype.clearGlobalResize = function () {\n        this.globalResize && typeof this.globalResize === 'function' && this.globalResize();\n    };\n    return PopperContent;\n}());\nvar InfoboxComponent = /*@__PURE__*/ (function () {\n    function InfoboxComponent(mapService) {\n        this.mapService = mapService;\n    }\n    InfoboxComponent.prototype.ngOnInit = function () {\n    };\n    InfoboxComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var mapUtils = this.mapService.mapInstance.mapUtils;\n        var map$$1 = this.mapService.mapInstance.map;\n        mapUtils.onEvent(map$$1, 'move', function () {\n            _this.popper.scheduleUpdate();\n        });\n        if (this.item.onUpdate)\n            this.item.onUpdate.subscribe(function (entity) {\n                _this.popper.scheduleUpdate();\n            });\n    };\n    InfoboxComponent.prototype.onClick = function (e) {\n        this.popper.scheduleUpdate();\n    };\n    return InfoboxComponent;\n}());\nvar PopperController = /*@__PURE__*/ (function () {\n    function PopperController(viewContainerRef, changeDetectorRef, resolver, renderer, popperDefaults) {\n        if (popperDefaults === void 0) {\n            popperDefaults = {};\n        }\n        this.viewContainerRef = viewContainerRef;\n        this.changeDetectorRef = changeDetectorRef;\n        this.resolver = resolver;\n        this.renderer = renderer;\n        this.popperDefaults = popperDefaults;\n        this.popperContentClass = PopperContent;\n        this.shown = false;\n        this.subscriptions = [];\n        this.showDelay = 0;\n        this.hideTimeout = 0;\n        this.timeoutAfterShow = 0;\n        this.popperOnShown = new EventEmitter();\n        this.popperOnHidden = new EventEmitter();\n        PopperController.baseOptions = Object.assign({}, PopperController.baseOptions, this.popperDefaults);\n    }\n    PopperController.prototype.showOrHideOnClick = function () {\n        if (this.disabled || this.showTrigger !== Triggers.CLICK) {\n            return;\n        }\n        this.toggle();\n    };\n    PopperController.prototype.showOrHideOnMouseOver = function () {\n        if (this.disabled || this.showTrigger !== Triggers.MOUSEDOWN) {\n            return;\n        }\n        this.toggle();\n    };\n    PopperController.prototype.showOnHover = function () {\n        if (this.disabled || this.showTrigger !== Triggers.HOVER) {\n            return;\n        }\n        this.scheduledShow();\n    };\n    PopperController.prototype.hideOnClickOutsideHandler = function ($event) {\n        if (this.disabled || !this.hideOnClickOutside) {\n            return;\n        }\n        this.scheduledHide($event, this.hideTimeout);\n    };\n    PopperController.prototype.hideOnScrollHandler = function ($event) {\n        if (this.disabled || !this.hideOnScroll) {\n            return;\n        }\n        this.scheduledHide($event, this.hideTimeout);\n    };\n    PopperController.prototype.hideOnLeave = function () {\n        if (this.disabled || this.showTrigger !== Triggers.HOVER) {\n            return;\n        }\n        this.scheduledHide(null, this.hideTimeout);\n    };\n    PopperController.assignDefined = function (target) {\n        var sources = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            sources[_i - 1] = arguments[_i];\n        }\n        try {\n            for (var sources_1 = __values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {\n                var source = sources_1_1.value;\n                try {\n                    for (var _a = __values(Object.keys(source)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                        var key = _b.value;\n                        var val = source[key];\n                        if (val !== undefined) {\n                            target[key] = val;\n                        }\n                    }\n                }\n                catch (e_1_1) {\n                    e_1 = { error: e_1_1 };\n                }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return))\n                            _c.call(_a);\n                    }\n                    finally {\n                        if (e_1)\n                            throw e_1.error;\n                    }\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (sources_1_1 && !sources_1_1.done && (_d = sources_1.return))\n                    _d.call(sources_1);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return target;\n        var e_2, _d, e_1, _c;\n    };\n    PopperController.prototype.ngOnInit = function () {\n        this.hideOnClickOutside = typeof this.hideOnClickOutside === 'undefined' ?\n            this.closeOnClickOutside : this.hideOnClickOutside;\n        if (typeof this.content === 'string') {\n            var text = this.content;\n            this.content = this.constructContent();\n            this.content.text = text;\n        }\n        var popperRef = (this.content);\n        popperRef.referenceObject = this.getRefElement();\n        this.setContentProperties(popperRef);\n        this.setDefaults();\n        if (this.showOnStart) {\n            this.scheduledShow();\n        }\n    };\n    PopperController.prototype.ngOnChanges = function (changes) {\n        if (changes['popperDisabled']) {\n            if (changes['popperDisabled'].currentValue) {\n                this.hide();\n            }\n        }\n    };\n    PopperController.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe && sub.unsubscribe(); });\n        this.subscriptions.length = 0;\n        this.clearEventListeners();\n    };\n    PopperController.prototype.toggle = function () {\n        this.shown ? this.scheduledHide(null, this.hideTimeout) : this.scheduledShow();\n    };\n    PopperController.prototype.show = function () {\n        if (this.shown) {\n            this.overrideHideTimeout();\n            return;\n        }\n        this.shown = true;\n        var popperRef = (this.content);\n        var element = this.getRefElement();\n        if (popperRef.referenceObject !== element) {\n            popperRef.referenceObject = element;\n        }\n        this.setContentProperties(popperRef);\n        popperRef.show();\n        this.popperOnShown.emit(this);\n        if (this.timeoutAfterShow > 0) {\n            this.scheduledHide(null, this.timeoutAfterShow);\n        }\n        this.globalClick = this.renderer.listen('document', 'click', this.hideOnClickOutsideHandler.bind(this));\n        this.globalScroll = this.renderer.listen(this.getScrollParent(this.getRefElement()), 'scroll', this.hideOnScrollHandler.bind(this));\n    };\n    PopperController.prototype.hide = function () {\n        if (!this.shown) {\n            this.overrideShowTimeout();\n            return;\n        }\n        this.shown = false;\n        if (this.popperContentRef) {\n            this.popperContentRef.instance.hide();\n        }\n        else {\n            ((this.content)).hide();\n        }\n        this.popperOnHidden.emit(this);\n        this.clearEventListeners();\n    };\n    PopperController.prototype.scheduledShow = function (delay) {\n        var _this = this;\n        if (delay === void 0) {\n            delay = this.showDelay;\n        }\n        this.overrideHideTimeout();\n        this.scheduledShowTimeout = setTimeout(function () {\n            _this.show();\n            _this.applyChanges();\n        }, delay);\n    };\n    PopperController.prototype.scheduledHide = function ($event, delay) {\n        var _this = this;\n        if ($event === void 0) {\n            $event = null;\n        }\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.overrideShowTimeout();\n        this.scheduledHideTimeout = setTimeout(function () {\n            var toElement = $event ? $event.toElement : null;\n            var popperContentView = ((_this.content)).popperViewRef ? ((_this.content)).popperViewRef.nativeElement : false;\n            if (!popperContentView || popperContentView === toElement || popperContentView.contains(toElement) || ((_this.content)).isMouseOver) {\n                return;\n            }\n            _this.hide();\n            _this.applyChanges();\n        }, delay);\n    };\n    PopperController.prototype.getRefElement = function () {\n        return this.targetElement || this.viewContainerRef.element.nativeElement;\n    };\n    PopperController.prototype.applyChanges = function () {\n        this.changeDetectorRef.markForCheck();\n        if (this.forceDetection) {\n            this.changeDetectorRef.detectChanges();\n        }\n    };\n    PopperController.prototype.setDefaults = function () {\n        this.showTrigger = typeof this.showTrigger === 'undefined' ? PopperController.baseOptions.trigger : this.showTrigger;\n        this.hideOnClickOutside = typeof this.hideOnClickOutside === 'undefined' ? PopperController.baseOptions.hideOnClickOutside : this.hideOnClickOutside;\n        this.hideOnScroll = typeof this.hideOnScroll === 'undefined' ? PopperController.baseOptions.hideOnScroll : this.hideOnScroll;\n    };\n    PopperController.prototype.clearEventListeners = function () {\n        this.globalClick && typeof this.globalClick === 'function' && this.globalClick();\n        this.globalScroll && typeof this.globalScroll === 'function' && this.globalScroll();\n    };\n    PopperController.prototype.overrideShowTimeout = function () {\n        if (this.scheduledShowTimeout) {\n            clearTimeout(this.scheduledShowTimeout);\n            this.scheduledHideTimeout = 0;\n        }\n    };\n    PopperController.prototype.overrideHideTimeout = function () {\n        if (this.scheduledHideTimeout) {\n            clearTimeout(this.scheduledHideTimeout);\n            this.scheduledHideTimeout = 0;\n        }\n    };\n    PopperController.prototype.constructContent = function () {\n        var factory = this.resolver.resolveComponentFactory(this.popperContentClass);\n        this.popperContentRef = this.viewContainerRef.createComponent(factory);\n        return (this.popperContentRef.instance);\n    };\n    PopperController.prototype.setContentProperties = function (popperRef) {\n        popperRef.popperOptions = PopperController.assignDefined(popperRef.popperOptions, PopperController.baseOptions, {\n            disableAnimation: this.disableAnimation,\n            disableDefaultStyling: this.disableStyle,\n            placement: this.placement,\n            boundariesElement: this.boundariesElement,\n            trigger: this.showTrigger,\n            positionFixed: this.positionFixed,\n            popperModifiers: this.popperModifiers,\n        });\n        this.subscriptions.push(popperRef.onHidden.subscribe(this.hide.bind(this)));\n    };\n    PopperController.prototype.getScrollParent = function (node) {\n        var isElement = node instanceof HTMLElement;\n        var overflowY = isElement && window.getComputedStyle(node).overflowY;\n        var isScrollable = overflowY !== 'visible' && overflowY !== 'hidden';\n        if (!node) {\n            return null;\n        }\n        else if (isScrollable && node.scrollHeight >= node.clientHeight) {\n            return node;\n        }\n        return this.getScrollParent(node.parentNode) || document;\n    };\n    PopperController.baseOptions = ({\n        placement: Placements.AutoTop,\n        hideOnClickOutside: true,\n        hideOnScroll: false,\n        showTrigger: Triggers.HOVER\n    });\n    return PopperController;\n}());\nvar ɵ0 = {};\nvar PopperModule = /*@__PURE__*/ (function () {\n    function PopperModule() {\n    }\n    PopperModule.prototype.ngDoBootstrap = function () {\n    };\n    PopperModule.forRoot = function (popperBaseOptions) {\n        if (popperBaseOptions === void 0) {\n            popperBaseOptions = {};\n        }\n        return { ngModule: PopperModule, providers: [{ provide: 'popperDefaults', useValue: popperBaseOptions }] };\n    };\n    return PopperModule;\n}());\nvar InfoboxModule = /*@__PURE__*/ (function () {\n    function InfoboxModule() {\n    }\n    return InfoboxModule;\n}());\nvar TrackingModule = /*@__PURE__*/ (function () {\n    function TrackingModule() {\n    }\n    return TrackingModule;\n}());\nexport { HtClientService, HtUsersService, HtMapService, HtGroupsService, HtAccountService, HtActionsService, UsersSummaryContainerModule, UsersSummaryContainerComponent, UserCardModule, UserCardComponent, UsersComponent, UsersModule, UsersContainerModule, UsersContainerComponent, UsersMapContainerModule, UsersMapContainerComponent, UsersSummaryChartComponent, UsersSummaryChartModule, UsersAnalyticsListModule, UsersAnalyticsListComponent, UsersListContainerModule, GroupsModule, GroupsComponent, GroupsContainerModule, GroupsContainerComponent, GroupsChartContainerModule, GroupsChartContainerComponent, MapModule, MapContainerModule, MapContainerComponent, SharedModule, PaginationModule, PaginationComponent, PlacelineContainerModule, PlacelineContainerComponent, PlacelineModule, PlacelineComponent, PlacelineMapContainerModule, PlacelineMapContainerComponent, ActionsStatusGraphModule, ActionsStatusGraphComponent, UserTableModule, UserTableComponent, AnalyticsContainerModule, AnalyticsContainerComponent, DateRangeModule, DateRangePickerModule, DateRangePickerComponent, DateRangeComponent, TrackingModule, TOKEN, MAP_KEY, BASE_URL, requestServiceFactory, clientServiceFactory, mapServiceFactory, userClientServiceFactory, actionClientServiceFactory, groupClientServiceFactory, accountUsersClientServiceFactory, HtModule, ActionStatusComponent as ɵci, ActionStatusModule as ɵch, ActionSummaryComponent as ɵcc, ActionSummaryModule as ɵcb, ActionTableComponent as ɵbl, ActionTableModule as ɵbk, ActionsAnalyticsListComponent as ɵbm, ActionsAnalyticsListModule as ɵbj, ActionsSummaryChartComponent as ɵbo, ActionsSummaryChartModule as ɵbn, AnalyticsItemLoadComponent as ɵbq, AnalyticsItemLoadModule as ɵbp, AnalyticsItemComponent as ɵbv, AnalyticsSlotDirective as ɵbu, AnalyticsItemsService as ɵbt, AnalyticsSelectorComponent as ɵbw, AnalyticsTagsComponent as ɵbi, AnalyticsTagsModule as ɵbh, AnalyticsTitleComponent as ɵbx, AnalyticsMapContainerComponent as ɵbs, AnalyticsMapContainerModule as ɵbr, DataTableComponent as ɵbe, DataTableModule as ɵbd, DestinationPopupComponent as ɵce, DestinationPopupModule as ɵcd, EntitySearchComponent as ɵbb, EntitySearchModule as ɵba, UsersFilterComponent as ɵbc, UsersFilterModule as ɵz, GroupsChartService as ɵbg, MAP_TYPE as ɵa, HtRequestService as ɵb, InfoboxComponent as ɵcr, InfoboxModule as ɵcl, MapComponent as ɵy, ActionSortingStringPipe as ɵs, ActionStatusStringPipe as ɵp, DateHumanizePipe as ɵl, DateStringPipe as ɵf, DistanceLocalePipe as ɵm, DotPipe as ɵh, HmStringPipe as ɵn, NameCasePipe as ɵi, PluralizePipe as ɵt, SafeUrlPipe as ɵq, TimeStringPipe as ɵg, UserSortingStringPipe as ɵr, UsersStatusStringPipe as ɵo, PopperContent as ɵcp, PopperController as ɵcn, PopperModule as ɵcm, PopperService as ɵcq, BatteryIconComponent as ɵe, ButtonComponent as ɵu, DropdownDirective as ɵw, LoadingBarComponent as ɵv, LoadingDataComponent as ɵk, LoadingDotsComponent as ɵj, ProfileComponent as ɵd, StartPopupComponent as ɵck, StartPopupModule as ɵcj, TrackingMapComponent as ɵbz, TrackingMapModule as ɵby, TrackingMapService as ɵca, TrackingComponent as ɵcs, TrackingService as ɵct, UserPopupComponent as ɵcg, UserPopupModule as ɵcf, UsersListContainerComponent as ɵbf, UsersSummaryComponent as ɵx, UsersSummaryModule as ɵc };\n//# sourceMappingURL=ht-angular.js.map\n",null]}