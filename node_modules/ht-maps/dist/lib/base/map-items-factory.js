"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var single_item_1 = require("../mixins/single-item");
var popup_renderer_1 = require("../mixins/popup-renderer");
var div_markers_renderes_1 = require("../mixins/div-markers-renderes");
var circle_renderer_1 = require("../mixins/circle-renderer");
var marker_renderer_1 = require("../mixins/marker-renderer");
var trace_1 = require("../mixins/trace");
var data_observable_1 = require("../mixins/data-observable");
var polyline_renderer_1 = require("../mixins/polyline-renderer");
var clusters_1 = require("../mixins/clusters");
var styles_1 = require("../mixins/styles");
var markers_factory_1 = require("./markers.factory");
var polylines_factory_1 = require("./polylines.factory");
var div_markers_factory_1 = require("./div-markers.factory");
var extend_bounds_1 = require("../mixins/extend-bounds");
exports.mapItemsFactory = function (baseClass, config) {
    var defaultConfig = {
        isCluster: false,
        hasPopup: false,
        isPolyline: false,
        isDiv: false,
        isSingleItem: false,
        isCircle: false,
        hasDataObservable: false
    };
    var finalConfig = __assign({}, defaultConfig, config);
    var mixins = [];
    var itemClass = baseClass;
    itemClass = marker_renderer_1.MarkersMixin(itemClass);
    itemClass = styles_1.StyleMixin(itemClass);
    itemClass = trace_1.TraceMixin(itemClass);
    itemClass = extend_bounds_1.ExtendBoundsMixin(itemClass);
    if (finalConfig.isSingleItem)
        itemClass = single_item_1.SingleItemMixin(itemClass);
    if (finalConfig.hasPopup)
        itemClass = popup_renderer_1.PopupMixin(itemClass);
    if (finalConfig.isCluster)
        itemClass = clusters_1.ClusterMixin(itemClass);
    if (finalConfig.isDiv)
        itemClass = div_markers_renderes_1.DivMarkersMixin(itemClass);
    if (finalConfig.isCircle)
        itemClass = circle_renderer_1.CircleMixin(itemClass);
    if (finalConfig.isPolyline)
        itemClass = polyline_renderer_1.PolylinesMixin(itemClass);
    if (finalConfig.hasDataObservable)
        itemClass = data_observable_1.DataObservableMixin(itemClass);
    return itemClass;
};
exports.itemsBaseFactory = function (_a) {
    var renderConfig = _a.renderConfig, typeConfig = _a.typeConfig, styleFunct = _a.styleFunct;
    var mapTypesBase = {
        polylines: polylines_factory_1.PolylinesBase,
        markers: markers_factory_1.MarkersBase,
        divMarkers: div_markers_factory_1.DivMarkersBase
    };
    typeConfig = typeConfig || {};
    var MapItemBase = mapTypesBase.markers;
    if (typeConfig.isDiv)
        MapItemBase = mapTypesBase.divMarkers;
    if (typeConfig.isPolyline)
        MapItemBase = mapTypesBase.polylines;
    var base = exports.mapItemsFactory(MapItemBase, typeConfig);
    return base;
};
exports.itemsFactory = function (_a) {
    var renderConfig = _a.renderConfig, typeConfig = _a.typeConfig, styleFunct = _a.styleFunct, styleObj = _a.styleObj;
    var base = exports.itemsBaseFactory({ renderConfig: renderConfig, typeConfig: typeConfig, styleFunct: styleFunct });
    function getStyleFunct(styleObj) {
        return {
            get: function (type) {
                return styleObj[type];
            }
        };
    }
    return new base(renderConfig, styleFunct || getStyleFunct(styleObj));
};
//# sourceMappingURL=map-items-factory.js.map