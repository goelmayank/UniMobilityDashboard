"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ReplaySubject_1 = require("rxjs/ReplaySubject");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var operators_1 = require("rxjs/operators");
var map_1 = require("rxjs/operators/map");
var withLatestFrom_1 = require("rxjs/operators/withLatestFrom");
var EntityState = (function () {
    function EntityState() {
        var _this = this;
        this.stateSubject$ = new BehaviorSubject_1.BehaviorSubject({});
        this.state$ = this.stateSubject$.asObservable();
        this.dataSubject$ = new ReplaySubject_1.ReplaySubject();
        this.data$ = this.dataSubject$.asObservable();
        this.stateTrasfrom = [];
        this.data$.pipe(withLatestFrom_1.withLatestFrom(this.state$), map_1.map(function (_a) {
            var data = _a[0], state = _a[1];
            return _this.stateTrasfrom.reduce(function (acc, trasform) {
                return __assign({}, acc, (_a = {}, _a[trasform.selector] = trasform.map(data, acc), _a));
                var _a;
            }, state);
        })).subscribe(this.stateSubject$);
    }
    EntityState.prototype.setState = function (selector, value) {
        var state = __assign({}, this.stateSubject$.getValue(), (_a = {}, _a[selector] = value, _a));
        this.stateSubject$.next(state);
        var _a;
    };
    ;
    EntityState.prototype.addState = function (selector, map) {
        //todo dont add of contains
        this.stateTrasfrom.push({ selector: selector, map: map });
    };
    EntityState.prototype.selector = function (selector) {
        return this.state$.pipe(operators_1.pluck(selector), operators_1.distinctUntilChanged());
    };
    EntityState.prototype.setData = function (data) {
        this.dataSubject$.next(data);
    };
    return EntityState;
}());
exports.EntityState = EntityState;
//# sourceMappingURL=entity-state.js.map