"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
function PopupMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var arg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                arg[_i] = arguments[_i];
            }
            var _this = _super.apply(this, arg) || this;
            _this.defaultPopupStyle = {
                disableAutoPan: true,
            };
            _this.addPopup();
            return _this;
        }
        class_1.prototype.addPopup = function () {
            this.popup = this.mapInstance.mapUtils.getPopup(this.getStyle("popup", this.defaultPopupStyle));
        };
        class_1.prototype.setPopup = function (id) {
            if (id && this.entities[id]) {
                var data = this.entities[id].data;
                var popup = this.popup;
                var map = this.mapInstance.map;
                this.mapInstance.mapUtils.openPopupPosition(this.getPosition(data), map, this.getInfoContent(data), popup);
            }
            else {
                this.mapInstance.mapUtils.clearItem(this.popup);
            }
        };
        class_1.prototype.onMouseEnter = function (entity) {
            var id = this.trackBy(entity.data);
            this.setPopup(id);
        };
        class_1.prototype.onMouseLeave = function (entity) {
            this.popup && this.mapInstance.mapUtils.clearItem(this.popup);
        };
        return class_1;
    }(Base));
}
exports.PopupMixin = PopupMixin;
// export class PopupRenderer {
//   popup;
//   getStyle: (styleType?) => object;
//   entities: Entities<any>;
//   getPosition: (data) => HtPosition;
//   getInfoContent: (data) => string;
//   // setMap: (item, map) => void;
//   defaultPopupStyle =  {
//     disableAutoPan: true,
//     pixelOffset: new google.maps.Size(0, -35)
//   };
//
//   addPopup() {
//     this.popup = GlobalMap.mapUtils.getPopup(this.getStyle('popup'))
//   }
//
//   setPopup(id: string | null) {
//     if (id && this.entities[id]) {
//       let {data} = this.entities[id];
//       let popup = this.popup;
//       let map = GlobalMap.map;
//       GlobalMap.mapUtils.openPopupPosition(this.getPosition(data), map, this.getInfoContent(data), popup);
//     } else {
//       GlobalMap.mapUtils.setMap(this.popup, null)
//     }
//   };
//
//   onMouseEnter(entity: Entity<any>) {
//     let id = entity.data.id;
//     this.setPopup(id);
//
//   };
//
//   onMouseLeave(entity: Entity<any>) {
//     this.popup && GlobalMap.mapUtils.setMap(this.popup, null)
//   }
// }
//# sourceMappingURL=popup-renderer.js.map