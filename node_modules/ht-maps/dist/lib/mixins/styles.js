"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
function StyleMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            _this.defaultstyleFunct = {
                get: function (type) {
                    return {
                        default: {}
                    };
                }
            };
            _this.highlightedId = null;
            return _this;
        }
        class_1.prototype.getStyle = function (selectedStyleType, fallbackStyle) {
            if (selectedStyleType === void 0) { selectedStyleType = "default"; }
            var mapType = this.mapInstance.mapUtils.type;
            var styleFunct = this.styleFunct || this.defaultstyleFunct;
            var mapTypetype = this.styleObj || styleFunct.get(mapType);
            // console.log(this.name, "style", selectedStyleType, styleFunct, this.styleFunct);
            // const styleType = mapTypetype[selectedStyleType] ? selectedStyleType : this.styleType;
            var style = mapTypetype[selectedStyleType] || fallbackStyle;
            if (!style)
                console.error("style type does not exist ", this.name, selectedStyleType);
            if (this.isAnimated && style)
                style = __assign({}, style, { className: style['className'] ? style['className'] + " animated-marker" : 'animated-marker' });
            return style;
        };
        class_1.prototype.setStyleType = function (styleType) {
            if (styleType === void 0) { styleType = 'default'; }
            this.styleType = styleType;
        };
        class_1.prototype.setStyle = function (_a) {
            var item = _a.item, data = _a.data;
            var styleType = this.getStyleType(data);
            var style = this.getStyle(styleType);
            this.setItemStyle(item, style);
        };
        class_1.prototype.getStyleType = function (datum) {
            if (this.highlightedId && datum) {
                return this.highlightedId == this.trackBy(datum) ? 'highlight' : 'fade';
            }
            else {
                return this.styleType;
            }
        };
        class_1.prototype.setItemStyle = function (item, style) {
            this.mapInstance.mapUtils.setStyle(item, style);
        };
        return class_1;
    }(Base));
}
exports.StyleMixin = StyleMixin;
// export class Styles {
//   styleFunct: StyleFunct = {
//     google: {
//       default: {
//
//       }
//     },
//     leaflet: {
//       default: {
//
//       }
//     }
//   };
//
//   styleType = 'default';
//
//   getStyle(selectedStyleType: string = 'default', fallbackStyle?) {
//     const mapType = GlobalMap.mapUtils.type;
//     const mapTypetype = this.styleFunct[mapType];
//     const styleType = selectedStyleType && mapTypetype[selectedStyleType] ? selectedStyleType : this.styleType;
//     const style = mapTypetype[styleType] || fallbackStyle;
//     if(!style) console.error("style type does not exist");
//     return this.styleFunct[mapType][styleType]
//   }
// }
//# sourceMappingURL=styles.js.map