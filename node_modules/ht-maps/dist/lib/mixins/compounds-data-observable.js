"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// import { GlobalMap } from "../global/map-service";
var distinctUntilChanged_1 = require("rxjs/operators/distinctUntilChanged");
var filter_1 = require("rxjs/operators/filter");
var map_1 = require("rxjs/operators/map");
var scan_1 = require("rxjs/operators/scan");
var _ = require("underscore");
var ht_data_1 = require("ht-data");
var combineLatest_1 = require("rxjs/observable/combineLatest");
var ht_data_2 = require("ht-data");
function CompoundDataObservableMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            _this.mapInstance.addToItemsSet(_this);
            return _this;
        }
        class_1.prototype._procData$ = function () {
            return function (source$) {
                return source$.pipe(map_1.map(function (markers) {
                    return _.reduce(markers, function (acc, item) {
                        var isValid = true;
                        if (isValid) {
                            acc.valid.push(item);
                        }
                        else {
                            acc.invalid.push(item);
                        }
                        return acc;
                    }, { valid: [], invalid: [] });
                    // return markers
                }));
            };
        };
        class_1.prototype.setCompoundData$ = function (data$, config) {
            if (config === void 0) { config = {}; }
            this.compoundSetDataConfig = config;
            if (this.dataSub) {
                this.dataSub.unsubscribe();
            }
            var hide$ = config.hide$;
            var filter$ = config.filter$;
            var dataSource$ = hide$
                ? combineLatest_1.combineLatest(data$, hide$.pipe(distinctUntilChanged_1.distinctUntilChanged()), function (data, hide) { return (!!hide ? null : data); })
                : data$;
            if (config.roots && config.highlighted$) {
                dataSource$ = ht_data_1.dataWithSelectedId$(dataSource$, config.highlighted$, config.roots, 'highlightedSegment');
            }
            if (config.roots && filter$)
                dataSource$ = ht_data_1.dataWithSelectedId$(dataSource$, filter$, config.roots, 'selectedSegment');
            this.dataSource$ = dataSource$;
            this.data$ = this.dataSource$;
            this._initDataObserver();
        };
        class_1.prototype._initData$ = function () {
            var _this = this;
            var userData$ = this.data$.pipe(filter_1.filter(function (data) { return !!_this.mapInstance.map; }), scan_1.scan(function (acc, data) {
                var oldUser = acc.user;
                return { user: data, oldUser: oldUser };
            }, { user: null, oldUser: null }));
            return userData$;
        };
        class_1.prototype._initDataObserver = function () {
            var _this = this;
            var userData$ = this._initData$();
            function isNewItem(newItem, old) {
                if (!old && newItem)
                    return true;
                if (newItem && old)
                    return !old && !!newItem;
            }
            var newPlaceline$ = userData$.pipe(map_1.map(function (acc) {
                var userData = acc.user;
                _this.trace(userData);
                var isNew = isNewItem(acc.user, acc.oldUser);
                return isNew;
                // if(isNew) GlobalMap.resetBounds()
            }));
            var sub = ht_data_2.orCombine(newPlaceline$.pipe(filter_1.filter(function (data) { return !!data; })), this.compoundSetDataConfig.resetMap$.pipe(map_1.map(function (data) { return true; }))).subscribe(function (toReset) {
                if (toReset)
                    _this.mapInstance.resetBounds();
            });
            this.dataSub = sub;
        };
        return class_1;
    }(Base));
}
exports.CompoundDataObservableMixin = CompoundDataObservableMixin;
//# sourceMappingURL=compounds-data-observable.js.map