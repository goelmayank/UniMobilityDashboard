"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
var segment_polylines_1 = require("../entities/segment-polylines");
var stop_markers_1 = require("../entities/stop-markers");
var action_markers_1 = require("../entities/action-markers");
var ht_data_1 = require("ht-data");
var current_user_1 = require("../entities/current-user");
var compounds_data_observable_1 = require("../mixins/compounds-data-observable");
var time_aware_polyline_1 = require("time-aware-polyline");
var animation_polyline_1 = require("../entities/animation-polyline");
var actions_polyline_1 = require("../entities/actions-polyline");
var Placeline = (function () {
    function Placeline(options) {
        this.options = options;
        this.allowedEvents = {};
        this.anim = new time_aware_polyline_1.TimeAwareAnimation();
        this.mapInstance = this.options.mapInstance;
        this.stopMarkers = new stop_markers_1.StopMarkersTrace(this.mapInstance);
        this.userMarker = new current_user_1.CurrentUserTrace(this.mapInstance);
        this.userMarker.setTimeAwareAnimation(this.anim);
        this.segmentsPolylines = new segment_polylines_1.SegmentPolylinesTrace(this.mapInstance);
        this.actionMarkers = new action_markers_1.ActionMarkersTrace(this.mapInstance);
        this.animPolyline = new animation_polyline_1.AnimPolylineTrace(this.mapInstance);
        this.animPolyline.setTimeAwareAnimation(this.anim);
        this.actionsPolyline = new actions_polyline_1.ActionsPolylineTrace(this.mapInstance);
        this.actionsPolyline.setTimeAwareAnimation(this.anim);
    }
    Object.defineProperty(Placeline.prototype, "map", {
        get: function () {
            return this.mapInstance.map;
        },
        enumerable: true,
        configurable: true
    });
    Placeline.prototype.trace = function (user, map) {
        var selectedSegment = user ? user.selectedSegment : null;
        this.setHighlightId(user);
        var userSegments = user && user.segments ? user.segments : [];
        var segType = this.getSegmentTypes(userSegments);
        var lastSegment = segType.lastSegment;
        var restTrips = segType.tripSegment.pop();
        this.traceStops(segType.stopSegment, selectedSegment, lastSegment);
        if (lastSegment) {
            var string = this.getTimeAwarePolyline(lastSegment);
            if (string) {
                //todo infer toNotTraceItem from animMixin trace
                this.userMarker.toNotTraceItem = true;
                this.animPolyline.toNotTraceItem = true;
                this.actionsPolyline.toNotTraceItem = true;
                // this.animPolyline.trace(restTrips);
                this.anim.updatePolylineString(string);
            }
            else {
                this.animPolyline.toNotTraceItem = false;
                this.userMarker.toNotTraceItem = false;
                this.actionsPolyline.toNotTraceItem = false;
                // if (!selectedSegment) this.animPolyline.trace(restTrips);
                this.anim.clear();
            }
            this.userMarker.trace(user);
            this.traceAnimPolyline(restTrips, selectedSegment);
            this.actionsPolyline.setConnector(this.userMarker.getEntity());
            this.actionsPolyline.trace(user);
        }
        else {
            this.anim.clear();
            this.userMarker.clear();
            this.animPolyline.clear();
            this.actionsPolyline.clear();
        }
        this.traceSegments(segType.tripSegment, selectedSegment);
        this.traceAction(user, selectedSegment);
        // this.actionsPolyline.setConnector(this.userMarker.getEntity());
        // this.actionsPolyline.trace(user)
    };
    ;
    Placeline.prototype.traceAnimPolyline = function (restTrip, selectedSegment) {
        if (!restTrip) {
            this.animPolyline.clear();
        }
        else if (!selectedSegment || selectedSegment.id === restTrip.id) {
            this.animPolyline.trace(restTrip);
        }
        else {
            this.animPolyline.clear();
        }
    };
    Placeline.prototype.traceStops = function (stops, selectedSegment, lastSegment) {
        if (selectedSegment) {
            stops = selectedSegment.type == 'stop' ? [selectedSegment] : [];
        }
        this.stopMarkers.trace(stops);
    };
    Placeline.prototype.traceSegments = function (trips, selectedSegment) {
        if (trips === void 0) { trips = []; }
        if (selectedSegment) {
            var matchedTrip = trips.find(function (trip) { return trip.id === selectedSegment.id; });
            trips = matchedTrip ? [matchedTrip] : [];
        }
        this.segmentsPolylines.trace(trips);
    };
    Placeline.prototype.traceAction = function (user, selectedSegment) {
        var actions = user && user.actions && !selectedSegment ? user.actions : [];
        var filteredActions = _.filter(actions, function (action) {
            return ht_data_1.htAction(action).isValidMarker();
        });
        if (this.actionMarkers)
            this.actionMarkers.trace(filteredActions);
    };
    Placeline.prototype.setHighlightId = function (user) {
        var data = user && !user.selectedSegment ? user.highlightedSegment : null;
        var id = data ? data.id : null;
        this.stopMarkers.highlightedId = id;
        this.segmentsPolylines.highlightedId = id;
        this.animPolyline.highlightedId = id;
    };
    Placeline.prototype.getTimeAwarePolyline = function (segment) {
        return segment ? segment.time_aware_polyline : null;
    };
    Placeline.prototype.extendBounds = function (bounds) {
        bounds = this.stopMarkers.extendBounds(bounds);
        bounds = this.segmentsPolylines.extendBounds(bounds);
        bounds = this.animPolyline.extendBounds(bounds);
        bounds = this.actionMarkers.extendBounds(bounds);
        // bounds = this.userMarker.extendBounds(bounds);
        // console.log(bounds, "final");
        return bounds;
    };
    Placeline.prototype.getSegmentTypes = function (userSegments) {
        return _.reduce(userSegments, function (segmentType, segment) {
            segmentType.lastSegment = segment;
            if (segment.type == "stop") {
                if (segment.location && segment.location.geojson)
                    segmentType.stopSegment.push(segment);
            }
            else {
                if (segment.encoded_polyline)
                    segmentType.tripSegment.push(segment);
            }
            return segmentType;
        }, { tripSegment: [], stopSegment: [], lastSegment: null });
    };
    return Placeline;
}());
exports.Placeline = Placeline;
exports.PlacelineTrace = compounds_data_observable_1.CompoundDataObservableMixin(Placeline);
//# sourceMappingURL=placeline-trace.js.map