"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var animation_renderer_1 = require("../mixins/animation-renderer");
var marker_renderer_1 = require("../mixins/marker-renderer");
var polyline_renderer_1 = require("../mixins/polyline-renderer");
var extend_bounds_1 = require("../mixins/extend-bounds");
var segment_polylines_1 = require("./segment-polylines");
var trace_1 = require("../mixins/trace");
var single_item_1 = require("../mixins/single-item");
var styles_1 = require("../mixins/styles");
var ht_data_1 = require("ht-data");
var ht_utility_1 = require("ht-utility");
var map_items_1 = require("../mixins/map-items");
var ActionsPolyline = (function (_super) {
    __extends(ActionsPolyline, _super);
    function ActionsPolyline() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lineSymbol = {
            path: 'M 0,-1 0,1',
            strokeOpacity: 1,
            scale: 4
        };
        _this.styleFunct = {
            get: function (type) {
                switch (type) {
                    case "google":
                        {
                            return {
                                default: {
                                    strokeColor: ht_utility_1.Color.grey3,
                                    strokeOpacity: 0,
                                    strokeWeight: 5,
                                    icons: [{
                                            icon: {
                                                path: 'M 0,-1 0,0',
                                                strokeOpacity: 1,
                                                scale: 4
                                            },
                                            offset: '0',
                                            repeat: '13px'
                                        }],
                                },
                                highlight: {
                                    strokeColor: ht_utility_1.Color.grey2,
                                    strokeOpacity: 1,
                                    strokeWeight: 5
                                },
                                fade: {
                                    strokeColor: ht_utility_1.Color.grey2,
                                    strokeOpacity: 0.2,
                                    strokeWeight: 2
                                }
                            };
                        }
                        ;
                    case "leaflet": {
                        return {
                            default: {
                                weight: 5,
                                color: ht_utility_1.Color.grey4,
                                opacity: 1,
                                dashArray: "7 10"
                            },
                            highlight: {
                                weight: 5,
                                color: ht_utility_1.Color.grey2,
                                opacity: 1
                            },
                            fade: {
                                weight: 2,
                                color: ht_utility_1.Color.grey2,
                                opacity: 0.2
                            }
                        };
                    }
                }
            },
        };
        _this.name = "action polyline";
        return _this;
    }
    ActionsPolyline.prototype.getPathFromData = function (data) {
        return data ? data.actions.reduce(function (path, action) {
            return ht_data_1.htAction(action).getExpectedPosition() && !action.completed_at ? path.concat([ht_data_1.htAction(action).getPosition()]) : path;
        }, []) : null;
    };
    return ActionsPolyline;
}(segment_polylines_1.SegmentPolylines));
exports.ActionsPolyline = ActionsPolyline;
exports.ActionsPolylineTrace = ConnectorMixin(animation_renderer_1.AnimationMixin(single_item_1.SingleItemMixin(trace_1.TraceMixin(extend_bounds_1.ExtendBoundsMixin(polyline_renderer_1.PolylinesMixin(marker_renderer_1.MarkersMixin(styles_1.StyleMixin(map_items_1.MapItemsMixin(ActionsPolyline)))))))));
function ConnectorMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.positionTimeArray = [];
            return _this;
        }
        /*
        Need to ensure connector is traced before this class is traced
         */
        class_1.prototype.setConnector = function (entity) {
            this.connector = entity ? entity.item : null;
        };
        class_1.prototype.getConnectorPosition = function () {
            return this.connector ? this.mapInstance.mapUtils.getItemPosition(this.connector) : null;
        };
        class_1.prototype.update = function (_a, pathBearing) {
            var item = _a.item, data = _a.data;
            var startPosition;
            if (pathBearing) {
                var path = pathBearing.path;
                startPosition = path[path.length - 1];
            }
            else {
                startPosition = this.getConnectorPosition();
            }
            ;
            var dataPath = this.getPathFromData(data);
            if (dataPath && startPosition) {
                var finalPath = [startPosition].concat(dataPath);
                this.mapInstance.mapUtils.setPath(item, finalPath);
                this.mapInstance.mapUtils.setMap(item, this.mapInstance.map);
            }
            else {
                this.clear();
            }
        };
        return class_1;
    }(Base));
}
exports.ConnectorMixin = ConnectorMixin;
//# sourceMappingURL=actions-polyline.js.map