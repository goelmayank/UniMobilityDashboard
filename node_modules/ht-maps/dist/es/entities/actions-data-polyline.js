import { DataObservableMixin } from "../mixins/data-observable";
import { TraceMixin } from "../mixins/trace";
import { PolylinesMixin } from "../mixins/polyline-renderer";
import { StyleMixin } from "../mixins/styles";
import { ExtendBoundsMixin } from "../mixins/extend-bounds";
import { MarkersMixin } from "../mixins/marker-renderer";
import { AnimationsEntitiesMixin } from "../mixins/animations-entities";
import { MapItemsMixin } from "../mixins/map-items";
var ActionsDataPolyline = (function () {
    function ActionsDataPolyline(mapInstance) {
        this.name = "Actions data polyline";
        this.styleFunct = {
            get: function (type) {
                switch (type) {
                    case 'google': {
                        return {
                            default: {},
                            popup: {
                                pixelOffset: new google.maps.Size(0, -5),
                            }
                        };
                    }
                    case 'leaflet': {
                        return {
                            default: {
                                fillColor: '#9155f4',
                                color: '#9155f4',
                                weight: 5
                                // iconAnchor: [12, 12]
                                // iconSize: [35, 35],
                                // className: 'current-action-marker',
                                // iconAnchor: point(15, 43)
                                // iconAnchor: [15, 43]
                            },
                            popup: {
                                // offset: point(0, -35),
                                offset: [0, -5],
                                closeButton: false
                            }
                        };
                    }
                }
            }
        };
        this.mapInstance = mapInstance;
    }
    ActionsDataPolyline.prototype.getEncodedPositionTime = function (data) {
        return data.time_aware_polyline;
    };
    //todo remove this, use getTimeAwarePolyline
    ActionsDataPolyline.prototype.getEncodedPath = function (data) {
        return data.encoded_polyline;
    };
    ActionsDataPolyline.prototype.getPosition = function (action) {
        var position = action.user ?
            action.user.last_location ? action.user.last_location.geojson.coordinates : null
            : null;
        return position ? { lat: position[1], lng: position[0] } : null;
    };
    ActionsDataPolyline.prototype.getTimeAwarePolyline = function (data) {
        return data.time_aware_polyline;
    };
    return ActionsDataPolyline;
}());
export { ActionsDataPolyline };
// export interface IActionsPolylineBase {
//   mapInstance: MapInstance
//   // getStyle: (styleType?) => object;
// }
//
// export function ActionsPolylineMixin<TBase extends Constructor<IActionsPolylineBase>>(Base: TBase) {
//   return class extends Base {
//     start;
//
//
//
//
//
//   };
// }
export var ActionsPolylineTrace = DataObservableMixin(AnimationsEntitiesMixin(TraceMixin(ExtendBoundsMixin(PolylinesMixin(MarkersMixin(StyleMixin(MapItemsMixin(ActionsDataPolyline))))))));
// export const ActionsPolylineTrace = DataObservableMixin(AnimationMixin(TraceMixin(PolylinesMixin(StyleMixin(ActionsDataPolyline))))) 
//# sourceMappingURL=actions-data-polyline.js.map