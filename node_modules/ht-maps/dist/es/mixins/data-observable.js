var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// import { GlobalMap } from "../global/map-service";
import { distinctUntilChanged } from "rxjs/operators/distinctUntilChanged";
import { filter } from "rxjs/operators/filter";
import { map } from "rxjs/operators/map";
import { scan } from "rxjs/operators/scan";
import * as _ from "underscore";
import { combineLatest } from "rxjs/observable/combineLatest";
export function DataObservableMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            _this.mapInstance.addToItemsSet(_this);
            return _this;
        }
        class_1.prototype._procData$ = function () {
            var _this = this;
            return function (source$) {
                return source$.pipe(filter(function (data) { return !!data; }), map(function (pageData) {
                    var isNew = pageData && pageData.count && !pageData.previous;
                    var results = pageData ? pageData.results : [];
                    return _this.getMarkersArray(results, isNew);
                }));
            };
        };
        class_1.prototype.getMarkersArray = function (array, isNew) {
            var _this = this;
            if (isNew === void 0) { isNew = false; }
            return _.reduce(array, function (acc, item) {
                var isValid = _this.isValidMapItems
                    ? _this.isValidMapItems(item)
                    : !!_this.getPosition(item);
                if (isValid) {
                    acc.valid.push(item);
                }
                else {
                    acc.invalid.push(item);
                }
                return acc;
            }, { valid: [], invalid: [], isNew: isNew });
        };
        class_1.prototype.setPageData$ = function (data$, config) {
            if (config === void 0) { config = {}; }
            //todo take page data, add diff apis
            if (this.dataSub) {
                this.dataSub.unsubscribe();
            }
            var hide$ = config.hide$;
            this.dataPageSource$ = hide$
                ? combineLatest(data$, hide$.pipe(distinctUntilChanged()), function (data, hide) {
                    return !!hide ? { results: [], count: 0, next: "", previous: "" } : data;
                })
                : data$;
            this.data$ = this.dataPageSource$.pipe(this._procData$());
            this._initDataObserver();
        };
        class_1.prototype.setData$ = function (data$, config) {
            var _this = this;
            if (config === void 0) { config = {}; }
            if (this.dataSub) {
                this.dataSub.unsubscribe();
            }
            ;
            var hide$ = config.hide$;
            this.dataArraySource$ = hide$
                ? combineLatest(data$, hide$.pipe(distinctUntilChanged()), function (data, hide) { return (!!hide ? [] : data); })
                : data$;
            this.data$ = this.dataArraySource$.pipe(scan(function (acc, data) {
                return { new: data, old: acc.new };
            }, { old: null, new: null }), map(function (dataArray) {
                return _this.getMarkersArray(dataArray.new, !dataArray.old);
            }));
            this._initDataObserver();
        };
        // _initData$() {
        //   let userData$ = this.dataPageSource$.pipe(
        //     filter(data => !!GlobalMap.map),
        //     pluck('valid'),
        //     scan((acc: {user: any, oldUser: any}, data: object) => {
        //       const oldUser = acc.user;
        //       return {user: data, oldUser }
        //     }, {user: null, oldUser: null})
        //   );
        //   return userData$;
        // };
        class_1.prototype._initDataObserver = function () {
            var _this = this;
            var mapData$ = this.data$.pipe(filter(function (data) { return !!_this.mapInstance.map; }));
            var render$ = combineLatest(mapData$, this.mapInstance.map$.pipe(filter(function (data) { return !!data; })), function (mapData, map) { return mapData; });
            // function isNewId (newItem, old) {
            //   if(!old && newItem) return true;
            //   if(newItem && old) return  newItem.id !== old.id
            // }
            // function isNewList(newList, old) {
            //   if(!old && newList) return true;
            //   if(newList && old) return !newList.next && newList.count
            // }
            var sub = render$.subscribe(function (_a) {
                var valid = _a.valid, invalid = _a.invalid, isNew = _a.isNew;
                _this.trace(valid);
                if (isNew)
                    _this.mapInstance.resetBounds();
            });
            this.dataSub = sub;
        };
        class_1.prototype.clear = function () {
            this.dataSub.unsubscribe();
        };
        return class_1;
    }(Base));
}
//# sourceMappingURL=data-observable.js.map