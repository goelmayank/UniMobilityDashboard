var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// import { GlobalMap } from "../global/map-service";
import * as _ from "underscore";
export function ClusterMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var arg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                arg[_i] = arguments[_i];
            }
            var _this = _super.apply(this, arg) || this;
            _this.forceExtendBounds = true;
            _this.toNotSetMap = true;
            _this.addCluster();
            return _this;
        }
        class_1.prototype.trace = function (items, map) {
            if (items && items.length) {
                this.clearAllClusters(items);
            }
            _super.prototype.trace.call(this, items, map);
        };
        class_1.prototype.addCluster = function () {
            this.mapInstance.addCluster(this);
        };
        class_1.prototype.traceEffect = function () {
            if (this.cluster) {
                var userMarkerArray = _.values(this.entities).map(function (userMarker) {
                    return userMarker.item;
                });
                this.mapInstance.mapUtils.addMarkersToCluster(this.cluster, userMarkerArray, this.mapInstance.map);
            }
        };
        class_1.prototype.getBounds = function (item, bounds) {
            return this.mapInstance.mapUtils.extendItemBounds(item, bounds, true);
        };
        class_1.prototype.removeItem = function (item) {
            this.mapInstance.mapUtils.removeClusterMarker(this.cluster, item);
            _super.prototype.removeItem.call(this, item);
        };
        class_1.prototype.removeAll = function (entities) {
            this.cluster && this.mapInstance.mapUtils.removeClusterMarkers(this.cluster);
            this.entities = {};
            // super.removeAll(entities);
        };
        ;
        class_1.prototype.clearAllClusters = function (data) {
            var entitiesCount = Object.keys(this.entities).length;
            if (entitiesCount > 400 && entitiesCount - data.length > 100) {
                this.removeAll(this.entities);
            }
        };
        return class_1;
    }(Base));
}
//# sourceMappingURL=clusters.js.map