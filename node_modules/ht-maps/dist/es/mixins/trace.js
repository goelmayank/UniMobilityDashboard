var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
;
export function TraceMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // setMap: (item, map) => void;
        class_1.prototype.trace = function (data, map) {
            var _this = this;
            map = map || this.mapInstance.map;
            var mapUtils = this.mapInstance.mapUtils;
            if (!map) {
                console.warn("Map is not initialized");
                return false;
            }
            if (data && data.length) {
                // if(this.cluster) this.clearAllClusters(data);
                data.forEach(function (datum) {
                    var id = _this.trackBy(datum);
                    var entity = _this.entities[id];
                    var hasEntity = !!entity;
                    var item = !hasEntity ? _this.getItem(datum) : entity.item;
                    entity = { data: datum, item: item, isOld: false };
                    _this.entities[id] = entity;
                    if (!hasEntity) {
                        _this.addEvents(item, id);
                    }
                    if (item)
                        _this.setStyle(entity);
                    if (!_this.toNotTraceItem)
                        _this.traceItem(datum);
                    // if (!this.toNotSetMap) mapUtils.setMap(item, map);
                });
                if (this.traceEffect)
                    this.traceEffect();
            }
            else {
                // console.log("remove all", this);
                this.removeAll(this.entities);
            }
            this.bustOldItem();
        };
        ;
        class_1.prototype.traceItem = function (datum) {
            var id = this.trackBy(datum);
            var entity = this.entities[id];
            if (entity) {
                this.update(entity);
            }
        };
        ;
        class_1.prototype.addEvents = function (item, id) {
            var _this = this;
            var mapUtils = this.mapInstance.mapUtils;
            mapUtils.onEvent(item, "click", function () {
                var entity = _this.entities[id];
                if (_this.onMouseLeave)
                    _this.onMouseLeave(entity);
                if (_this.onClick)
                    _this.onClick(entity);
            });
            mapUtils.onEvent(item, "mouseover", function () {
                var entity = _this.entities[id];
                if (_this.onMouseEnter)
                    _this.onMouseEnter(entity);
            });
            mapUtils.onEvent(item, "mouseout", function () {
                var entity = _this.entities[id];
                if (_this.onMouseLeave)
                    _this.onMouseLeave(entity);
            });
        };
        class_1.prototype.bustOldItem = function () {
            var _this = this;
            var keys = Object.keys(this.entities);
            keys.forEach(function (key) {
                var entity = _this.entities[key];
                if (entity.isOld) {
                    _this.clearItem(entity);
                    delete _this.entities[key];
                }
                else {
                    _this.entities[key].isOld = true;
                }
            });
        };
        return class_1;
    }(Base));
}
//# sourceMappingURL=trace.js.map