var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
export function HeatmapMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            _this.forceExtendBounds = true;
            var style = _this.getStyle();
            _this.heatmap = _this.mapInstance.mapUtils.getHeatmap(style);
            return _this;
        }
        class_1.prototype.trace = function (items, map) {
            var _this = this;
            this.entities = items.map(function (item) { return ({ item: item }); });
            this.map = map || this.mapInstance.map;
            if (this.map) {
                if (items) {
                    var latLngs = items.reduce(function (acc, item) {
                        var position = _this.getPosition(item);
                        return position ? acc.concat([position]) : acc;
                    }, []);
                    this.mapInstance.mapUtils.updateHeatMapLatlng(latLngs, this.heatmap);
                    this.mapInstance.mapUtils.setMap(this.heatmap, this.map);
                }
                else {
                    this.clear();
                }
            }
            else {
                console.warn("Map is not initialized");
                return false;
            }
        };
        class_1.prototype.getBounds = function (item, bounds) {
            var position = this.getPosition(item);
            return this.mapInstance.mapUtils.extendBounds(position, bounds);
        };
        class_1.prototype.clear = function () {
            this.trace([]);
        };
        return class_1;
    }(Base));
}
//# sourceMappingURL=heatmap.js.map