var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { TimeAwareAnimation } from "time-aware-polyline";
export function AnimationsEntitiesMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // bearing: number = 0;
            // item;
            _this.isAnimated = true;
            _this.toNotTraceItem = false;
            _this.subs = {};
            return _this;
        }
        class_1.prototype.setTimeAwareAnimationEntity = function (animationEntity) {
            this.animationEntities = animationEntity || new AnimationsEntities();
        };
        ;
        class_1.prototype.clearItem = function (entity) {
            var id = this.trackBy(entity.data);
            var animId = entity.data.id;
            this.animationEntities.clearItem(animId);
            this.clearSub(id);
            _super.prototype.clearItem.call(this, entity);
        };
        class_1.prototype.update = function (entity, pathBearing) {
            var id = this.trackBy(entity.data);
            var animId = entity.data.id;
            this.initSub(id, animId);
            var encodedString = this.getTimeAwarePolyline ? this.getTimeAwarePolyline(entity.data) : null;
            if (encodedString) {
                this.animationEntities.update(id, encodedString);
            }
            else {
                // super.update(entity, {path, bearing})
            }
        };
        ;
        class_1.prototype.initSub = function (id, animId) {
            var _this = this;
            animId = animId || id;
            var sub = this.subs[id];
            if (sub) {
            }
            else {
                if (this['name'] == "action user")
                    console.log("id sub craete sub");
                var newsub = this.animationEntities
                    .getEntity(animId)
                    .updateEvent
                    .subscribe('update', function (_a) {
                    var path = _a.path, bearing = _a.bearing;
                    var entity = _this.getEntity(id);
                    if (entity) {
                        _super.prototype.update.call(_this, entity, { path: path, bearing: bearing });
                    }
                });
                this.subs[id] = newsub;
            }
        };
        class_1.prototype.clearSub = function (id) {
            var sub = this.subs[id];
            sub.unsubscribe();
            delete this.subs[id];
        };
        return class_1;
    }(Base));
}
var AnimationsEntities = (function () {
    function AnimationsEntities() {
        this.enitites = {};
    }
    AnimationsEntities.prototype.clearItem = function (id) {
        var entity = this.enitites[id];
        entity.clear();
        delete this.enitites[id];
    };
    AnimationsEntities.prototype.update = function (id, polyline) {
        var entity = this.getEntity(id);
        entity.updatePolylineString(polyline);
    };
    ;
    AnimationsEntities.prototype.getEntity = function (id) {
        var entity = this.enitites[id];
        if (entity) {
            return entity;
        }
        else {
            var newEntity = new TimeAwareAnimation();
            this.enitites[id] = newEntity;
            return newEntity;
        }
    };
    return AnimationsEntities;
}());
export { AnimationsEntities };
//# sourceMappingURL=animations-entities.js.map