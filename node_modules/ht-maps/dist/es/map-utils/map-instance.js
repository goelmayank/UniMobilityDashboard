var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { filter, take } from "rxjs/operators";
import { ReplaySubject } from "rxjs/ReplaySubject";
import { mapTypeService } from "../global/map-type";
var MapInstance = (function () {
    function MapInstance() {
        var _this = this;
        // mapUtils: MapUtils = null;
        this.map = null;
        this.map$ = new ReplaySubject();
        this.clusters = [];
        this.poppers = [];
        this.itemsSet = [];
        // mapType: HtMapType;
        this.leafletSetBoundsOptions = {
            animate: true,
            duration: 0.3
        };
        this.googleSetBoundsOptions = {};
        this.map$.subscribe(function (map) {
            _this.map = map;
        });
    }
    Object.defineProperty(MapInstance.prototype, "mapUtils", {
        get: function () {
            return mapTypeService.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapInstance.prototype, "mapType", {
        get: function () {
            return mapTypeService.getInstance().mapType;
        },
        enumerable: true,
        configurable: true
    });
    MapInstance.prototype.addToItemsSet = function (item) {
        var i = this.itemsSet.indexOf(item);
        if (i == -1)
            this.itemsSet.push(item);
    };
    MapInstance.prototype.renderMap = function (elem, options) {
        if (options === void 0) { options = {}; }
        var map = this.mapUtils.renderMap(elem, options);
        this.setMap(map);
        return map;
    };
    MapInstance.prototype.setMap = function (map) {
        this.map$.next(map);
    };
    MapInstance.prototype.inValidateSize = function () {
        this.mapUtils.invalidateSize(this.map);
    };
    // getMap() {
    //   this.map$.take(1).subscribe(map => {
    //     return map;
    //   });
    // }
    MapInstance.prototype.setMapType = function (mapType, key) {
        mapTypeService.getInstance(mapType);
        if (key)
            this.mapUtils.setKey(key);
    };
    ;
    MapInstance.prototype.addCluster = function (cluster) {
        var _this = this;
        if (!this.clusters.includes(cluster)) {
            this.clusters.push(cluster);
            this.map$.pipe(filter(function (data) { return !!data; }))
                .subscribe(function (map) {
                cluster.cluster = _this.mapUtils.getMarkerCluster(map);
            });
        }
    };
    MapInstance.prototype.addPopper = function (popper) {
        if (!this.poppers.includes(popper)) {
            this.poppers.push(popper);
        }
        ;
        if (!this.moveEvent) {
            this.listenMove();
        }
    };
    ;
    MapInstance.prototype.removePopper = function (popper) {
        var i = this.poppers.indexOf(popper);
        if (i > -1) {
            this.poppers.splice(i, 1);
        }
    };
    MapInstance.prototype.listenMove = function () {
        var _this = this;
        this.map$.pipe(filter(function (data) { return !!data; }), take(1)).subscribe(function (map) {
            _this.moveEvent = _this.mapUtils.onEvent(map, 'move', function (e) {
                _this.poppers.forEach(function (p) {
                    p.scheduleUpdate();
                });
            });
        });
    };
    MapInstance.prototype.getBounds = function (bounds, item) {
        return item.extendBounds ? item.extendBounds(bounds) : null;
    };
    MapInstance.prototype.getItemsSetBounds = function (items) {
        var _this = this;
        var bounds = this.mapUtils.extendItemBounds();
        return items.reduce(function (bounds, item) {
            return _this.getBounds(bounds, item) || bounds;
        }, bounds);
    };
    MapInstance.prototype.resetBounds = function (options) {
        var _this = this;
        if (this.resetBoundsTimeout)
            clearTimeout(this.resetBoundsTimeout);
        this.resetBoundsTimeout = setTimeout(function () {
            var items = _this.itemsSet;
            var bounds = _this.getItemsSetBounds(items);
            if (bounds && _this.mapUtils.isValidBounds(bounds))
                _this.setBounds(bounds, options);
        }, 40);
    };
    MapInstance.prototype.setBounds = function (bounds, options) {
        var map = this.map;
        if (!map)
            return false;
        var mapOptions = (this.mapType == "leaflet"
            ? this.leafletSetBoundsOptions
            : this.googleSetBoundsOptions);
        options =
            options || this.setBoundsOptions || mapOptions;
        this.mapUtils.setBounds(map || this.map, bounds, __assign({}, mapOptions, options));
    };
    MapInstance.prototype.onEvent$ = function (type) {
        return this.mapUtils.onEvent$(this.map, type);
    };
    MapInstance.prototype.mapEventHandler = function (type) {
        var _this = this;
        return function (handler) { return _this.mapUtils.onEvent(_this.map, type, handler); };
    };
    MapInstance.prototype.removeHandler = function (type) {
        var _this = this;
        return function (handler) { return _this.mapUtils.removeEvent(_this.map, type, handler); };
    };
    return MapInstance;
}());
export { MapInstance };
//# sourceMappingURL=map-instance.js.map