import { DestinationMarker } from "../entities/destination-marker";
import { ActionsPolylineTrace } from "../entities/actions-data-polyline";
import { StartMarkerTrace } from "../entities/start-marker";
import { map } from "rxjs/operators";
import { ActionUserTrace } from "../entities/action-user";
import { AnimationsEntities } from "../mixins/animations-entities";
var ActionMap = (function () {
    function ActionMap(mapInstance, options) {
        if (options === void 0) { options = {}; }
        this.anim = new AnimationsEntities();
        this.mapInstance = mapInstance;
        this.destination = new DestinationMarker(mapInstance);
        this.polyline = new ActionsPolylineTrace(mapInstance);
        this.polyline.setTimeAwareAnimationEntity(this.anim);
        this.user = new ActionUserTrace(mapInstance);
        this.user.setTimeAwareAnimationEntity(this.anim);
        if (options.hasPulse) {
            this.pulse = new ActionUserTrace(mapInstance);
            this.pulse.setTimeAwareAnimationEntity(this.anim);
        }
        // this.user.setTimeAwareAnimation(this.anim);
        // this.user.toNotTraceItem = true;
        this.start = new StartMarkerTrace(mapInstance);
    }
    ActionMap.prototype.setData$ = function (data$) {
        this.destination.setData$(data$);
        this.polyline.setData$(data$);
        this.start.setData$(data$);
        if (this.pulse)
            this.pulse.setData$(data$.pipe(map(function (actions) {
                return actions.reduce(function (acc, action) {
                    return action.display.show_summary ? acc : acc.concat([action]);
                }, []);
            })));
        this.user.setData$(data$.pipe(map(function (actions) {
            return actions.reduce(function (acc, action) {
                return action.display.show_summary ? acc : acc.concat([action]);
            }, []);
        })));
    };
    ;
    return ActionMap;
}());
export { ActionMap };
export var ActionTrace = ActionMap;
//# sourceMappingURL=action-trace.js.map