var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { SingleItemMixin } from "../mixins/single-item";
import { PopupMixin } from "../mixins/popup-renderer";
import { DivMarkersMixin } from "../mixins/div-markers-renderes";
import { CircleMixin } from "../mixins/circle-renderer";
import { MarkersMixin } from "../mixins/marker-renderer";
import { TraceMixin } from "../mixins/trace";
import { DataObservableMixin } from "../mixins/data-observable";
import { PolylinesMixin } from "../mixins/polyline-renderer";
import { ClusterMixin } from "../mixins/clusters";
import { StyleMixin } from "../mixins/styles";
import { MarkersBase } from "./markers.factory";
import { PolylinesBase } from "./polylines.factory";
import { DivMarkersBase } from "./div-markers.factory";
import { ExtendBoundsMixin } from "../mixins/extend-bounds";
export var mapItemsFactory = function (baseClass, config) {
    var defaultConfig = {
        isCluster: false,
        hasPopup: false,
        isPolyline: false,
        isDiv: false,
        isSingleItem: false,
        isCircle: false,
        hasDataObservable: false
    };
    var finalConfig = __assign({}, defaultConfig, config);
    var mixins = [];
    var itemClass = baseClass;
    itemClass = MarkersMixin(itemClass);
    itemClass = StyleMixin(itemClass);
    itemClass = TraceMixin(itemClass);
    itemClass = ExtendBoundsMixin(itemClass);
    if (finalConfig.isSingleItem)
        itemClass = SingleItemMixin(itemClass);
    if (finalConfig.hasPopup)
        itemClass = PopupMixin(itemClass);
    if (finalConfig.isCluster)
        itemClass = ClusterMixin(itemClass);
    if (finalConfig.isDiv)
        itemClass = DivMarkersMixin(itemClass);
    if (finalConfig.isCircle)
        itemClass = CircleMixin(itemClass);
    if (finalConfig.isPolyline)
        itemClass = PolylinesMixin(itemClass);
    if (finalConfig.hasDataObservable)
        itemClass = DataObservableMixin(itemClass);
    return itemClass;
};
export var itemsBaseFactory = function (_a) {
    var renderConfig = _a.renderConfig, typeConfig = _a.typeConfig, styleFunct = _a.styleFunct;
    var mapTypesBase = {
        polylines: PolylinesBase,
        markers: MarkersBase,
        divMarkers: DivMarkersBase
    };
    typeConfig = typeConfig || {};
    var MapItemBase = mapTypesBase.markers;
    if (typeConfig.isDiv)
        MapItemBase = mapTypesBase.divMarkers;
    if (typeConfig.isPolyline)
        MapItemBase = mapTypesBase.polylines;
    var base = mapItemsFactory(MapItemBase, typeConfig);
    return base;
};
export var itemsFactory = function (_a) {
    var renderConfig = _a.renderConfig, typeConfig = _a.typeConfig, styleFunct = _a.styleFunct, styleObj = _a.styleObj;
    var base = itemsBaseFactory({ renderConfig: renderConfig, typeConfig: typeConfig, styleFunct: styleFunct });
    function getStyleFunct(styleObj) {
        return {
            get: function (type) {
                return styleObj[type];
            }
        };
    }
    return new base(renderConfig, styleFunct || getStyleFunct(styleObj));
};
//# sourceMappingURL=map-items-factory.js.map