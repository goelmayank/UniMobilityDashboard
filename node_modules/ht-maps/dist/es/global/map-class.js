var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { PlacelineTrace } from "../compound-entities/placeline-trace";
import { UsersClusterTrace } from "../entities/users-cluster";
import { LightColorMapStyle } from "ht-google-maps-wrapper";
import * as _ from "underscore";
import { StopsHeatmapTrace } from "../entities/stops-heatmap";
import { ActionsClusterTrace } from "../entities/actions-cluster";
import { ActionsHeatmapTrace } from "../entities/actions-heatmap";
import { MapInstance } from "../map-utils/map-instance";
import { mapTypeService } from "./map-type";
var HtMapClass = (function () {
    // clusters = [];
    // map$ = new ReplaySubject();
    function HtMapClass(mapType, options) {
        if (mapType === void 0) { mapType = "leaflet"; }
        if (options === void 0) { options = {}; }
        this.mapType = mapType;
        // map: HtMap;
        // mapUtils: MapUtils;
        // userData$: Observable<IUserData | null>;
        this.mapInstance = new MapInstance();
        this.leafletSetBoundsOptions = {
            animate: true,
            duration: 0.3
        };
        this.googleSetBoundsOptions = {};
        this.googleMapOptions = {
            center: { lat: 0, lng: 0 },
            zoom: 2,
            fullscreenControl: false,
            streetViewControl: false,
            styles: LightColorMapStyle
        };
        this.leafletMapOptions = { center: [3.505, 0], zoom: 2 };
        this.mapItemsSet = [];
        mapTypeService.getInstance(mapType);
        if (options.mapKey) {
            // mapTypeService.getInstance().setKey(options.mapKey);
        }
        this.usersCluster = new UsersClusterTrace(this.mapInstance);
        this.actionsCluster = new ActionsClusterTrace(this.mapInstance);
        this.usersHeatmap = new StopsHeatmapTrace(this.mapInstance);
        this.actionsHeatmap = new ActionsHeatmapTrace(this.mapInstance);
        this.placeline = new PlacelineTrace({ mapInstance: this.mapInstance });
    }
    Object.defineProperty(HtMapClass.prototype, "segmentTrace", {
        get: function () {
            return this.placeline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtMapClass.prototype, "map$", {
        get: function () {
            return this.mapInstance.map$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtMapClass.prototype, "map", {
        get: function () {
            return this.mapInstance.map;
        },
        enumerable: true,
        configurable: true
    });
    HtMapClass.prototype.initMap = function (elem, options) {
        if (options === void 0) { options = {}; }
        var mapOptions = this.mapType == "leaflet"
            ? this.leafletMapOptions
            : this.googleMapOptions;
        var map = this.mapInstance.mapUtils.renderMap(elem, __assign({}, mapOptions, options));
        this.mapInstance.setMap(map);
        return map;
    };
    // setPlacelineData$(data$: Observable<IUserData | null>) {
    //   if (this.userDataSub) {
    //     this.userDataSub.unsubscribe();
    //   }
    //   this.initUserDataObserver(data$)
    // }
    //
    // private initUserDataObserver(data$: Observable<IUserData | null>) {
    //   let userData$ = data$.scan((acc, data) => {
    //     const oldId = acc.user ? acc.user.id : null;
    //     const currentId = data ? data.id : null;
    //     const isNew = currentId && oldId ? currentId !== oldId : true;
    //     return {user: data, isNew, oldId }
    //   }, {user: null, oldId: null, isNew: true});
    //
    //   let sub = userData$.subscribe((acc) => {
    //     const userData = acc.user;
    //     const isNew = acc.isNew;
    //     this.tracePlaceline(userData);
    //     if(isNew) this.resetBounds()
    //   });
    //   this.userDataSub = sub;
    // }
    HtMapClass.prototype.tracePlaceline = function (user) {
        this.placeline.trace(user);
    };
    HtMapClass.prototype.resetBounds = function (options) {
        this.mapInstance.resetBounds(options);
    };
    HtMapClass.prototype.getBoundsItem = function (items) {
        var _this = this;
        var bounds = this.mapInstance.mapUtils.extendItemBounds();
        return _.reduce(items, function (bounds, item) {
            return _this.getBounds(bounds, item);
        }, bounds);
    };
    HtMapClass.prototype.getBounds = function (bounds, item) {
        return item.extendBounds(bounds);
    };
    HtMapClass.prototype.setBounds = function (bounds, options) {
        options =
            options || this.mapType == "leaflet"
                ? this.leafletSetBoundsOptions
                : this.googleSetBoundsOptions;
        this.mapInstance.mapUtils.setBounds(this.map, bounds, options);
    };
    HtMapClass.prototype.inValidateSize = function () {
        this.mapInstance.mapUtils.invalidateSize(this.map);
    };
    HtMapClass.prototype.addEntities = function (entities) {
        this.mapInstance.addToItemsSet(entities);
    };
    HtMapClass.prototype.clear = function () {
        this.mapInstance.setMap(null);
    };
    return HtMapClass;
}());
export { HtMapClass };
//# sourceMappingURL=map-class.js.map