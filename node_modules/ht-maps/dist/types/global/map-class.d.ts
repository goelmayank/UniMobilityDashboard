import { HtBounds, HtMap, HtMapType } from "ht-map-wrapper";
import { IUserData } from "ht-models";
import { ReplaySubject } from "rxjs/ReplaySubject";
import { Subscription } from "rxjs/Subscription";
import { MapInstance } from "../map-utils/map-instance";
export declare class HtMapClass {
    mapType: HtMapType;
    mapInstance: MapInstance;
    userDataSub: Subscription;
    placeline: any;
    usersCluster: any;
    usersHeatmap: any;
    actionsHeatmap: any;
    actionsCluster: any;
    leafletSetBoundsOptions: L.PanOptions;
    googleSetBoundsOptions: {};
    googleMapOptions: {
        center: {
            lat: number;
            lng: number;
        };
        zoom: number;
        fullscreenControl: boolean;
        streetViewControl: boolean;
        styles: ({
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "saturation": number;
            } | {
                "color": string;
            } | {
                "lightness": number;
            })[];
        } | {
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "visibility": string;
            } | {
                "color": string;
            } | {
                "lightness": number;
            })[];
        } | {
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "color": string;
            } | {
                "lightness": number;
            } | {
                "weight": number;
            })[];
        } | {
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "saturation": string;
            } | {
                "gamma": string;
            } | {
                "lightness": string;
            } | {
                "color": string;
            })[];
        })[];
    };
    leafletMapOptions: {
        center: number[];
        zoom: number;
    };
    mapItemsSet: any[];
    constructor(mapType?: HtMapType, options?: HtMapClassOptions);
    readonly segmentTrace: any;
    readonly map$: ReplaySubject<HtMap>;
    readonly map: HtMap;
    initMap(elem: HTMLElement, options?: {}): HtMap;
    tracePlaceline(user: IUserData): void;
    resetBounds(options?: any): void;
    getBoundsItem(items: any): any;
    getBounds(bounds: any, item: any): any;
    setBounds(bounds: HtBounds, options?: any): void;
    inValidateSize(): void;
    addEntities(entities: any): void;
    clear(): void;
}
export interface HtMapClassOptions {
    mapKey?: string;
}
