import { HtPosition, IPlaceHeat } from "ht-models";
import { IMarkersArray, SetDataConfig } from "../mixins/data-observable";
import { Observable } from "rxjs/Observable";
import { Subscription } from "rxjs/Subscription";
import { Entity, StyleFunct } from "../interfaces";
import { MapInstance } from "../map-utils/map-instance";
export declare class StopsHeatmap {
    name: string;
    styleFunct: StyleFunct;
    mapInstance: MapInstance;
    constructor(mapInstance: MapInstance);
    getPosition(item: IPlaceHeat): HtPosition;
}
export declare const StopsHeatmapTrace: {
    new (...args: any[]): {
        entities: {
            [id: string]: Entity<any>;
        };
        toIncludeInBounds: boolean;
        extendBounds(bounds: any): any;
        getBounds: (item: any, bounds: any) => any;
        mapInstance: MapInstance;
    };
} & {
    new (...args: any[]): {
        dataSub: Subscription;
        dataPageSource$: Observable<{
            count: number;
            next: string;
            previous: string;
            results: any[];
        }>;
        dataArraySource$: Observable<any[]>;
        data$: Observable<IMarkersArray>;
        _procData$(): (source$: Observable<{
            count: number;
            next: string;
            previous: string;
            results: any[];
        }>) => Observable<any>;
        getMarkersArray(array: any[], isNew?: boolean): any;
        setPageData$(data$: Observable<{
            count: number;
            next: string;
            previous: string;
            results: any[];
        }>, config?: SetDataConfig): void;
        setData$(data$: Observable<any[]>, config?: SetDataConfig): void;
        _initDataObserver(): void;
        clear(): void;
        trace: (data: any, map?: any) => any;
        isValidMapItems?: (data: any) => boolean;
        getPosition: (data: any) => HtPosition;
        mapInstance: MapInstance;
    };
} & {
    new (...args: any[]): {
        map: any;
        heatmap: any;
        forceExtendBounds: boolean;
        entities: any[];
        trace(items: any[], map?: any): boolean;
        getBounds(item: any, bounds?: any): any;
        clear(): void;
        getStyle: (styleType?: any) => object;
        getPosition: (data: any) => HtPosition;
        mapInstance: MapInstance;
    };
} & {
    new (...args: any[]): {
        defaultstyleFunct: StyleFunct;
        styleType: string;
        highlightedId: string;
        styleObj: object;
        getStyle(selectedStyleType?: string, fallbackStyle?: any): any;
        setStyleType(styleType?: string): void;
        setStyle({item, data}: {
            item: any;
            data: any;
        }): void;
        getStyleType(datum: any): string;
        setItemStyle(item: any, style: any): void;
        styleFunct: StyleFunct;
        name?: string;
        mapInstance: MapInstance;
        trackBy(datum: any): string;
        isAnimated?: boolean;
    };
} & {
    new (...args: any[]): {
        entities: {
            [id: string]: Entity<any>;
        };
        getEntity(id?: string): Entity<any>;
        trackBy(datum: any): any;
        trackAnimationBy(datum: any): any;
        mapInstance: MapInstance;
    };
} & typeof StopsHeatmap;
