import { HtBounds, HtMap, HtMapType, MapUtils } from "ht-map-wrapper";
import { ReplaySubject } from "rxjs/ReplaySubject";
import { Observable } from "rxjs/Observable";
export declare class MapInstance {
    map: HtMap | null;
    map$: ReplaySubject<HtMap | null>;
    clusters: any[];
    poppers: any[];
    itemsSet: any[];
    leafletSetBoundsOptions: {
        animate: boolean;
        duration: number;
    };
    googleSetBoundsOptions: {};
    setBoundsOptions: any;
    moveEvent: any;
    resetBoundsTimeout: any;
    constructor();
    readonly mapUtils: MapUtils;
    readonly mapType: HtMapType;
    addToItemsSet(item: any): void;
    renderMap(elem: HTMLElement | string, options?: {}): HtMap;
    setMap(map: HtMap | null): void;
    inValidateSize(): void;
    setMapType(mapType: HtMapType, key?: string): void;
    addCluster(cluster: any): void;
    addPopper(popper: any): void;
    removePopper(popper: any): void;
    listenMove(): void;
    getBounds(bounds: any, item: any): any;
    getItemsSetBounds(items: any[]): any;
    resetBounds(options?: any): void;
    setBounds(bounds: HtBounds, options?: any): boolean;
    onEvent$(type: string): Observable<any>;
    private mapEventHandler(type);
    private removeHandler(type);
}
