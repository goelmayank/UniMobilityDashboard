import { Constructor, Entities, Entity } from "../interfaces";
import { HtBounds } from "ht-map-wrapper";
import { MapInstance } from "../map-utils/map-instance";
export interface ITraceBase {
    getItem: (data) => any;
    onMouseLeave?: (trace) => void;
    onClick?: (trace) => void;
    onMouseEnter?: (trace) => void;
    setStyle: (entity: Entity) => void;
    update: (entity) => void;
    traceEffect?: () => void;
    removeAll: (entities) => void;
    getBounds: (item, bounds?) => HtBounds;
    removeItem: (item) => void;
    removeData: (data) => void;
    clearItem: (entity: Entity) => void;
    toNotSetMap?: boolean;
    toNotTraceItem?: boolean;
    trackBy(datum: any): string;
    entities: Entities<any>;
    mapInstance: MapInstance;
}
export interface ITraceConfig {
    toNotTraceItem?: boolean;
}
export declare function TraceMixin<TBase extends Constructor<ITraceBase>>(Base: TBase): {
    new (...args: any[]): {
        trace(data: any[], map?: any): boolean;
        traceItem(datum: any): void;
        addEvents(item: any, id: any): void;
        bustOldItem(): void;
        getItem: (data: any) => any;
        onMouseLeave?: (trace: any) => void;
        onClick?: (trace: any) => void;
        onMouseEnter?: (trace: any) => void;
        setStyle: (entity: Entity<any>) => void;
        update: (entity: any) => void;
        traceEffect?: () => void;
        removeAll: (entities: any) => void;
        getBounds: (item: any, bounds?: any) => any;
        removeItem: (item: any) => void;
        removeData: (data: any) => void;
        clearItem: (entity: Entity<any>) => void;
        toNotSetMap?: boolean;
        toNotTraceItem?: boolean;
        trackBy(datum: any): string;
        entities: Entities<any>;
        mapInstance: MapInstance;
    };
} & TBase;
