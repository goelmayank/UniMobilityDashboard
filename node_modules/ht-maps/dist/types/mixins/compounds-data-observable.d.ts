import { Constructor } from "../interfaces";
import { Subscription } from "rxjs/Subscription";
import { Observable } from "rxjs/Observable";
import { MapInstance } from "../map-utils/map-instance";
export interface ICompoundsDataObservableBase {
    trace: (data, map?) => any;
    isValidMapItems?: (data) => boolean;
    mapInstance: MapInstance;
}
export declare function CompoundDataObservableMixin<TBase extends Constructor<ICompoundsDataObservableBase>>(Base: TBase): {
    new (...args: any[]): {
        dataSub: Subscription;
        dataSource$: Observable<object>;
        data$: Observable<object>;
        compoundSetDataConfig: CompoundSetDataConfig;
        _procData$(): (source$: Observable<any>) => Observable<any>;
        setCompoundData$(data$: Observable<object>, config?: CompoundSetDataConfig): void;
        _initData$(): Observable<object>;
        _initDataObserver(): void;
        trace: (data: any, map?: any) => any;
        isValidMapItems?: (data: any) => boolean;
        mapInstance: MapInstance;
    };
} & TBase;
export interface CompoundSetDataConfig {
    hide$?: Observable<any>;
    filter$?: Observable<string | null>;
    roots?: string[];
    resetMap$?: Observable<any>;
    highlighted$?: Observable<string | null>;
}
