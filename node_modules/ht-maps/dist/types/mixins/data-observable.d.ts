import { Constructor } from "../interfaces";
import { Subscription } from "rxjs/Subscription";
import { Observable } from "rxjs/Observable";
import { HtPosition } from "ht-models";
import { Page } from "ht-models";
import { MapInstance } from "../map-utils/map-instance";
export interface IMarkersArray {
    valid: any[];
    invalid: any[];
    isNew: boolean;
}
export interface IDataObservableBase {
    trace: (data, map?) => any;
    isValidMapItems?: (data) => boolean;
    getPosition: (data) => HtPosition;
    mapInstance: MapInstance;
}
export declare function DataObservableMixin<TBase extends Constructor<IDataObservableBase>>(Base: TBase): {
    new (...args: any[]): {
        dataSub: Subscription;
        dataPageSource$: Observable<Page<any>>;
        dataArraySource$: Observable<any[]>;
        data$: Observable<IMarkersArray>;
        _procData$(): (source$: Observable<Page<any>>) => Observable<any>;
        getMarkersArray(array: any[], isNew?: boolean): any;
        setPageData$(data$: Observable<Page<any>>, config?: SetDataConfig): void;
        setData$(data$: Observable<any[]>, config?: SetDataConfig): void;
        _initDataObserver(): void;
        clear(): void;
        trace: (data: any, map?: any) => any;
        isValidMapItems?: (data: any) => boolean;
        getPosition: (data: any) => HtPosition;
        mapInstance: MapInstance;
    };
} & TBase;
export interface SetDataConfig {
    hide$?: Observable<any>;
}
