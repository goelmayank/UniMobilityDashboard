import { Constructor, Entities } from "../interfaces";
import { HtPosition } from "ht-models";
import { MapInstance } from "../map-utils/map-instance";
import { IPathBearingTime } from "ht-models";
import { HtCustomEvent, IEventSub } from "ht-utility";
export interface IMarkersBase {
    getStyle: (styleType?) => object;
    getPosition: (data) => HtPosition;
    forceExtendBounds?: boolean;
    mapInstance: MapInstance;
    toNotSetMap?: boolean;
    trackBy(datum: any): string;
}
export declare function MarkersMixin<TBase extends Constructor<IMarkersBase>>(Base: TBase): {
    new (...args: any[]): {
        entities: Entities<any>;
        event: HtCustomEvent;
        htShow(item: any): string;
        getItem(data: any): any;
        getBounds(item: any, bounds?: any): any;
        update({item, data}: {
            item: any;
            data: any;
        }, positionBearing?: IPathBearingTime): void;
        onEntityUpdate(id: any): {
            subscribe: (cb: any) => IEventSub;
        };
        removeItem(item: any): void;
        removeAll(entities: any): void;
        clear(): void;
        clearItem({item, data}: {
            item: any;
            data: any;
        }): void;
        removeData(data: any): void;
        getStyle: (styleType?: any) => object;
        getPosition: (data: any) => HtPosition;
        forceExtendBounds?: boolean;
        mapInstance: MapInstance;
        toNotSetMap?: boolean;
        trackBy(datum: any): string;
    };
} & TBase;
