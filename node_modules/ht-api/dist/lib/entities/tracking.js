"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = require("./base");
var operators_1 = require("rxjs/operators");
var HtTrackingApi = (function (_super) {
    __extends(HtTrackingApi, _super);
    function HtTrackingApi(request) {
        var _this = _super.call(this, request, "actions") || this;
        _this.name = "Tracking";
        _this.trackType = {
            shortCode: "short_code",
            lookupId: 'lookup_id',
            collectionId: 'collection_id',
            actionId: 'id'
        };
        return _this;
    }
    HtTrackingApi.prototype.track = function (id, idType, token) {
        if (idType === void 0) { idType = 'shortCode'; }
        var trackKey = this.trackType[idType];
        if (trackKey) {
            var query = (_a = {}, _a[trackKey] = id, _a);
            var path = this.base + "/track/";
            return this.api$(path, query, { token: token }).pipe(operators_1.map(function (data) {
                var actions = [];
                data.results.forEach(function (result) {
                    var actionsWithAccount = result.actions.map(function (action) {
                        return __assign({}, action, { account: result.account });
                    });
                    actions.push.apply(actions, actionsWithAccount);
                });
                return actions;
            }));
        }
        else {
            console.error('Invalid Tracking type ' + idType);
        }
        var _a;
    };
    return HtTrackingApi;
}(base_1.HtBaseApi));
exports.HtTrackingApi = HtTrackingApi;
//# sourceMappingURL=tracking.js.map