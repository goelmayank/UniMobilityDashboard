import { HtQuerySerialize } from 'ht-utility';
import { fromPromise } from 'rxjs/observable/fromPromise';
import { expand, map } from 'rxjs/operators';
import { empty } from 'rxjs/observable/empty';

var HtToken = (function () {
    function HtToken(token) {
        if (token === void 0) { token = ""; }
        this.token = token;
    }
    Object.defineProperty(HtToken.prototype, "token", {
        get: function () {
            return this._token;
        },
        set: function (token) {
            this._token = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtToken.prototype, "tempToken", {
        get: function () {
            return this._tempToken;
        },
        set: function (token) {
            this._groupToken = "";
            this._tempToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtToken.prototype, "groupToken", {
        get: function () {
            return this._groupToken;
        },
        set: function (token) {
            this._groupToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtToken.prototype, "currentToken", {
        get: function () {
            return this.groupToken || this.tempToken || this.token;
        },
        enumerable: true,
        configurable: true
    });
    return HtToken;
}());

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtRequest = (function () {
    function HtRequest(token) {
        this.baseUrl = "https://api.hypertrack.com/api/v1/";
        this.isAdmin = false;
        this.defaultHeader = { "X-Hypertrack-Client": 'js-sdk' };
        this.tokenServie = new HtToken(token);
    }
    HtRequest.prototype.setClientType = function (clientType) {
        this.defaultHeader = __assign({}, this.defaultHeader, { "X-Hypertrack-Client": clientType });
    };
    HtRequest.prototype.setBaseUrl = function (baseUrl) {
        this.baseUrl = baseUrl;
    };
    
    Object.defineProperty(HtRequest.prototype, "token", {
        get: function () {
            return this.tokenServie.token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtRequest.prototype, "currentToken", {
        get: function () {
            var token = this.tokenServie.currentToken;
            return token;
        },
        enumerable: true,
        configurable: true
    });
    HtRequest.prototype.headerObj = function (token) {
        return __assign({ Authorization: "token " + (token || this.currentToken) }, this.defaultHeader);
    };
    
    HtRequest.prototype.adminHeaderObj = function () {
        return __assign({ Authorization: "token " + this.token }, this.defaultHeader);
    };
    HtRequest.prototype.headerStrings = function () {
        return ["Authorization", "token " + this.currentToken];
    };
    HtRequest.prototype.url = function (url, query, isPure) {
        if (query === void 0) { query = {}; }
        if (isPure === void 0) { isPure = false; }
        if (isPure)
            return url;
        var string = HtQuerySerialize(query);
        return this.baseUrl + url + "?" + string;
    };
    HtRequest.prototype.getObservable = function (url, options) {
        if (options === void 0) { options = {}; }
        var p = this.getFetch(url, options);
        return fromPromise(p);
    };
    HtRequest.prototype.postObservable = function (url, body, options) {
        if (options === void 0) { options = {}; }
        var p = this.postFetch(url, body, options);
        return fromPromise(p);
    };
    HtRequest.prototype.api$ = function (url, query, options) {
        if (options === void 0) { options = {}; }
        url = this.url(url, query, options.pureUrl);
        var headers = options.isAdmin ? this.adminHeaderObj() : this.headerObj(options.token);
        return this.getObservable(url, { headers: headers });
    };
    HtRequest.prototype.postApi$ = function (url, body, options) {
        url = this.url(url);
        var headers = options.isAdmin ? this.adminHeaderObj() : this.headerObj(options.token);
        return this.postObservable(url, body, { headers: headers });
    };
    HtRequest.prototype.getFetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, options).then(function (res) {
            return res.json();
        });
    };
    HtRequest.prototype.postFetch = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, __assign({ method: "POST", body: JSON.stringify(body) }, options)).then(function (res) { return res.json(); });
    };
    return HtRequest;
}());

var htRequestService = (function () {
    var instance;
    return {
        getInstance: function (token) {
            if (!instance) {
                instance = new HtRequest(token);
            }
            return instance;
        },
        setInstance: function (newintance) {
            if (instance) {
                var tokenService = instance.tokenServie;
                newintance.tokenServie = tokenService;
            }
            instance = newintance;
        }
    };
})();

var __assign$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtBaseApi = (function () {
    function HtBaseApi(request, base) {
        this.request = request;
        this.base = base;
    }
    HtBaseApi.prototype.get = function (id, query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/" + id + "/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.index = function (query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.summary = function (query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/summary/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.heatmap = function (query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/heatmap/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.api$ = function (path, query, options) {
        if (query === void 0) { query = {}; }
        if (options === void 0) { options = {}; }
        return this.request.api$(path, query, options);
    };
    HtBaseApi.prototype.postApi$ = function (path, body, options) {
        if (options === void 0) { options = {}; }
        return this.request.postApi$(path, body, options);
    };
    // getReqFromTail<T>(tail, query = {}, options = {}): Observable<T> {
    //   return this.request.api$(this.base + tail, query, options)
    // }
    //
    // postReqFromTail<T>(tail, body, options?): Observable<T> {
    //   return this.request.postApi$(this.base + tail, body, options)
    // }
    HtBaseApi.prototype.placeline = function (id, query, token) {
        if (query === void 0) { query = {}; }
        var tail = this.base + ("/" + id + "/placeline/");
        return this.api$(tail, query, { token: token });
    };
    HtBaseApi.prototype.allPages = function (api$, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return api$.pipe(expand(function (data) {
            return data["next"]
                ? _this.request.api$(data["next"], {}, __assign$1({}, options, { pureUrl: true })).pipe(map(function (newData) {
                    return __assign$1({}, newData, { results: data.results.concat(newData.results) });
                }))
                : empty();
        }));
    };
    HtBaseApi.prototype.analytics = function (query) {
        return empty();
    };
    return HtBaseApi;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtUsersApi = (function (_super) {
    __extends(HtUsersApi, _super);
    function HtUsersApi(request) {
        var _this = _super.call(this, request, "users") || this;
        _this.name = "user";
        return _this;
    }
    HtUsersApi.prototype.analytics = function (query, token) {
        var path = this.base + "/analytics/";
        return this.api$(path, query, { token: token });
    };
    return HtUsersApi;
}(HtBaseApi));

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtActionsApi = (function (_super) {
    __extends$1(HtActionsApi, _super);
    function HtActionsApi(request) {
        var _this = _super.call(this, request, "actions") || this;
        _this.name = "Action";
        return _this;
    }
    HtActionsApi.prototype.graph = function (query, token) {
        var path = this.base + "/graph/";
        return this.api$(path, query, { token: token }).pipe(map(function (obj) {
            return Object.keys(obj).reduce(function (dataArray, key) {
                dataArray.push(obj[key]);
                return dataArray;
            }, []).sort(function (a, b) {
                return new Date(a.created_date).getTime() - new Date(b.created_date).getTime();
            });
        }));
    };
    return HtActionsApi;
}(HtBaseApi));
var htActionsApi = function (request) { return new HtActionsApi(request); };

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtGroupsApi = (function (_super) {
    __extends$2(HtGroupsApi, _super);
    function HtGroupsApi(request) {
        var _this = _super.call(this, request, "groups") || this;
        _this.name = "group";
        return _this;
    }
    HtGroupsApi.prototype.children = function (groupId, token) {
        var query = { parent_group_id: groupId };
        return this.getAll(query, token);
    };
    HtGroupsApi.prototype.root = function (token) {
        var query = { has_parent: false };
        return this.getAll(query, token);
    };
    HtGroupsApi.prototype.getAll = function (query, token) {
        return this.allPages(this.index(query, token));
    };
    return HtGroupsApi;
}(HtBaseApi));

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtAccountUserApi = (function (_super) {
    __extends$3(HtAccountUserApi, _super);
    function HtAccountUserApi(request) {
        var _this = _super.call(this, request, "account_users") || this;
        _this.name = "user";
        return _this;
    }
    HtAccountUserApi.prototype.login = function (user) {
        var tail = "login/";
        return this.request.postObservable(this.request.baseUrl + tail, user);
    };
    HtAccountUserApi.prototype.get = function (id, token) {
        var path = this.base + "/" + id + "/";
        return this.api$(path, {}, { isAdmin: true });
    };
    HtAccountUserApi.prototype.memberships = function (id, query, options) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/" + id + "/memberships/";
        return this.api$(path, query, options);
    };
    HtAccountUserApi.prototype.membershipsAll = function (id, query, token) {
        var options = { isAdmin: true, token: token };
        return this.allPages(this.memberships(id, query, options), options);
    };
    return HtAccountUserApi;
}(HtBaseApi));

var HtApi = (function () {
    function HtApi(token) {
        this.request = htRequestService.getInstance();
        if (token)
            this.request.tokenServie.token = token;
        this.users = new HtUsersApi(this.request);
        this.actions = new HtActionsApi(this.request);
        this.groups = new HtGroupsApi(this.request);
        this.accountUser = new HtAccountUserApi(this.request);
    }
    
    HtApi.prototype.setToken = function (token) {
        this.request.tokenServie.token = token;
    };
    return HtApi;
}());

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$2 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtTrackingApi = (function (_super) {
    __extends$4(HtTrackingApi, _super);
    function HtTrackingApi(request) {
        var _this = _super.call(this, request, "actions") || this;
        _this.name = "Tracking";
        _this.trackType = {
            shortCode: "short_code",
            lookupId: 'lookup_id',
            collectionId: 'collection_id',
            actionId: 'id'
        };
        return _this;
    }
    HtTrackingApi.prototype.track = function (id, idType, token) {
        if (idType === void 0) { idType = 'shortCode'; }
        var trackKey = this.trackType[idType];
        if (trackKey) {
            var query = (_a = {}, _a[trackKey] = id, _a);
            var path = this.base + "/track/";
            return this.api$(path, query, { token: token }).pipe(map(function (data) {
                var actions = [];
                data.results.forEach(function (result) {
                    var actionsWithAccount = result.actions.map(function (action) {
                        return __assign$2({}, action, { account: result.account });
                    });
                    actions.push.apply(actions, actionsWithAccount);
                });
                return actions;
            }));
        }
        else {
            console.error('Invalid Tracking type ' + idType);
        }
        var _a;
    };
    return HtTrackingApi;
}(HtBaseApi));

export { htRequestService, HtApi, HtRequest, HtToken, HtAccountUserApi, HtActionsApi, htActionsApi, HtGroupsApi, HtUsersApi, HtBaseApi, HtTrackingApi };
