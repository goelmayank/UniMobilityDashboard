var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { HtQuerySerialize } from "ht-utility";
import { fromPromise } from "rxjs/observable/fromPromise";
import { HtToken } from "./token";
var HtRequest = (function () {
    function HtRequest(token) {
        this.baseUrl = "https://api.hypertrack.com/api/v1/";
        this.isAdmin = false;
        this.defaultHeader = { "X-Hypertrack-Client": 'js-sdk' };
        this.tokenServie = new HtToken(token);
    }
    HtRequest.prototype.setClientType = function (clientType) {
        this.defaultHeader = __assign({}, this.defaultHeader, { "X-Hypertrack-Client": clientType });
    };
    HtRequest.prototype.setBaseUrl = function (baseUrl) {
        this.baseUrl = baseUrl;
    };
    ;
    Object.defineProperty(HtRequest.prototype, "token", {
        get: function () {
            return this.tokenServie.token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtRequest.prototype, "currentToken", {
        get: function () {
            var token = this.tokenServie.currentToken;
            return token;
        },
        enumerable: true,
        configurable: true
    });
    HtRequest.prototype.headerObj = function (token) {
        return __assign({ Authorization: "token " + (token || this.currentToken) }, this.defaultHeader);
    };
    ;
    HtRequest.prototype.adminHeaderObj = function () {
        return __assign({ Authorization: "token " + this.token }, this.defaultHeader);
    };
    HtRequest.prototype.headerStrings = function () {
        return ["Authorization", "token " + this.currentToken];
    };
    HtRequest.prototype.url = function (url, query, isPure) {
        if (query === void 0) { query = {}; }
        if (isPure === void 0) { isPure = false; }
        if (isPure)
            return url;
        var string = HtQuerySerialize(query);
        return this.baseUrl + url + "?" + string;
    };
    HtRequest.prototype.getObservable = function (url, options) {
        if (options === void 0) { options = {}; }
        var p = this.getFetch(url, options);
        return fromPromise(p);
    };
    HtRequest.prototype.postObservable = function (url, body, options) {
        if (options === void 0) { options = {}; }
        var p = this.postFetch(url, body, options);
        return fromPromise(p);
    };
    HtRequest.prototype.api$ = function (url, query, options) {
        if (options === void 0) { options = {}; }
        url = this.url(url, query, options.pureUrl);
        var headers = options.isAdmin ? this.adminHeaderObj() : this.headerObj(options.token);
        return this.getObservable(url, { headers: headers });
    };
    HtRequest.prototype.postApi$ = function (url, body, options) {
        url = this.url(url);
        var headers = options.isAdmin ? this.adminHeaderObj() : this.headerObj(options.token);
        return this.postObservable(url, body, { headers: headers });
    };
    HtRequest.prototype.getFetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, options).then(function (res) {
            return res.json();
        });
    };
    HtRequest.prototype.postFetch = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, __assign({ method: "POST", body: JSON.stringify(body) }, options)).then(function (res) { return res.json(); });
    };
    return HtRequest;
}());
export { HtRequest };
//# sourceMappingURL=request.js.map