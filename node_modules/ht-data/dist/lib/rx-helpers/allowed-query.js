"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var combineLatest_1 = require("rxjs/observable/combineLatest");
var of_1 = require("rxjs/observable/of");
exports.AllowedQueryKeys$ = function (allowedQueryKeys) {
    return function (queryStore$) {
        if (allowedQueryKeys && allowedQueryKeys.length) {
            var keys$ = allowedQueryKeys.map(function (key) {
                return queryStore$.pipe(operators_1.map(function (store) { return (store ? store[key] : null); }), operators_1.distinctUntilChanged(), operators_1.map(function (value) {
                    return value ? (_a = {}, _a[key] = value, _a) : null;
                    var _a;
                }));
            });
            return combineLatest_1.combineLatest.apply(void 0, keys$).pipe(operators_1.map(function (obsArray) {
                console.log(obsArray, "arr");
                return obsArray.reduce(function (acc, query) {
                    return query ? __assign({}, acc, query) : acc;
                }, {});
            }));
        }
        else if (allowedQueryKeys) {
            return of_1.of({});
        }
        else {
            return queryStore$;
        }
    };
};
exports.AllowedQueryMap = function (allowedQueryMaps) {
    return function (queryStore$) {
        if (allowedQueryMaps && allowedQueryMaps.length) {
            var keys$ = allowedQueryMaps.map(function (queryMap) {
                return queryStore$.pipe(operators_1.map(function (store) { return (store ? store[queryMap.key] : null); }), operators_1.scan(function (acc, value) {
                    return { value: value, oldValue: acc.value };
                }, { value: "_no_val", oldValue: "_" }), operators_1.filter(function (obj) {
                    if (obj.oldValue == "_no_val") {
                        return true;
                    }
                    else if (!obj.oldValue || !obj.value) {
                        return false;
                    }
                    else if (obj.oldValue == obj.value) {
                        return false; //distinct unntil changed
                    }
                    else if (queryMap.filter) {
                        return queryMap.filter(obj.value, obj.oldValue);
                    }
                    else {
                        return true;
                    }
                }), operators_1.map(function (obj) {
                    return obj.value ? (_a = {}, _a[queryMap.key] = obj.value, _a) : null;
                    var _a;
                }));
            });
            return combineLatest_1.combineLatest.apply(void 0, keys$).pipe(operators_1.map(function (obsArray) {
                // console.log(obsArray, "arr");
                return obsArray.reduce(function (acc, query) {
                    return query ? __assign({}, acc, query) : acc;
                }, {});
            }));
            // return queryStore$
        }
        else if (allowedQueryMaps) {
            return of_1.of({});
        }
        else {
            return queryStore$;
        }
    };
};
//# sourceMappingURL=allowed-query.js.map