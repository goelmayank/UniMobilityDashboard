"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rollup_plugin_node_resolve_1 = require("rollup-plugin-node-resolve");
var rollup_plugin_commonjs_1 = require("rollup-plugin-commonjs");
var lodash_camelcase_1 = require("lodash.camelcase");
var globals = [];
exports.config = function (libraryName, pkg) {
    return {
        input: "dist/es/" + libraryName + ".js",
        output: [
            { file: pkg.main, name: lodash_camelcase_1.default(libraryName), format: 'umd' },
            { file: pkg.module, format: 'es' },
        ],
        sourcemap: true,
        // Indicate here external modules you don't wanna include in your bundle (i.e.: 'lodash')
        external: Object.keys(globals),
        globals: globals,
        watch: {
            include: 'dist/es/**',
        },
        plugins: [
            {
                name: 'replace moment imports',
                transform: function (code) {
                    return ({
                        code: code.replace(/import\s*\*\s*as\s*moment/g, 'import moment'),
                        map: { mappings: '' }
                    });
                }
            },
            // Allow bundling cjs modules (unlike webpack, rollup doesn't understand cjs)
            rollup_plugin_commonjs_1.default(),
            // Allow node_modules resolution, so you can use 'external' to control
            // which external modules to include in the bundle
            // https://github.com/rollup/rollup-plugin-node-resolve#usage
            rollup_plugin_node_resolve_1.default(),
        ],
    };
};
//# sourceMappingURL=rollup.config.js.map