"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var underscore_1 = require("underscore");
function UpdateSubAccountOfAccount(account, updatedSubAccount, tokenType) {
    var subAccounts = underscore_1.default.map(account.sub_accounts, function (subAccount) {
        if (subAccount.type == tokenType) {
            return __assign({}, subAccount, updatedSubAccount);
        }
        else {
            return subAccount;
        }
    });
    return __assign({}, account, { sub_accounts: subAccounts });
}
exports.UpdateSubAccountOfAccount = UpdateSubAccountOfAccount;
// export function UpdateAccountOfAccountUser(accountUser: IAccountUser, account: IAccount, config): IAccountUser {
//   let memberships = _.map(accountUser.memberships, (member: IMembership) => {
//     let isMember = IsCurrentMember(member, config.currentToken, config.tokenType);
//     return isMember ? {...member, account: account} : member;
//   });
//   let defaultAccount = account.id == accountUser.default_account.id ? account : accountUser.default_account;
//   return {...accountUser, memberships: memberships, default_account: defaultAccount};
// }
// export function GetAccountFromAccountUser (accountUser: IAccountUser, currentToken: string, tokenType: 'test' | 'production') {
//   if(!accountUser) return null;
//   if(isCurrentAccount(accountUser.default_account, currentToken, tokenType)) {
//     return accountUser.default_account;
//   }
//   let membership = _.find(accountUser.memberships, (member: IMembership) => {
//     return isCurrentAccount(member.account, currentToken, tokenType);
//   });
//   return membership ? membership.account : null
// }
function isCurrentAccount(account, token, tokenType) {
    return GetSecretToken(account, tokenType) == token;
}
exports.isCurrentAccount = isCurrentAccount;
function IsCurrentMember(member, token, tokenType) {
    return GetSecretToken(member.account, tokenType) == token;
}
exports.IsCurrentMember = IsCurrentMember;
function GetSecretToken(account, tokenType) {
    return exports.getToken(getSubAccountToken(account, tokenType), "secret");
}
exports.GetSecretToken = GetSecretToken;
exports.getToken = function (subAccounts, type) {
    var tokenObject = underscore_1.default.find(subAccounts, function (token) {
        return token.scope == type;
    });
    return tokenObject ? tokenObject.key : null;
};
function getAccountFromAccountUserId(accountUser, accountId) {
    if (!accountUser)
        return null;
    if (accountUser.default_account.id == accountId) {
        return accountUser.default_account;
    }
    else {
        var membership = underscore_1.default.find(accountUser.memberships, function (member) {
            return (member.account.id = accountId);
        });
        return membership ? membership.account : null;
    }
}
exports.getAccountFromAccountUserId = getAccountFromAccountUserId;
function getSubAccountToken(account, type) {
    return underscore_1.default.find(account.sub_accounts, function (subAccount) {
        return subAccount.type == type;
    }).tokens;
}
exports.getAuthHeaders = function (token) {
    return { Authorization: "token " + token };
};
//# sourceMappingURL=account-user.js.map