"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var event_1 = require("./event");
var ht_utility_1 = require("ht-utility");
var underscore_1 = require("underscore");
var common_1 = require("../common");
var HtPlaceline = (function () {
    function HtPlaceline(userData) {
        this.userData = userData;
    }
    HtPlaceline.prototype.getPlacelineSegments = function () {
        var _this = this;
        var userData = this.userData;
        var _a = this.createActivitiesSegments(userData), lastSegment = _a.lastSegment, activitySegments = _a.activitySegments;
        var actionsMarks = this.createActionsMarks(userData.actions);
        var eventsMarks = underscore_1.default.map(userData.events, function (event) {
            return _this.createEventMark(event);
        });
    };
    HtPlaceline.prototype.createActivitiesSegments = function (userData) {
        var _this = this;
        var segments = userData.segments;
        var _a = underscore_1.default.reduce(segments.concat([{}]), function (_a, segment) {
            var lastSegment = _a.lastSegment, activitySegments = _a.activitySegments;
            var nextLastSegment = segment;
            if (lastSegment) {
                if (segment.id) {
                    var activitySegment = _this.createActivitySegment(lastSegment);
                    if (activitySegment)
                        activitySegments.push(activitySegment);
                }
                else {
                    //last segment
                    nextLastSegment = _this.getLastSegment(segment, userData.last_heartbeat_at);
                }
            }
            return { lastSegment: nextLastSegment, activitySegments: activitySegments };
        }, { activitySegments: [], lastSegment: null }), lastSegment = _a.lastSegment, activitySegments = _a.activitySegments;
        return { lastSegment: lastSegment, activitySegments: activitySegments };
    };
    HtPlaceline.prototype.createActivitySegment = function (segment) {
        var placelineTime = segment.started_at;
        var activityText = this.getActivityText(segment);
        var activityAddress = this.getActivityPlaceAddress(segment);
        var end = segment.ended_at ? new Date(segment.ended_at).getTime() : null;
        return __assign({ placelineTime: placelineTime,
            activityText: activityText }, this.getActivityStyleClass(segment), { segmentId: segment.id, segment: segment, start: new Date(placelineTime).getTime(), end: end });
    };
    HtPlaceline.prototype.createEventSegment = function (eventMark, segment) {
        return __assign({}, segment, { placelineTime: eventMark.event.recorded_at }, eventMark);
    };
    HtPlaceline.prototype.createActionSegment = function (actionMark, segment) {
        return __assign({}, segment, { placelineTime: actionMark.actionTime }, actionMark);
    };
    HtPlaceline.prototype.createActionsMarks = function (actions) {
        var _this = this;
        var actionMarksObj = underscore_1.default.reduce(actions, function (acc, action) {
            acc.actionCountMap = _this.setActionCountMap(action, acc.actionCountMap);
            var assign = _this.getActionMark(action, acc.actionCountMap, false, false);
            if (assign.actionTime)
                acc.push(assign);
            var end = _this.getActionMark(action, acc.actionMap, true, !!action.display.ended_at);
            acc.actionMarks.push(end);
            return acc;
        }, { actionMarks: [], actionCountMap: {} });
        return actionMarksObj.actionMarks;
    };
    HtPlaceline.prototype.createEventMark = function (event) {
        return { event: event, display: event_1.htEvent(event).getEventDisplay() };
    };
    HtPlaceline.prototype.getLastSegment = function (lastSeg, lastHearbeatAt) {
        // let last = {time: lastSeg['last_heartbeat_at']};
        var pipeClass = "";
        var placelineTime;
        var isLive = false;
        if (lastSeg.ended_at) {
            placelineTime = lastSeg.ended_at;
        }
        else {
            isLive = true;
            placelineTime = lastHearbeatAt;
        }
        return __assign({ placelineTime: placelineTime,
            isLive: isLive, isLast: true, segmentId: lastSeg.id }, this.getActivityStyleClass(lastSeg));
    };
    //helpers
    HtPlaceline.prototype.getActivityStyleClass = function (segment) {
        var activityClass = this.getActivityClass(segment);
        return this.getActivityStyle(activityClass);
    };
    HtPlaceline.prototype.getActivityStyle = function (activityClass) {
        if (activityClass === void 0) { activityClass = "no-info"; }
        return {
            activityBg: activityClass + "-bg",
            activityBorder: activityClass + "-border",
            activityClass: activityClass,
            activityColor: activityClass + "-color"
        };
    };
    HtPlaceline.prototype.getActivityClass = function (segment) {
        var type = segment.type;
        if (type == "location_void") {
            return "warning";
        }
        return type == "stop" ? "stop" : "trip";
    };
    HtPlaceline.prototype.setActionCountMap = function (action, actionCountMap) {
        return common_1.CommonFunctions.setEntityCountMap(action, actionCountMap, "type");
    };
    HtPlaceline.prototype.getActionMark = function (action, actionMap, isEnd, isDone) {
        return {
            actionText: ht_utility_1.NameCase(action.type) + " scheduled",
            actionTime: action.eta || null,
            actionDot: ht_utility_1.NameCase(action.type[0]) + actionMap[action.id],
            isEnd: isEnd,
            isDone: isDone,
            action: action
        };
    };
    HtPlaceline.prototype.getActivityText = function (segment) {
        if (segment.activity) {
            return segment.activity;
        }
        else if (segment.type == "stop") {
            return "Stop";
        }
        else if (segment.reason) {
            return this.getLocationVoidText(segment);
        }
        else {
            return ht_utility_1.NameCase(segment.type);
        }
    };
    HtPlaceline.prototype.getActivityPlaceAddress = function (segment) {
        if (segment.type == "stop" && segment.place && segment.place.locality) {
            return segment.place.locality;
        }
        return "";
    };
    HtPlaceline.prototype.getLocationVoidText = function (segment) {
        switch (segment.reason) {
            case "disabled":
                return "Location disabled";
            case "no_permission":
                return "Location permission unavailable";
            case "unknown":
                return "Location unavailable";
            default:
                return "Location unavailable";
        }
    };
    HtPlaceline.prototype.getEventDisplay = function (event) {
        switch (event.type) {
            case "tracking.started":
                return {
                    text: "Tracking started",
                    subtext: ""
                };
            case "tracking.ended":
                return {
                    text: "Tracking ended",
                    subtext: ""
                };
            // case 'device.location.disabled':
            //   return {
            //     text: 'Location disabled',
            //     subtext: ''
            //   };
            // case 'device.location.enabled':
            //   return {
            //     text: 'Location enabled',
            //     subtext: ''
            //   };
            // case 'device.location_permission.disabled':
            //   return {
            //     text: 'Location permission disabled',
            //     subtext: ''
            //   };
            // case 'device.location_permission.enabled':
            //   return {
            //     text: 'Location permission enabled',
            //     subtext: ''
            //   };
            case "device.secondary.ignored":
                return {
                    text: "Secondary device ignored",
                    subtext: ""
                };
        }
    };
    HtPlaceline.prototype.getGapSegment = function (segment, lastSeg) {
        var gaps = [];
        if (!lastSeg)
            return [];
        if (segment.started_at && lastSeg.ended_at) {
            var endMin = ht_utility_1.GetMinute(segment.started_at);
            var startMin = ht_utility_1.GetMinute(lastSeg.ended_at);
            var duration = (new Date(segment.started_at).getTime() -
                new Date(lastSeg.ended_at).getTime()) /
                1000;
            if (endMin != startMin && startMin < endMin) {
                var gap = __assign({}, this.getActivityStyle("no-info"), { time: lastSeg.ended_at, activityText: "No information", events: [], duration: duration, id: "asd" });
                gaps.push(gap);
            }
        }
        return gaps;
    };
    return HtPlaceline;
}());
exports.HtPlaceline = HtPlaceline;
exports.htPlaceline = function (userData) { return new HtPlaceline(userData); };
//# sourceMappingURL=placeline.js.map