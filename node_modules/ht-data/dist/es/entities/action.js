var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import _ from "underscore";
import { GetDateRangeQuery } from "ht-utility";
import { addSeconds } from "date-fns";
var HtAction = (function () {
    function HtAction(data) {
        this.data = data;
        this.types = ["delivery", "pickup", "task", "visit", "stopover", "trip"];
        this.sortingQueryMap = {
            assigned_at: "Assigned",
            completed_at: "Completed",
            type: "Type",
            user__name: "User name",
            status: "Status"
        };
        this.ontimeFilters = [
            { event_flags: "action.delayed" },
            { event_flags: "action.completed_late" }
        ];
        this.statusQueryMap = {
            created: "Not yet started",
            "assigned,started": "Assigned",
            "started,assigned": "Assigned",
            completed: "Completed"
        };
        this.ontimeQueryMap = {
            "action.delayed": "Running delayed",
            "action.completed_late": "Completed late"
        };
        this.markerFilterMap = {
            "assigned,started": function (action) {
                return action.status == "assigned" || action.status == "started";
            },
            "started,assigned": function (action) {
                return action.status == "assigned" || action.status == "started";
            },
            completed: function (action) {
                return action.status == "completed";
            },
            created: function (action) {
                return action.status == "created";
            }
        };
    }
    Object.defineProperty(HtAction.prototype, "filterQueryMap", {
        get: function () {
            return __assign({}, this.statusQueryMap, this.ontimeQueryMap);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtAction.prototype, "sortings", {
        get: function () {
            return Object.keys(this.sortingQueryMap);
        },
        enumerable: true,
        configurable: true
    });
    HtAction.prototype.getStatusString = function (status) {
        return this.statusQueryMap[status] || status;
    };
    HtAction.prototype.getOntimeString = function (value) {
        return this.ontimeQueryMap[value] || value;
    };
    HtAction.prototype.getFilterString = function (value) {
        return this.filterQueryMap[value] || value;
    };
    HtAction.prototype.getSortingString = function (value) {
        return this.sortingQueryMap[value] || value;
    };
    HtAction.prototype.getMarkerFilter = function (key) {
        var filter = this.markerFilterMap[key];
        if (key) {
            if (filter) {
                return filter;
            }
            else {
                return function () { return false; };
            }
        }
        else {
            return function () { return true; };
        }
    };
    HtAction.prototype.getMarkerSeached = function (key) {
        return function (action) {
            return ((action.lookup_id && action.lookup_id.indexOf(key) > -1) ||
                (action.user && action.user.name.indexOf(key) > -1));
        };
    };
    HtAction.prototype.isAwayFromExpected = function () {
        var action = this.data;
        if (action.expected_place && action.event_flags) {
            var flag = _.find(action.event_flags, function (flag) {
                return (flag["type"] == "action.completed_at_different_place_than_expected");
            });
            return !!flag;
        }
        return false;
    };
    HtAction.prototype.isValidMarker = function (action) {
        action = action || this.data;
        return !!((action.expected_place && action.expected_place.location) ||
            (action.completed_place && action.completed_place.location));
    };
    HtAction.prototype.getDateRangeQuery = function (query) {
        return GetDateRangeQuery(query, "created_at");
    };
    HtAction.prototype.getPositionsObject = function () {
        var completedPosition = this.getCompletedPosition();
        var expectedPosition = this.getExpectedPosition();
        var isAwayFromExpected = this.isAwayFromExpected();
        return {
            completedPosition: completedPosition,
            expectedPosition: expectedPosition,
            isAwayFromExpected: isAwayFromExpected,
            hasEnded: this.hasEnded(),
            position: completedPosition || expectedPosition
        };
    };
    HtAction.prototype.getCompletedPosition = function () {
        var action = this.data;
        if (action && action.completed_place && action.completed_place.location) {
            var compLoc = action.completed_place.location.coordinates;
            var lat = compLoc[1];
            var lng = compLoc[0];
            return { lat: lat, lng: lng };
            // return [compLoc[1], compLoc[0]]
        }
        return null;
    };
    HtAction.prototype.getExpectedPosition = function () {
        var action = this.data;
        if (action && action.expected_place && action.expected_place.location) {
            var expLoc = action.expected_place.location.coordinates;
            var lat = expLoc[1];
            var lng = expLoc[0];
            return { lat: lat, lng: lng };
            // return [expLoc[1], expLoc[0]]
        }
        return null;
    };
    HtAction.prototype.getPosition = function () {
        return this.getPositionsObject().position;
    };
    HtAction.prototype.hasEnded = function () {
        return !!this.data.display.ended_at;
    };
    HtAction.prototype.getETATimestamp = function () {
        var action = this.data;
        if (action.display.duration_remaining) {
            return addSeconds(new Date(), action.display.duration_remaining).toISOString();
        }
        return null;
    };
    HtAction.prototype.getHeatmapLatlng = function (item) {
        return {
            lat: item.completed_place__location[1],
            lng: item.completed_place__location[0],
        };
    };
    HtAction.prototype.getHeatLatlngs = function (items) {
        return _.reduce(items, function (acc, place) {
            var placeLatlng = [place.completed_place__location[1], place.completed_place__location[0]];
            var placeArray = Array(place.num_actions).fill(placeLatlng);
            return acc.concat(placeArray);
        }, []);
    };
    return HtAction;
}());
export { HtAction };
export var htAction = function (action) { return new HtAction(action); };
//# sourceMappingURL=action.js.map