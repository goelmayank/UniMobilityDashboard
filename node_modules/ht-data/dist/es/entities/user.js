var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import _ from "underscore";
var HtUser = (function () {
    function HtUser(data) {
        this.data = data;
        this.statusQueryMap = {
            stopped: "Stopped",
            on_trip: "Moving",
            logged_off: "Logged off",
            "location_disabled,network_offline": "Error",
            location_disabled: "Location disabled",
            network_offline: "Network offline",
            never_tracked: "Never tracked"
        };
        this.sortingQueryMap = {
            num_trips: "Trips",
            name: "Name",
            status: "Status",
            num_places: "Places",
            total_distance: "Distance",
            total_duration: "Duration",
            stop_duration: "Stop duration",
            location_disabled_duration: "Location disabled",
            network_offline_duration: "Network offline",
            num_actions: "Actions",
            last_heartbeat_at: "Last updated"
        };
        this.markerFilterMap = {
            stopped: function (user) {
                return user.status == "stopped";
            },
            on_trip: function (user) {
                return (user.status == "walk" ||
                    user.status == "run" ||
                    user.status == "cycle" ||
                    user.status == "drive" ||
                    user.status == "moving");
                //moving: walk, drive, cycle, run
            },
            logged_off: function (user) {
                return user.status == "logged_off";
            },
            location_disabled: function (user) {
                return user.status == "location_disabled";
            },
            network_offline: function (user) {
                return user.status == "network_offline";
            }
        };
    }
    HtUser.prototype.getMarkerSearched = function (key) {
        return function (user) {
            if (!user.name)
                return false;
            var name = user.name.toLowerCase();
            key = key.toLowerCase();
            return name.includes(key);
        };
    };
    HtUser.prototype.getMarkerFilter = function (key) {
        var filter = this.markerFilterMap[key];
        if (key) {
            if (filter) {
                return filter;
            }
            else {
                return function () { return false; };
            }
        }
        else {
            return function () { return true; };
        }
    };
    Object.defineProperty(HtUser.prototype, "sortings", {
        get: function () {
            return Object.keys(this.sortingQueryMap);
        },
        enumerable: true,
        configurable: true
    });
    HtUser.prototype.getSegmentTypes = function (userSegments) {
        return _.reduce(userSegments, function (segmentType, segment) {
            if (segment.type == "stop") {
                if (segment.location && segment.location.geojson)
                    segmentType.stopSegment.push(segment);
            }
            else {
                if (segment.encoded_polyline)
                    segmentType.tripSegment.push(segment);
            }
            return segmentType;
        }, { tripSegment: [], stopSegment: [] });
    };
    HtUser.prototype.getPosition = function () {
        var data = this.data;
        if (data.last_location && data.last_location.geojson) {
            var lat = data.last_location.geojson.coordinates[1];
            var lng = data.last_location.geojson.coordinates[0];
            return { lat: lat, lng: lng };
            // return L.latLng([item.last_location.geojson.coordinates[1], item.last_location.geojson.coordinates[0]])
        }
        else {
            return null;
        }
    };
    HtUser.prototype.isValidMarker = function (user) {
        user = user || this.data;
        return !!(user.last_location && user.last_location.geojson);
    };
    return HtUser;
}());
export { HtUser };
export var htUser = function (user) {
    var extras = {
        statusQueryMap: {
            stopped: "Stopped",
            on_trip: "Moving",
            logged_off: "Logged off",
            "location_disabled,network_offline": "Error",
            location_disabled: "Location disabled",
            network_offline: "Network offline",
            never_tracked: "Never tracked"
        },
        sortingQueryMap: {
            num_trips: "Trips",
            name: "Name",
            status: "Status",
            num_places: "Places",
            total_distance: "Distance",
            total_duration: "Duration",
            stop_duration: "Stop duration",
            location_disabled_duration: "Location disabled",
            network_offline_duration: "Network offline",
            num_actions: "Actions",
            last_heartbeat_at: "Last updated"
        },
        markerFilterMap: {
            stopped: function (user) {
                return user.status == "stopped";
            },
            on_trip: function (user) {
                return (user.status == "walk" ||
                    user.status == "run" ||
                    user.status == "cycle" ||
                    user.status == "drive" ||
                    user.status == "moving");
                //moving: walk, drive, cycle, run
            },
            logged_off: function (user) {
                return user.status == "logged_off";
            },
            location_disabled: function (user) {
                return user.status == "location_disabled";
            },
            network_offline: function (user) {
                return user.status == "network_offline";
            }
        },
        getMarkerSearched: function (key) {
            return function (user) {
                if (!user.name)
                    return false;
                var name = user.name.toLowerCase();
                key = key.toLowerCase();
                return name.includes(key);
            };
        },
        getMarkerFilter: function (key) {
            var filter = this.markerFilterMap[key];
            if (key) {
                if (filter) {
                    return filter;
                }
                else {
                    return function () { return false; };
                }
            }
            else {
                return function () { return true; };
            }
        }
    };
    return __assign({ data: user, isValidMarker: function () {
            var user = this.data;
            return !!(user.last_location && user.last_location.geojson);
        },
        getPosition: function () {
            if (this.isValidMarker()) {
                return this.getValidPosition();
            }
            else {
                return null;
            }
        },
        getValidPosition: function () {
            var data = this.data;
            var lat = data.last_location.geojson.coordinates[1];
            var lng = data.last_location.geojson.coordinates[0];
            return { lat: lat, lng: lng };
        },
        // update(user) {
        //   return {...this, ...user}
        // },
        getInfoContent: function () {
            var user = this;
            return user.name;
        } }, extras);
};
//# sourceMappingURL=user.js.map