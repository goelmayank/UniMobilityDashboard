var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { combineLatest } from "rxjs/observable/combineLatest";
import _ from "underscore";
import { distinctUntilChanged } from "rxjs/operators";
import { itemAsPage$ } from "./item-as-page";
export var dataWithSelectedId$ = function (data$, id$, keys) {
    return combineLatest(data$, id$, function (data, id) {
        if (!data && keys.length)
            return data;
        return id
            ? _.reduce(keys, function (acc, key) {
                return acc[key]
                    ? __assign({}, acc, (_a = {}, _a[key] = acc[key].filter(function (item) {
                        return item.id === id;
                    }), _a)) : acc;
                var _a;
            }, data)
            : data;
    });
};
export var listwithSelectedId$ = function (list$, id$) {
    return combineLatest(list$, id$.pipe(distinctUntilChanged()), function (list, id) {
        if (!list)
            return list;
        return !id
            ? list
            : {
                count: 1,
                next: null,
                page: null,
                results: list.results.filter(function (item) {
                    return item.id === id;
                })
            };
    });
};
export var listWithItem$ = function (list$, item$) {
    return combineLatest(list$, item$.pipe(itemAsPage$()), function (list, itemPage) {
        return itemPage ? itemPage : list;
    });
};
//# sourceMappingURL=data-intercepter.js.map