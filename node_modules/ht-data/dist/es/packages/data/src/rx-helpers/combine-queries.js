var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { combineLatest } from "rxjs/observable/combineLatest";
export var CombineQueries = function (addQueries$) {
    return function (query$) {
        if (addQueries$ && addQueries$.length) {
            return combineLatest.apply(void 0, [query$].concat(addQueries$.filter(function (data) { return !!data; }), [function (query) {
                    var addQueries = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        addQueries[_i - 1] = arguments[_i];
                    }
                    if (!query)
                        return query;
                    return addQueries.reduce(function (acc, currentQ) {
                        return __assign({}, currentQ, acc);
                    }, query);
                }]));
        }
        else {
            return query$;
        }
    };
};
//# sourceMappingURL=combine-queries.js.map