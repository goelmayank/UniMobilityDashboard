import { ISegment, IUser, IUserAnalytics, IUserData, HtPosition } from "ht-models";
export declare class HtUser {
    data: IUserData | IUser | IUserAnalytics;
    statusQueryMap: {
        stopped: string;
        on_trip: string;
        logged_off: string;
        "location_disabled,network_offline": string;
        location_disabled: string;
        network_offline: string;
        never_tracked: string;
    };
    sortingQueryMap: {
        num_trips: string;
        name: string;
        status: string;
        num_places: string;
        total_distance: string;
        total_duration: string;
        stop_duration: string;
        location_disabled_duration: string;
        network_offline_duration: string;
        num_actions: string;
        last_heartbeat_at: string;
    };
    markerFilterMap: {
        stopped: (user: IUserAnalytics) => boolean;
        on_trip: (user: IUserAnalytics) => boolean;
        logged_off: (user: IUserAnalytics) => boolean;
        location_disabled: (user: IUserAnalytics) => boolean;
        network_offline: (user: IUserAnalytics) => boolean;
    };
    constructor(data?: IUserData | IUser | IUserAnalytics);
    getMarkerSearched(key: string): (user: IUserAnalytics) => boolean;
    getMarkerFilter(key?: string): any;
    readonly sortings: string[];
    getSegmentTypes(userSegments: ISegment[]): any;
    getPosition(): HtPosition | null;
    isValidMarker(user?: IUserAnalytics | IUser): boolean;
}
export declare const htUser: (user?: IUser | IUserData | IUserAnalytics) => {
    statusQueryMap: {
        stopped: string;
        on_trip: string;
        logged_off: string;
        "location_disabled,network_offline": string;
        location_disabled: string;
        network_offline: string;
        never_tracked: string;
    };
    sortingQueryMap: {
        num_trips: string;
        name: string;
        status: string;
        num_places: string;
        total_distance: string;
        total_duration: string;
        stop_duration: string;
        location_disabled_duration: string;
        network_offline_duration: string;
        num_actions: string;
        last_heartbeat_at: string;
    };
    markerFilterMap: {
        stopped: (user: IUserAnalytics) => boolean;
        on_trip: (user: IUserAnalytics) => boolean;
        logged_off: (user: IUserAnalytics) => boolean;
        location_disabled: (user: IUserAnalytics) => boolean;
        network_offline: (user: IUserAnalytics) => boolean;
    };
    getMarkerSearched(key: string): (user: IUserAnalytics) => boolean;
    getMarkerFilter(key?: string): any;
    data: IUser | IUserData | IUserAnalytics;
    isValidMarker(): boolean;
    getPosition(): HtPosition;
    getValidPosition(): HtPosition;
    getInfoContent(): any;
};
