import { IAction, IActionMap } from "ht-models";
import { HtPosition, IActionPositions } from "../interfaces";
export declare class HtAction {
    data: IAction;
    types: string[];
    sortingQueryMap: object;
    ontimeFilters: {
        event_flags: string;
    }[];
    statusQueryMap: {
        created: string;
        "assigned,started": string;
        "started,assigned": string;
        completed: string;
    };
    ontimeQueryMap: {
        "action.delayed": string;
        "action.completed_late": string;
    };
    markerFilterMap: {
        "assigned,started": (action: IAction) => boolean;
        "started,assigned": (action: IAction) => boolean;
        completed: (action: IAction) => boolean;
        created: (action: IAction) => boolean;
    };
    constructor(data?: IAction);
    readonly filterQueryMap: {
        "action.delayed": string;
        "action.completed_late": string;
        created: string;
        "assigned,started": string;
        "started,assigned": string;
        completed: string;
    };
    readonly sortings: string[];
    getStatusString(status: string): any;
    getOntimeString(value: string): any;
    getFilterString(value: string): any;
    getSortingString(value: string): any;
    getMarkerFilter(key: string): any;
    getMarkerSeached(key: string): (action: IAction) => boolean;
    isAwayFromExpected(): boolean;
    isValidMarker(action?: IActionMap | IAction): boolean;
    getDateRangeQuery(query: any): any;
    getPositionsObject(): IActionPositions | null;
    getCompletedPosition(): HtPosition | null;
    getExpectedPosition(): HtPosition | null;
    getPosition(): HtPosition | null;
    hasEnded(): boolean;
    getETATimestamp(): any;
}
export declare const htAction: (action?: IAction) => HtAction;
