import { each, map } from 'underscore';
import { fromEventPattern as fromEventPattern$1 } from 'rxjs/observable/fromEventPattern';

var LightColorMapStyle = [
    {
        "featureType": "all",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "saturation": 36
            },
            {
                "color": "#333333"
            },
            {
                "lightness": 40
            }
        ]
    },
    {
        "featureType": "all",
        "elementType": "labels.text.stroke",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "color": "#ffffff"
            },
            {
                "lightness": 16
            }
        ]
    },
    {
        "featureType": "all",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#fefefe"
            },
            {
                "lightness": 20
            }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#fefefe"
            },
            {
                "lightness": 17
            },
            {
                "weight": 1.2
            }
        ]
    },
    {
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#dadada"
            }
        ]
    },
    {
        "featureType": "administrative.province",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#cfcfcf"
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#f5f5f5"
            },
            {
                "lightness": 20
            }
        ]
    },
    {
        "featureType": "landscape.man_made",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#ecedee"
            }
        ]
    },
    {
        "featureType": "landscape.natural.landcover",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "saturation": "-14"
            }
        ]
    },
    {
        "featureType": "landscape.natural.landcover",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "saturation": "-12"
            },
            {
                "lightness": "60"
            }
        ]
    },
    {
        "featureType": "landscape.natural.terrain",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#dbe5da"
            }
        ]
    },
    {
        "featureType": "poi",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#f5f5f5"
            },
            {
                "lightness": 21
            }
        ]
    },
    {
        "featureType": "poi.park",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#dedede"
            },
            {
                "lightness": 21
            }
        ]
    },
    {
        "featureType": "poi.park",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#e2f0e0"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#ffffff"
            },
            {
                "lightness": 17
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#ffffff"
            },
            {
                "lightness": 29
            },
            {
                "weight": 0.2
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#ffffff"
            },
            {
                "lightness": 18
            }
        ]
    },
    {
        "featureType": "road.local",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#ffffff"
            },
            {
                "lightness": 16
            }
        ]
    },
    {
        "featureType": "transit",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#f2f2f2"
            },
            {
                "lightness": 19
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#e9e9e9"
            },
            {
                "lightness": 17
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "saturation": "6"
            },
            {
                "gamma": "4.20"
            },
            {
                "lightness": "72"
            },
            {
                "color": "#d9e5eb"
            }
        ]
    }
];

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var GoogleMapUtilsClass = (function () {
    function GoogleMapUtilsClass() {
        this.type = 'google';
        this.defaultMapOptions = {
            center: { lat: 0, lng: 0 },
            zoom: 2,
            fullscreenControl: false,
            streetViewControl: false,
            styles: LightColorMapStyle
        };
        this.setStyle = function (item, style) {
            item.setOptions(style);
        };
    }
    GoogleMapUtilsClass.prototype.setDefaultMapOptions = function (options) {
        this.defaultMapOptions = __assign({}, this.defaultMapOptions, options);
    };
    GoogleMapUtilsClass.prototype.renderMap = function (elem, options) {
        options = __assign({}, options, this.defaultMapOptions);
        return new google.maps.Map(elem, options);
    };
    GoogleMapUtilsClass.prototype.setKey = function (key) {
        if (document) {
            this.loadGoogleMaps(key, function () {
                // this.loadMarkerCluster();
                // this.loadRichMarker();
            });
            return true;
        }
        return false;
    };
    GoogleMapUtilsClass.prototype.loadGoogleMaps = function (key, cb) {
        var url = "https://maps.googleapis.com/maps/api/js?key=" + key + "&libraries=geometry,visualization";
        this.loadScript(url, cb);
    };
    GoogleMapUtilsClass.prototype.loadMarkerCluster = function () {
        // const url = "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js";
        // this.loadScript(url)
        // import("./markerclusterer")
    };
    GoogleMapUtilsClass.prototype.loadRichMarker = function () {
        // const url = "http://googlemaps.github.io/js-rich-marker/src/richmarker-compiled.js";
        // this.loadScript(url)
        // import("./richmarker")
    };
    GoogleMapUtilsClass.prototype.loadScript = function (url, cb) {
        var script = document.createElement("script");
        script.src = url;
        if (cb)
            script.onload = cb();
        document.head.appendChild(script);
    };
    GoogleMapUtilsClass.prototype.updatePositionPopup = function (marker, position, infoContent, defaultOption) {
        if (defaultOption === void 0) { defaultOption = {}; }
        marker.setPosition(position);
        this.updatePopup(marker, infoContent, defaultOption);
    };
    GoogleMapUtilsClass.prototype.updatePopup = function (marker, infoContent, defaultOption) {
        // if(marker.getPopup()) {
        //   marker.setPopupContent(infoContent)
        // } else {
        //   marker.bindPopup(infoContent, defaultOption);
        // }
    };
    GoogleMapUtilsClass.prototype.setMap = function (item, map$$1) {
        if (!map$$1) {
            item.setMap(null);
        }
        else if ((item && !item.getMap) || (item && !item.getMap())) {
            item.setMap(map$$1);
        }
    };
    
    GoogleMapUtilsClass.prototype.clearItem = function (item) {
        item.setMap(null);
    };
    
    GoogleMapUtilsClass.prototype.updatePosition = function (marker, position, infoContent, defaultOption) {
        if (infoContent === void 0) { infoContent = ""; }
        if (defaultOption === void 0) { defaultOption = {}; }
        position = this.getLatlng(position);
        marker.setPosition(position);
        // if(infoContent) HtUpdateTooltip(marker, infoContent, defaultOption)
    };
    GoogleMapUtilsClass.prototype.updateTooltip = function (marker, infoContent, defaultOption) {
        // if(marker.getTooltip()) {
        //   marker.setTooltipContent(infoContent)
        // } else {
        //   marker.bindTooltip(infoContent, defaultOption);
        // }
    };
    GoogleMapUtilsClass.prototype.setCircleStyle = function (item, style) {
        var circleStyle = __assign({}, style, { icon: __assign({}, style.icon, { path: google.maps.SymbolPath.CIRCLE }) });
        this.setStyle(item, circleStyle);
    };
    GoogleMapUtilsClass.prototype.setPolylineStyle = function (polyline, style) {
        this.setStyle(polyline, style);
    };
    
    GoogleMapUtilsClass.prototype.openTooltip = function (item, content) {
        // if(content) item.setTooltipContent(content);
        // item.openTooltip()
    };
    GoogleMapUtilsClass.prototype.closeTooltip = function (item) {
        // item.closeTooltip()
    };
    GoogleMapUtilsClass.prototype.openPopup = function (item, map$$1, content, popup) {
        if (popup) {
            popup.setContent(content);
            // console.log(item.getPosition().lat());
            popup.open(map$$1, item);
        }
        // if(content) item.setPopupContent(content);
        // item.openPopup()
    };
    GoogleMapUtilsClass.prototype.closePopup = function (item) {
        // item.closePopup()
    };
    GoogleMapUtilsClass.prototype.bringToFront = function (item) {
        // item.bringToFront()
    };
    GoogleMapUtilsClass.prototype.setFocus = function (item, map$$1, _a) {
        var zoom = _a.zoom, _b = _a.force, force = _b === void 0 ? false : _b, center = _a.center;
        if ((item && item.getMap()) || force) {
            var markerCenter = this.getItemLatlng(item);
            if (center)
                map$$1.setCenter(markerCenter);
            if (zoom && center)
                map$$1.setZoom(zoom);
            // item.setAnimation(google.maps.Animation.DROP);
            // setTimeout(() => {
            //   item.setAnimation(null);
            //
            // }, 1000)
        }
    };
    GoogleMapUtilsClass.prototype.getItemLatlng = function (item) {
        return item.getPosition();
    };
    GoogleMapUtilsClass.prototype.updateCirclePosition = function (circle, position) {
        circle.setCenter(position);
    };
    GoogleMapUtilsClass.prototype.extendBounds = function (position, bounds) {
        if (bounds === void 0) { bounds = new google.maps.LatLngBounds(); }
        var latlng = this.getLatlng(position);
        bounds.extend(latlng);
        return bounds;
    };
    GoogleMapUtilsClass.prototype.getCircleMarker = function () {
        return new google.maps.Marker();
    };
    GoogleMapUtilsClass.prototype.getMarker = function () {
        return new google.maps.Marker();
    };
    GoogleMapUtilsClass.prototype.getMarkerCluster = function (map$$1) {
        // console.log("get", map);
        return new MarkerClusterer(map$$1, [], {
            imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m"
        });
    };
    GoogleMapUtilsClass.prototype.removeClusterMarkers = function (cluster) {
        cluster.clearMarkers();
    };
    GoogleMapUtilsClass.prototype.removeClusterMarker = function (cluster, marker) {
        cluster.removeMarker(marker);
    };
    GoogleMapUtilsClass.prototype.addMarkersToCluster = function (cluster, markers, map$$1) {
        // if(listAll.length) console.log(map, "map", listAll[0]);
        // cluster.setMap(map);
        var clusterMarkers = cluster.getMarkers();
        markers.forEach(function (marker) {
            // if(markerEntity[marker['id']]) {
            //
            // } else {
            //   cluster.addMarker(marker)
            // }
            //alternate aproach
            if (clusterMarkers.indexOf && clusterMarkers.indexOf(marker) > -1) {
            }
            else {
                cluster.addMarker(marker);
            }
        });
        // var hasId = clusterMarkers && clusterMarkers.length && clusterMarkers[0]['id'];
        // if(hasId) {
        //   let markerEntity = _.indexBy(clusterMarkers, 'id');
        //   listAll.forEach((marker) => {
        //     if(markerEntity[marker['id']]) {
        //
        //     } else {
        //       cluster.addMarker(marker)
        //     }
        //   })
        // } else {
        //   _.each(listAll, (marker) => {
        //     // console.log(marker.getPosition().lng());
        //     cluster.removeMarker(marker);
        //     cluster.addMarker(marker)
        //     // if(marker.getPosition()) {
        //     //   console.log("hit", marker);
        //     //   cluster.addMarker(marker)
        //     // }
        //   })
        // }
        // cluster.addMarkers(listAll)
        // this.markerCluster.addLayers(listAll);
        // this.markerCluster.refreshClusters(listAll);
    };
    GoogleMapUtilsClass.prototype.extendItemBounds = function (item, bounds, force) {
        if (item === void 0) { item = null; }
        if (force === void 0) { force = false; }
        bounds = bounds || new google.maps.LatLngBounds();
        if (force || (item && item.getMap() && item.getPosition)) {
            var p = item.getPosition();
            var l = { lat: p.lat(), lng: p.lng() };
            bounds.extend(l);
        }
        if (item && item.getMap() && item.getCenter) {
            bounds.extend(item.getCenter());
        }
        return bounds;
    };
    GoogleMapUtilsClass.prototype.extendBoundsWithPolyline = function (polyline, bounds) {
        if (polyline === void 0) { polyline = null; }
        if (bounds === void 0) { bounds = new google.maps.LatLngBounds(); }
        if (polyline && polyline.getMap()) {
            each(polyline.getPath().getArray(), function (p) {
                var l = { lat: p.lat(), lng: p.lng() };
                bounds.extend(l);
            });
        }
        return bounds;
    };
    
    GoogleMapUtilsClass.prototype.setEncodedPath = function (polyline, encodedPolyline) {
        var path = google.maps.geometry.encoding.decodePath(encodedPolyline);
        return polyline.setPath(path);
    };
    
    GoogleMapUtilsClass.prototype.getPopup = function (options) {
        var defaultOption = {
            disableAutoPan: true,
            pixelOffset: new google.maps.Size(0, -37)
        };
        options = __assign({}, defaultOption, options);
        return new google.maps.InfoWindow(options);
    };
    GoogleMapUtilsClass.prototype.getPolyline = function () {
        return new google.maps.Polyline();
    };
    GoogleMapUtilsClass.prototype.setBounds = function (map$$1, bounds, padding) {
        if (padding === void 0) { padding = 0; }
        var newBounds = new google.maps.LatLngBounds(bounds.getSouthWest(), bounds.getNorthEast());
        map$$1.fitBounds(newBounds);
    };
    GoogleMapUtilsClass.prototype.isValidBounds = function (bounds) {
        // console.log(bounds);
        // return !bounds.isEmpty()
        return !this.getBoundsFix(bounds).isEmpty();
    };
    GoogleMapUtilsClass.prototype.getBoundsFix = function (bounds) {
        return new google.maps.LatLngBounds(bounds.getSouthWest(), bounds.getNorthEast());
    };
    GoogleMapUtilsClass.prototype.invalidateSize = function (map$$1) {
        google.maps.event.trigger(map$$1, "resize");
    };
    GoogleMapUtilsClass.prototype.onEvent$ = function (item, type) {
        return fromEventPattern$1(this.mapEventHandler(item, type), this.removeHandler(item, type));
    };
    GoogleMapUtilsClass.prototype.mapEventHandler = function (item, type) {
        var _this = this;
        return function (handler) { return _this.onEvent(item, type, handler); };
    };
    GoogleMapUtilsClass.prototype.removeHandler = function (item, type) {
        var _this = this;
        return function (handler) { return _this.removeEvent(item, type, handler); };
    };
    GoogleMapUtilsClass.prototype.onEvent = function (item, event, cb) {
        if (event == 'move')
            event = 'bounds_changed';
        item.addListener(event, function (e) {
            cb(e);
        });
    };
    GoogleMapUtilsClass.prototype.removeEvent = function (item, event, cb) {
        if (event == 'move')
            event = 'bounds_changed';
        item.removeListener(event, function (e) {
            cb(e);
        });
    };
    GoogleMapUtilsClass.prototype.openPopupPosition = function (position, map$$1, content, popup) {
        popup.setContent(content);
        popup.setPosition(this.getLatlng(position));
        popup.setMap(map$$1);
    };
    GoogleMapUtilsClass.prototype.setDivContent = function (marker, content, options) {
        var currentContent = marker.getContent ? marker.getContent() : null;
        if (currentContent != content) {
            marker.setContent(content);
            this.setDivMarkerStyle(marker, options);
        }
    };
    GoogleMapUtilsClass.prototype.getDivMarker = function () {
        return new RichMarker({});
    };
    GoogleMapUtilsClass.prototype.setDivMarkerStyle = function (item, options) {
        if (options === void 0) { options = {}; }
        var zIndex = options.zIndex, flat = options.flat, anchor = options.anchor;
        if (zIndex)
            item.setZIndex(zIndex);
        if (flat)
            item.setFlat(flat);
        if (anchor)
            item.setAnchor(anchor);
    };
    GoogleMapUtilsClass.prototype.getHeatmap = function (options) {
        if (options === void 0) { options = {}; }
        var heatmap = new google.maps.visualization.HeatmapLayer(__assign({ data: [] }, options));
        return heatmap;
    };
    GoogleMapUtilsClass.prototype.updateHeatMapLatlng = function (latlngs, heatmap) {
        var _this = this;
        var latlngsPos = latlngs.map(function (pos) { return _this.getLatlng(pos); });
        heatmap.setData(latlngsPos);
    };
    GoogleMapUtilsClass.prototype.setPathPositionTimeArray = function (polyline, positionTimeArray) {
        var _this = this;
        var path = map(positionTimeArray, function (point) {
            return _this.getLatlng({ lat: +point[0], lng: +point[1] });
        });
        return polyline.setPath(path);
    };
    
    GoogleMapUtilsClass.prototype.setPath = function (polyline, path) {
        var _this = this;
        var newPath = path.map(function (pos) {
            return _this.getLatlng(pos);
        });
        polyline.setPath(newPath);
    };
    
    GoogleMapUtilsClass.prototype.getLatlng = function (_a) {
        var _b = _a === void 0 ? { lat: 0, lng: 0 } : _a, lat = _b.lat, lng = _b.lng;
        return new google.maps.LatLng(lat, lng);
    };
    
    GoogleMapUtilsClass.prototype.getItemPosition = function (item) {
        var position = item.getPosition();
        return position ? { lat: position.lat(), lng: position.lng() } : null;
    };
    GoogleMapUtilsClass.prototype.getElement = function (item) {
        return item ? item.markerWrapper_ : null;
    };
    return GoogleMapUtilsClass;
}());

export { GoogleMapUtilsClass, LightColorMapStyle };
