/// <reference types="googlemaps" />
import { HtBounds, HtMapType, HtMarker, MapUtils } from "ht-map-wrapper";
import { ITimeAwarePoint, HtPosition } from "ht-models";
import { Observable } from "rxjs/Observable";
export declare class GoogleMapUtilsClass implements MapUtils {
    type: HtMapType;
    defaultMapOptions: {
        center: {
            lat: number;
            lng: number;
        };
        zoom: number;
        fullscreenControl: boolean;
        streetViewControl: boolean;
        styles: ({
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "saturation": number;
            } | {
                "color": string;
            } | {
                "lightness": number;
            })[];
        } | {
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "visibility": string;
            } | {
                "color": string;
            } | {
                "lightness": number;
            })[];
        } | {
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "color": string;
            } | {
                "lightness": number;
            } | {
                "weight": number;
            })[];
        } | {
            "featureType": string;
            "elementType": string;
            "stylers": ({
                "saturation": string;
            } | {
                "gamma": string;
            } | {
                "lightness": string;
            } | {
                "color": string;
            })[];
        })[];
    };
    setDefaultMapOptions(options: any): void;
    renderMap(elem: any, options: any): google.maps.Map;
    setKey(key: any): boolean;
    private loadGoogleMaps(key, cb);
    private loadMarkerCluster();
    private loadRichMarker();
    private loadScript(url, cb?);
    updatePositionPopup(marker: any, position: any, infoContent: string, defaultOption?: {}): void;
    updatePopup(marker: any, infoContent: any, defaultOption: any): void;
    setMap(item: any, map: google.maps.Map): void;
    setStyle: (item: any, style: any) => void;
    clearItem(item: any): void;
    updatePosition(marker: any, position: any, infoContent?: string, defaultOption?: {}): void;
    updateTooltip(marker: HtMarker, infoContent: any, defaultOption: any): void;
    setCircleStyle(item: any, style: any): void;
    setPolylineStyle(polyline: any, style: any): void;
    openTooltip(item: any, content?: string): void;
    closeTooltip(item: any): void;
    openPopup(item: any, map: any, content?: string, popup?: any): void;
    closePopup(item: any): void;
    bringToFront(item: any): void;
    setFocus(item: any, map: google.maps.Map, {zoom, force, center}: {
        zoom: any;
        force?: boolean;
        center: any;
    }): void;
    getItemLatlng(item: any): any;
    updateCirclePosition(circle: any, position: any): void;
    extendBounds(position: HtPosition, bounds?: google.maps.LatLngBounds): HtBounds;
    getCircleMarker(): google.maps.Marker;
    getMarker(): google.maps.Marker;
    getMarkerCluster(map: any): any;
    removeClusterMarkers(cluster: any): void;
    removeClusterMarker(cluster: any, marker: any): void;
    addMarkersToCluster(cluster: any, markers: any, map: any): void;
    extendItemBounds(item: any, bounds: google.maps.LatLngBounds, force?: boolean): google.maps.LatLngBounds;
    extendBoundsWithPolyline(polyline?: google.maps.Polyline, bounds?: google.maps.LatLngBounds): google.maps.LatLngBounds;
    setEncodedPath(polyline: google.maps.Polyline, encodedPolyline: string): void;
    getPopup(options: {}): google.maps.InfoWindow;
    getPolyline(): google.maps.Polyline;
    setBounds(map: google.maps.Map, bounds: google.maps.LatLngBounds, padding?: number): void;
    isValidBounds(bounds: google.maps.LatLngBounds): boolean;
    getBoundsFix(bounds: any): google.maps.LatLngBounds;
    invalidateSize(map: any): void;
    onEvent$(item: any, type: string): Observable<any>;
    private mapEventHandler(item, type);
    private removeHandler(item, type);
    onEvent(item: any, event: any, cb: any): void;
    removeEvent(item: any, event: any, cb?: any): void;
    openPopupPosition(position: HtPosition, map: any, content: any, popup: any): void;
    setDivContent(marker: any, content: any, options: any): void;
    getDivMarker(): any;
    setDivMarkerStyle(item: any, options?: any): void;
    getHeatmap(options?: {}): google.maps.visualization.HeatmapLayer;
    updateHeatMapLatlng(latlngs: any, heatmap: any): void;
    setPathPositionTimeArray(polyline: any, positionTimeArray: ITimeAwarePoint[]): any;
    setPath(polyline: google.maps.Polyline, path: HtPosition[]): void;
    getLatlng({lat, lng}?: HtPosition): google.maps.LatLng;
    getItemPosition(item: any): {
        lat: any;
        lng: any;
    };
    getElement(item: any): any;
}
