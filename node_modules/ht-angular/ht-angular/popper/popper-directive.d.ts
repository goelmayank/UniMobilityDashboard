import { ViewContainerRef, ComponentFactoryResolver, OnChanges, SimpleChange, EventEmitter, OnInit, Renderer2, ChangeDetectorRef } from '@angular/core';
import { PopperContent } from './popper-content';
import { Placement, PopperContentOptions, Trigger } from './popper.model';
export declare class PopperController implements OnInit, OnChanges {
    private viewContainerRef;
    private changeDetectorRef;
    private resolver;
    private renderer;
    private popperDefaults;
    private popperContentClass;
    private popperContentRef;
    private shown;
    private scheduledShowTimeout;
    private scheduledHideTimeout;
    private subscriptions;
    private globalClick;
    private globalScroll;
    constructor(viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef, resolver: ComponentFactoryResolver, renderer: Renderer2, popperDefaults?: PopperContentOptions);
    static baseOptions: PopperContentOptions;
    content: string | PopperContent;
    disabled: boolean;
    placement: Placement;
    showTrigger: Trigger | undefined;
    targetElement: HTMLElement;
    showDelay: number;
    hideTimeout: number;
    timeoutAfterShow: number;
    boundariesElement: string;
    showOnStart: boolean;
    closeOnClickOutside: boolean;
    hideOnClickOutside: boolean | undefined;
    hideOnScroll: boolean | undefined;
    positionFixed: boolean;
    popperModifiers: {};
    disableStyle: boolean;
    disableAnimation: boolean;
    forceDetection: boolean;
    popperOnShown: EventEmitter<PopperController>;
    popperOnHidden: EventEmitter<PopperController>;
    showOrHideOnClick(): void;
    showOrHideOnMouseOver(): void;
    showOnHover(): void;
    hideOnClickOutsideHandler($event: MouseEvent): void;
    hideOnScrollHandler($event: MouseEvent): void;
    hideOnLeave(): void;
    static assignDefined(target: any, ...sources: any[]): any;
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngOnDestroy(): void;
    toggle(): void;
    show(): void;
    hide(): void;
    scheduledShow(delay?: number): void;
    scheduledHide($event?: any, delay?: number): void;
    getRefElement(): any;
    private applyChanges();
    private setDefaults();
    private clearEventListeners();
    private overrideShowTimeout();
    private overrideHideTimeout();
    private constructContent();
    private setContentProperties(popperRef);
    private getScrollParent(node);
}
