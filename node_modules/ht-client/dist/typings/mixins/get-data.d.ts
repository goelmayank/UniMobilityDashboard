import { Observable } from "rxjs/Observable";
import { Constructor } from "ht-models";
import { Page } from "ht-models";
export interface IIdQueryDataBase {
    updateStrategy: string;
    getFirstData$([id, query]: [any, any]): Observable<any>;
    pollDuration: number;
    api$(id: string, query: object): Observable<any>;
}
export declare function getIdQueryDataMixin<TBase extends Constructor<IIdQueryDataBase>>(Base: TBase): {
    new (...args: any[]): {
        getData$([id, query]: [any, any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([id, query]: [any, any]): Observable<any>;
        pollDuration: number;
        api$(id: string, query: object): Observable<any>;
    };
} & TBase;
export interface IGetPageDataBase {
    updateStrategy: string;
    getFirstData$([query]: [any]): Observable<any>;
    pollDuration: number;
    api$(query: object): Observable<Page<any>>;
}
export declare function getPageDataMixin<TBase extends Constructor<IGetPageDataBase>>(Base: TBase): {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([query]: [any]): Observable<any>;
        pollDuration: number;
        api$(query: object): Observable<Page<any>>;
    };
} & TBase;
export interface IGetQueryDataBase {
    updateStrategy: string;
    getFirstData$([query]: [any]): Observable<any>;
    pollDuration: number;
    api$(query: any): Observable<any>;
}
export declare function getQueryDataMixin<TBase extends Constructor<IGetQueryDataBase>>(Base: TBase): {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([query]: [any]): Observable<any>;
        pollDuration: number;
        api$(query: any): Observable<any>;
    };
} & TBase;
export interface IGetAllPageDataBase {
    getFirstData$([query]: [any]): Observable<any>;
    api$(query: any): Observable<Page<any>>;
}
export declare function getAllPageDataMixin<TBase extends Constructor<IGetAllPageDataBase>>(Base: TBase): {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        getFirstData$([query]: [any]): Observable<any>;
        api$(query: any): Observable<Page<any>>;
    };
} & TBase;
