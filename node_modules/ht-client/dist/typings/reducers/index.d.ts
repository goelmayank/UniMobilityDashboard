import { ActionReducerMap } from "../store/models";
import { Action, ActionReducer } from "../store/models";
import { MemoizedSelector } from "../store/selector";
import * as fromUsers from "./user-reducer";
import * as fromSegments from "./segments-reducer";
import * as fromGroups from "./groups-reducer";
import * as fromAccounts from "./account-reducer";
import * as fromActions from "./actions-reducer";
import { IUserData, IUser, IUserAnalytics, IGroup, IUserListSummary, IAccountUser, IMembership, AllData, IActionStatusGraph, IActionsSummary, IAction } from "ht-models";
export interface State {
}
export declare const reducers: ActionReducerMap<State>;
export declare function reducer(state: any, action: any): ActionReducer<State, Action>;
export declare const metaReducers: ActionReducer<any, any>[];
/**
 * Users selectors
 */
export declare const getUsersState: MemoizedSelector<object, fromUsers.State>;
export declare const getUsersUsersData: MemoizedSelector<object, IUserData>;
export declare const getUsersPlacelineId: MemoizedSelector<object, string>;
export declare const getUsersPlacelineQuery: MemoizedSelector<object, object>;
export declare const getUsersPlacelineLoading: MemoizedSelector<object, boolean>;
export declare const getUsersListActive: MemoizedSelector<object, string | boolean>;
export declare const getUsersListId: MemoizedSelector<object, string>;
export declare const getUsersListQuery: MemoizedSelector<object, object>;
export declare const getUsersAnalyticsPage: MemoizedSelector<object, {
    count: number;
    next: string;
    previous: string;
    results: IUserAnalytics[];
}>;
export declare const getUsersAnalyticsLoading: MemoizedSelector<object, boolean>;
export declare const getUsersIndexPage: MemoizedSelector<object, {
    count: number;
    next: string;
    previous: string;
    results: IUser[];
}>;
export declare const getUsersIndexIsActive: MemoizedSelector<object, boolean>;
export declare const getUsersAnalyticsIsActive: MemoizedSelector<object, string | boolean>;
export declare const getUsersIndexMarkersIsActive: MemoizedSelector<object, boolean>;
export declare const getUsersAnalyticsMarkersIsActive: MemoizedSelector<object, string | boolean>;
export declare const getUsersAnalyticsAllLoading: MemoizedSelector<object, boolean>;
export declare const getUsersIndexFilteredMarker: MemoizedSelector<object, any>;
export declare const getUsersAnalyticsFilteredMarker: MemoizedSelector<object, any>;
export declare const getUsersIndexAll: MemoizedSelector<object, AllData<IUser>>;
export declare const getUsersAnalyticsAll: MemoizedSelector<object, AllData<IUserAnalytics>>;
export declare const getUsersSummary: MemoizedSelector<object, IUserListSummary>;
export declare const getUsersSummaryActive: MemoizedSelector<object, string | boolean>;
export declare const getUsersSummaryLoading: MemoizedSelector<object, boolean>;
/**
 * Segment selectors
 */
export declare const getSegmentsState: MemoizedSelector<object, fromSegments.State>;
export declare const getSegmentsSelectedId: MemoizedSelector<object, string>;
export declare const getSegmentsResetMapId: MemoizedSelector<object, string>;
/**
 *
 * Groups reducer
 */
export declare const getGroupsState: MemoizedSelector<object, fromGroups.State>;
export declare const getGroupId: MemoizedSelector<object, string>;
export declare const getGroupAll: MemoizedSelector<object, AllData<IGroup>>;
export declare const getGroupListActive: MemoizedSelector<object, boolean>;
/**
 Account
 */
export declare const getAccountState: MemoizedSelector<object, fromAccounts.State>;
export declare const getAccountUser: MemoizedSelector<object, IAccountUser>;
export declare const getAccountMembershipsAll: MemoizedSelector<object, {
    count: number;
    next: string;
    previous: string;
    results: IMembership[];
}>;
export declare const getAccountKey: MemoizedSelector<object, string>;
export declare const getAccountTempKey: MemoizedSelector<object, string>;
export declare const getAccountCurrentKey: MemoizedSelector<object, string>;
export declare const getAccountUserId: MemoizedSelector<object, string>;
/**
 * Actions
 */
export declare const getActionsState: MemoizedSelector<object, fromActions.State>;
export declare const getActionsList: MemoizedSelector<object, {
    count: number;
    next: string;
    previous: string;
    results: IAction[];
}>;
export declare const getActionsListLoading: MemoizedSelector<object, string | boolean>;
export declare const getActionsListActive: MemoizedSelector<object, string | boolean>;
export declare const getActionsListQuery: MemoizedSelector<object, object>;
export declare const getActionsSummary: MemoizedSelector<object, IActionsSummary>;
export declare const getActionsSummaryActive: MemoizedSelector<object, string | boolean>;
export declare const getActionsSummaryLoading: MemoizedSelector<object, boolean>;
export declare const getActionsSummaryQuery: MemoizedSelector<object, object>;
export declare const getActionsGraph: MemoizedSelector<object, IActionStatusGraph>;
export declare const getActionsGraphLoading: MemoizedSelector<object, boolean>;
export declare const getActionsGraphQuery: MemoizedSelector<object, object>;
