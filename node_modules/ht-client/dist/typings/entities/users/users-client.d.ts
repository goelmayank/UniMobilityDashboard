import { IDateRange, QueryLabel } from "../../interfaces";
import { IUserData, Partial } from "ht-models";
import { Observable } from "rxjs/Observable";
import { EntityClient } from "../../base/entity-client";
import { DefaultUsersFilter } from "../../filters/users-filter";
import { DateRange } from "../../global/date-range";
export declare class HtUsersClient extends EntityClient {
    options: IUsersClientConfig;
    analytics: any;
    placeline: any;
    analyticsAll: any;
    filterClass: DefaultUsersFilter;
    list: any;
    summary: any;
    listAll: any;
    heatmap: any;
    _statusQueryArray: QueryLabel[];
    store: any;
    api: any;
    key$: any;
    showAll: boolean;
    constructor(options: IUsersClientConfig);
    getLoading$(): Observable<boolean>;
    statusQueryArray: QueryLabel[];
    setShowAll(showAll?: boolean): void;
    getInitialDateRange(range?: Partial<IDateRange>): IDateRange;
    listStatusOverview$(): any;
    listStatusChart$(queryLabels?: QueryLabel[]): Observable<{
        totalUsers: number;
        chart: any;
        hasSelected: boolean;
    }>;
    readonly queryLabel$: any;
    readonly ordering$: any;
    private getOrderingMod(ordering);
    getSegmentsStates(): any;
    getCurrentPlaceline$(): Observable<IUserData>;
    private initEffects();
    setListAllFilter(query: any): void;
    getListAllUpdateQuery$(overview: any, query: any): any;
}
export declare const usersClientFactory: (options?: Partial<IUsersClientConfig>) => HtUsersClient;
export interface IUsersClientConfig {
    dateRange: DateRange;
}
export interface IUsersSummaryData {
    totalUsers: number;
    hasSelected: boolean;
    chart: IUsersSummaryChart[];
}
export interface IUsersSummaryChart {
    label: string;
    color: string;
    selected: boolean;
    value: number;
    values: string[];
    w: number;
}
