import { Observable } from "rxjs/Observable";
import { IUserAnalytics, Page } from "ht-models";
import { EntityListClient } from "../../base/list-client";
import { IPageClientConfig } from "../../interfaces";
import { Subscription } from "rxjs/Subscription";
import { IAllowedQueryMap } from "ht-data";
import { DateRange } from "../../global/date-range";
export declare class UsersAnalytics extends EntityListClient {
    api$: (query) => Observable<Page<IUserAnalytics>>;
    name: string;
    defaultQuery: {
        ordering: string;
    };
    dataSub: Subscription;
    data$: Observable<Page<IUserAnalytics>>;
    dataArray$: Observable<IUserAnalytics[] | null>;
    id$: Observable<string | null>;
    loading$: Observable<boolean | string>;
    store: any;
    dateParam: any;
    constructor({dateRange, store, dateParam, api}: IPageClientConfig);
    getDefaultQuery(): {
        ordering: string;
    };
    firstDataEffect(): void;
    setLoading(data: any): void;
    setData(data: any): void;
    setActive(isActive?: boolean | string): void;
    readonly apiQuery$: Observable<any>;
    addQuery(query?: {}): void;
    setQuery(query?: {}): void;
    setQueryReset(query: any): void;
    clearQueryKey(key: string): void;
    toggleId(userId: string): void;
    setId(userId: string | null): void;
    clearData(): void;
    destroy(): void;
}
export declare const UsersAnalyticsClient: {
    new (...args: any[]): {
        dataSub: Subscription;
        init(): void;
        getApiParams$(): Observable<any>;
        setLoading(loading: string | boolean): void;
        getData$(data: any): any;
        setData(data: any): void;
    };
} & {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([query]: [any]): Observable<any>;
        pollDuration: number;
        api$(query: object): Observable<Page<any>>;
    };
} & {
    new (...args: any[]): {
        getFirstData$(args: any): Observable<any>;
        firstDataEffect(any: any): void;
        api$(...args: any[]): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getApiQuery$(): Observable<any>;
        getBaseQuery$(): Observable<{}>;
        getApiParams$(): Observable<any[]>;
        query$: Observable<object>;
        allowedQueryMap?: IAllowedQueryMap[];
        getDefaultQuery(): object;
        dateRange?: DateRange;
        dateParam?: string;
        active$?: Observable<boolean>;
    };
} & typeof UsersAnalytics;
