import { EntityAllItemsClient } from "../../base/all-items.client";
import { BehaviorSubject } from "rxjs/BehaviorSubject";
import { Observable } from "rxjs/Observable";
import { Subscription } from "rxjs/Subscription";
import { IAllowedQueryMap } from "ht-data";
import { IAction, AllData, Page } from "ht-models";
import { IPageClientConfig } from "../../interfaces";
import { DateRange } from "../../global/date-range";
export declare class ActionsIndexAll extends EntityAllItemsClient {
    dataBehaviour$: BehaviorSubject<AllData<IAction> | null>;
    loadingBehaviour$: BehaviorSubject<boolean>;
    loading$: Observable<boolean>;
    activeBehaviour$: BehaviorSubject<boolean>;
    query$: BehaviorSubject<object>;
    api$: (query) => Observable<Page<IAction>>;
    dataSub: Subscription;
    dataEntities$: any;
    dateParam: string;
    constructor({dateRange, store, dateParam, api}: IPageClientConfig);
    setActive(isActive?: boolean): void;
    setQuery(query: any): void;
    readonly data$: Observable<AllData<IAction>>;
    addData(data: any): void;
    setData(data: any): void;
    setLoading(loading: any): void;
}
export declare const ActionsIndexAllClient: {
    new (...args: any[]): {
        dataSub: Subscription;
        init(): void;
        getApiParams$(): Observable<any>;
        setLoading(loading: string | boolean): void;
        getData$(data: any): any;
        addData(data: any): void;
    };
} & {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        getFirstData$([query]: [any]): Observable<any>;
        api$(query: any): Observable<Page<any>>;
    };
} & {
    new (...args: any[]): {
        getFirstData$(args: any): Observable<any>;
        firstDataEffect(any: any): void;
        api$(...args: any[]): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getApiQuery$(): Observable<any>;
        getBaseQuery$(): Observable<{}>;
        getApiParams$(): Observable<any[]>;
        query$: Observable<object>;
        allowedQueryMap?: IAllowedQueryMap[];
        getDefaultQuery(): object;
        dateRange?: DateRange;
        dateParam?: string;
        active$?: Observable<boolean>;
    };
} & typeof ActionsIndexAll;
