import { EntityListClient } from "../../base/list-client";
import { IPageClientConfig } from "../../interfaces";
import { Observable } from "rxjs/Observable";
import { IActionsSummary } from "ht-models";
import { Subscription } from "rxjs/Subscription";
import { IAllowedQueryMap } from "ht-data";
import { ActionsFilter } from "../../filters/actions-filter";
import { DateRange } from "../../global/date-range";
export declare class ActionsSummary extends EntityListClient {
    store: any;
    data$: Observable<IActionsSummary>;
    loading$: Observable<boolean>;
    dataSub: Subscription;
    api$: (query) => Observable<IActionsSummary>;
    allowedQueryMap: IAllowedQueryMap[];
    updateStrategy: string;
    filter: ActionsFilter;
    summaryChart$: any;
    dateParam: string;
    constructor({dateRange, store, dateParam, api}: IPageClientConfig);
    setActive(isActive?: boolean | string): void;
    setLoading(loading: any): void;
    setData(data: IActionsSummary): void;
    setQuery(query: any): void;
    getSummaryChart(): Observable<object>;
}
export declare const ActionsSummaryClient: {
    new (...args: any[]): {
        dataSub: Subscription;
        init(): void;
        getApiParams$(): Observable<any>;
        setLoading(loading: string | boolean): void;
        getData$(data: any): any;
        setData(data: any): void;
    };
} & {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([query]: [any]): Observable<any>;
        pollDuration: number;
        api$(query: any): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getFirstData$(args: any): Observable<any>;
        firstDataEffect(any: any): void;
        api$(...args: any[]): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getApiQuery$(): Observable<any>;
        getBaseQuery$(): Observable<{}>;
        getApiParams$(): Observable<any[]>;
        query$: Observable<object>;
        allowedQueryMap?: IAllowedQueryMap[];
        getDefaultQuery(): object;
        dateRange?: DateRange;
        dateParam?: string;
        active$?: Observable<boolean>;
    };
} & typeof ActionsSummary;
