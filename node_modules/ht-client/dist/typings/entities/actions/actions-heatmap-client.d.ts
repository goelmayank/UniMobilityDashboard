import { Observable } from "rxjs/Observable";
import { BehaviorSubject } from "rxjs/BehaviorSubject";
import { IActionHeat, Page } from "ht-models";
import { IAllowedQueryMap } from "ht-data";
import { Subscription } from "rxjs/Subscription";
import { IPageClientConfig } from "../../interfaces";
import { DateRange } from "../../global/date-range";
export declare class ActionsHeatmap {
    query$: Observable<object>;
    api$: (query) => Observable<Page<IActionHeat>>;
    loadingState$: BehaviorSubject<boolean>;
    loading$: Observable<boolean>;
    dataState$: BehaviorSubject<Page<IActionHeat> | null>;
    data$: Observable<Page<IActionHeat>>;
    dataSub: Subscription;
    dateRange: DateRange;
    active$: BehaviorSubject<boolean>;
    dataArray$: Observable<any>;
    dateParam: string;
    constructor({dateRange, dateParam, api}: IPageClientConfig);
    setActive(active?: boolean): void;
    getDefaultQuery(): {
        page_size: number;
    };
    firstDataEffect(data: any): void;
    setLoading(isLoading: boolean): void;
    setData(data: Page<IActionHeat>): void;
    addData(data: any): void;
}
export declare const ActionsHeatmapClient: {
    new (...args: any[]): {
        dataSub: Subscription;
        init(): void;
        getApiParams$(): Observable<any>;
        setLoading(loading: string | boolean): void;
        getData$(data: any): any;
        addData(data: any): void;
    };
} & {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        getFirstData$([query]: [any]): Observable<any>;
        api$(query: any): Observable<Page<any>>;
    };
} & {
    new (...args: any[]): {
        getFirstData$(args: any): Observable<any>;
        firstDataEffect(any: any): void;
        api$(...args: any[]): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getApiQuery$(): Observable<any>;
        getBaseQuery$(): Observable<{}>;
        getApiParams$(): Observable<any[]>;
        query$: Observable<object>;
        allowedQueryMap?: IAllowedQueryMap[];
        getDefaultQuery(): object;
        dateRange?: DateRange;
        dateParam?: string;
        active$?: Observable<boolean>;
    };
} & typeof ActionsHeatmap;
