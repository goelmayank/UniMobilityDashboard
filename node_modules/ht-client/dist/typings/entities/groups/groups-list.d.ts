import { Observable } from "rxjs/Observable";
import { Page, IGroup } from "ht-models";
import { IClientConfig } from "../../interfaces";
import { Subscription } from "rxjs/Subscription";
import { IAllowedQueryMap } from "ht-data";
import { DateRange } from "../../global/date-range";
export declare class GroupsList {
    name: string;
    defaultQuery: {
        ordering: string;
    };
    query$: Observable<{}>;
    updateStrategy: string;
    pollDuration: number;
    data$: any;
    active$: any;
    loading$: Observable<boolean>;
    dataArray$: any;
    api$: (query) => Observable<Page<IGroup>>;
    store: any;
    dataSub: Subscription;
    setData(data: any): void;
    setLoading(data: any): void;
    setActive(isActive?: boolean): void;
    setQuery(): void;
    firstDataEffect(data: any): void;
    getRoots(): Observable<Page<IGroup>>;
    getChildren(groupId: any): Observable<Page<IGroup>>;
    getDefaultQuery(): {
        ordering: string;
        page_size: number;
    };
    constructor({store, api}: IClientConfig);
    clearData(): void;
    destroy(): void;
}
export declare const GroupsListClient: {
    new (...args: any[]): {
        dataSub: Subscription;
        init(): void;
        getApiParams$(): Observable<any>;
        setLoading(loading: string | boolean): void;
        getData$(data: any): any;
        setData(data: any): void;
    };
} & {
    new (...args: any[]): {
        getData$([query]: [any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([query]: [any]): Observable<any>;
        pollDuration: number;
        api$(query: object): Observable<Page<any>>;
    };
} & {
    new (...args: any[]): {
        getFirstData$(args: any): Observable<any>;
        firstDataEffect(any: any): void;
        api$(...args: any[]): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getApiQuery$(): Observable<any>;
        getBaseQuery$(): Observable<{}>;
        getApiParams$(): Observable<any[]>;
        query$: Observable<object>;
        allowedQueryMap?: IAllowedQueryMap[];
        getDefaultQuery(): object;
        dateRange?: DateRange;
        dateParam?: string;
        active$?: Observable<boolean>;
    };
} & typeof GroupsList;
