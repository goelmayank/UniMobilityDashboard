import { EntityItemClient } from "../../base/item-client";
import { Observable } from "rxjs/Observable";
import { IClientConfig } from "../../interfaces";
import { Subscription } from "rxjs/Subscription";
import { IGroup } from "ht-models";
export declare class GroupsItem extends EntityItemClient {
    name: string;
    defaultQuery: {
        ordering: string;
    };
    updateStrategy: string;
    query$: Observable<object>;
    data$: Observable<{}>;
    loading$: Observable<boolean>;
    getDefaultQuery(): {
        ordering: string;
    };
    api$: (id, query?) => Observable<IGroup>;
    setId(id: any): void;
    setData(data: any): void;
    setLoading(data: any): void;
    setQuery(): void;
    store: any;
    dataSub: Subscription;
    constructor({store, api}: IClientConfig);
    clearData(): void;
    destroy(): void;
}
export declare const GroupsItemClient: {
    new (...args: any[]): {
        dataSub: Subscription;
        init(): void;
        getApiParams$(): Observable<any>;
        setLoading(loading: string | boolean): void;
        getData$(data: any): any;
        setData(data: any): void;
    };
} & {
    new (...args: any[]): {
        getData$([id, query]: [any, any]): Observable<any>;
        updateStrategy: string;
        getFirstData$([id, query]: [any, any]): Observable<any>;
        pollDuration: number;
        api$(id: string, query: object): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getFirstData$(args: any): Observable<any>;
        firstDataEffect(any: any): void;
        api$(...args: any[]): Observable<any>;
    };
} & {
    new (...args: any[]): {
        getApiQuery$(): Observable<{}>;
        getApiParams$(): Observable<[string, {}]>;
        query$: Observable<object>;
        getDefaultQuery(): object;
        id$: Observable<string>;
    };
} & typeof GroupsItem;
