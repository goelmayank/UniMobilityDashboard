import { contains, filter, find, indexBy, map, reduce, values } from 'underscore';
import { distinctUntilChanged, expand, flatMap, map as map$1, pluck, switchMap, tap } from 'rxjs/operators';
import { timer as timer$1 } from 'rxjs/observable/timer';
import { AllowedQueryMap, CombineLoadings$, CombineQueries, DateRangeMap, DateRangeToQuery$, PageResults$, htUser, itemAsPage$ } from 'ht-data';
import { combineLatest as combineLatest$1 } from 'rxjs/observable/combineLatest';
import { of as of$1 } from 'rxjs/observable/of';
import { empty as empty$1 } from 'rxjs/observable/empty';
import { Color, HtQuerySerialize, dateRangeDisplay } from 'ht-utility';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { observeOn as observeOn$1 } from 'rxjs/operator/observeOn';
import { withLatestFrom as withLatestFrom$1 } from 'rxjs/operator/withLatestFrom';
import { scan as scan$1 } from 'rxjs/operator/scan';
import { distinctUntilChanged as distinctUntilChanged$2 } from 'rxjs/operator/distinctUntilChanged';
import { map as map$3 } from 'rxjs/operator/map';
import { pluck as pluck$2 } from 'rxjs/operator/pluck';
import { fromPromise as fromPromise$1 } from 'rxjs/observable/fromPromise';

var defaultListConfig = {
    isLive: false
};
// export interface AllData<T> {
//   resultsEntity: {[id: string]: T},
//   // isFirst: boolean,
//   timestamp?: string,
//   count?: number,
//   next?: string,
//   previous?: string
// }
var ApiType;
(function (ApiType) {
    ApiType["index"] = "index";
    ApiType["analytics"] = "analytics";
})(ApiType || (ApiType = {}));

function combineReducers(reducers, initialState) {
    if (initialState === void 0) { initialState = {}; }
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};
    for (var i = 0; i < reducerKeys.length; i++) {
        var key = reducerKeys[i];
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    return function combination(state, action) {
        state = state || initialState;
        var hasChanged = false;
        var nextState = {};
        for (var i = 0; i < finalReducerKeys.length; i++) {
            var key = finalReducerKeys[i];
            var reducer = finalReducers[key];
            var previousStateForKey = state[key];
            var nextStateForKey = reducer(previousStateForKey, action);
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        return hasChanged ? nextState : state;
    };
}
function omit(object, keyToRemove) {
    return Object.keys(object)
        .filter(function (key) { return key !== keyToRemove; })
        .reduce(function (result, key) {
        return Object.assign(result, (_a = {}, _a[key] = object[key], _a));
        var _a;
    }, {});
}
function compose() {
    var functions = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        functions[_i] = arguments[_i];
    }
    return function (arg) {
        if (functions.length === 0) {
            return arg;
        }
        var last = functions[functions.length - 1];
        var rest = functions.slice(0, -1);
        return rest.reduceRight(function (composed, fn) { return fn(composed); }, last(arg));
    };
}
function createReducerFactory(reducerFactory, metaReducers) {
    if (Array.isArray(metaReducers) && metaReducers.length > 0) {
        return compose.apply(null, metaReducers.concat([reducerFactory]));
    }
    return reducerFactory;
}

function memoize(t) {
    var lastArguments = null;
    var lastResult = null;
    function reset() {
        lastArguments = null;
        lastResult = null;
    }
    function memoized() {
        if (!lastArguments) {
            lastResult = t.apply(null, arguments);
            lastArguments = arguments;
            return lastResult;
        }
        for (var i = 0; i < arguments.length; i++) {
            if (arguments[i] !== lastArguments[i]) {
                lastResult = t.apply(null, arguments);
                lastArguments = arguments;
                return lastResult;
            }
        }
        return lastResult;
    }
    return { memoized: memoized, reset: reset };
}
function createSelector() {
    var input = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        input[_i] = arguments[_i];
    }
    var args = input;
    if (Array.isArray(args[0])) {
        var head = args[0], tail = args.slice(1);
        args = head.concat(tail);
    }
    var selectors = args.slice(0, args.length - 1);
    var projector = args[args.length - 1];
    var memoizedSelectors = selectors.filter(function (selector) {
        return selector.release && typeof selector.release === "function";
    });
    var memoizedProjector = memoize(function () {
        var selectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selectors[_i] = arguments[_i];
        }
        return projector.apply(null, selectors);
    });
    var memoizedState = memoize(function (state) {
        var args = selectors.map(function (fn) { return fn(state); });
        return memoizedProjector.memoized.apply(null, args);
    });
    function release() {
        memoizedState.reset();
        memoizedProjector.reset();
        memoizedSelectors.forEach(function (selector) { return selector.release(); });
    }
    return Object.assign(memoizedState.memoized, {
        release: release,
        projector: memoizedProjector.memoized
    });
}
function createFeatureSelector(featureName) {
    return createSelector(function (state) { return state[featureName]; }, function (featureState) { return featureState; });
}

//placeline
var SET_USER_DATA = "[USERS] set user data";
var SET_PLACELINE_ID = "[USERS] set placeline id";
var TOGGLE_PLACELINE_ID = "[USERS] toggle placeline id";
var SET_PLACELINE_QUERY = "[USERS] set placeline query";
var ADD_PLACELINE_QUERY = "[USERS] add placeline query";
var SET_PLACELINE_LOADING = "[USERS] set placeline loading";
//list
var SET_LIST_ACTIVE = "[USERS] set list active";
var SET_LIST_ID = "[USERS] set list id";
var SET_LIST_QUERY = "[USERS] set list query";
var ADD_LIST_QUERY = "[USERS] add list query";
var CLEAR_QUERY_KEY = "[USERS] clear query key";
var TOGGLE_LIST_ID = "[USERS] toggle list id";
//analytics page
var SET_USERS_ANALYTICS_PAGE = "[USERS] set user analytics page";
var SET_USERS_ANALYTICS_ID = "[USERS] set analytics id";
var SET_USERS_ANALYTICS_QUERY = "[USERS] set analytics query";
var SET_USERS_ANALYTICS_LOADING = "[USERS] set analytics loading";
var SET_USERS_LIST_DATA_MAP = "[USERS] set users list data map";
//analytics all
var SET_MARKERS_ACTIVE = "[USERS] set markerS active";
var SET_USERS_ANALYTICS_ALL = "[USERS] set users analytics all";
var ADD_USERS_ANALYTICS_ALL = "[USERS] add users analytics all";
var SET_USERS_ANALYTICS_ALL_QUERY = "[USERS] add analytics all query";
var ADD_USERS_ANALYTICS_ALL_QUERY = "[USERS] set analytics all query";
var SET_USERS_ANALYTICS_ALL_LOADING = "[USERS] set analytics all loading";
var SET_USERS_MARKERS_DATA_MAP = "[USERS] set users listAll data map";
//summary
var SET_SUMMARY_ACTIVE = "[USERS] set summary active";
var SET_USERS_SUMMARY = "[USERS] set users summary";
var SET_USERS_SUMMARY_LOADING = "[USERS] set summary loading";
var SET_USERS_INDEX_PAGE = "[USERS] set user index page";
var ADD_USERS_INDEX_ALL = "[USERS] add users index all";
var SET_USERS_LIST_API_TYPE = "[USERS] set users list api type";
var SetUserData = (function () {
    function SetUserData(payload) {
        this.payload = payload;
        this.type = SET_USER_DATA;
    }
    return SetUserData;
}());
var SetPlacelineId = (function () {
    function SetPlacelineId(payload) {
        this.payload = payload;
        this.type = SET_PLACELINE_ID;
    }
    return SetPlacelineId;
}());
var TogglePlacelineId = (function () {
    function TogglePlacelineId(payload) {
        this.payload = payload;
        this.type = TOGGLE_PLACELINE_ID;
    }
    return TogglePlacelineId;
}());
var SetPlacelineQuery = (function () {
    function SetPlacelineQuery(payload) {
        this.payload = payload;
        this.type = SET_PLACELINE_QUERY;
    }
    return SetPlacelineQuery;
}());
var AddPlacelineQuery = (function () {
    function AddPlacelineQuery(payload) {
        this.payload = payload;
        this.type = ADD_PLACELINE_QUERY;
    }
    return AddPlacelineQuery;
}());
var SetPlacelineLoading = (function () {
    function SetPlacelineLoading(payload) {
        this.payload = payload;
        this.type = SET_PLACELINE_LOADING;
    }
    return SetPlacelineLoading;
}());
var SetUsersListId = (function () {
    function SetUsersListId(payload) {
        this.payload = payload;
        this.type = SET_LIST_ID;
    }
    return SetUsersListId;
}());
var ToggleUsersListId = (function () {
    function ToggleUsersListId(payload) {
        this.payload = payload;
        this.type = TOGGLE_LIST_ID;
    }
    return ToggleUsersListId;
}());
var SetListQuery = (function () {
    function SetListQuery(payload) {
        this.payload = payload;
        this.type = SET_LIST_QUERY;
    }
    return SetListQuery;
}());
var AddListQuery = (function () {
    function AddListQuery(payload) {
        this.payload = payload;
        this.type = ADD_LIST_QUERY;
    }
    return AddListQuery;
}());
var ClearQueryKey = (function () {
    function ClearQueryKey(payload) {
        this.payload = payload;
        this.type = CLEAR_QUERY_KEY;
    }
    return ClearQueryKey;
}());
var SetUsersAnalyticsPage = (function () {
    function SetUsersAnalyticsPage(payload) {
        this.payload = payload;
        this.type = SET_USERS_ANALYTICS_PAGE;
    }
    return SetUsersAnalyticsPage;
}());
var SetUsersAnalyticsLoading = (function () {
    function SetUsersAnalyticsLoading(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_USERS_ANALYTICS_LOADING;
    }
    return SetUsersAnalyticsLoading;
}());
var SetUsersIndexPage = (function () {
    function SetUsersIndexPage(payload) {
        this.payload = payload;
        this.type = SET_USERS_INDEX_PAGE;
    }
    return SetUsersIndexPage;
}());
var AddUsersAnalyticsAll = (function () {
    function AddUsersAnalyticsAll(payload) {
        this.payload = payload;
        this.type = ADD_USERS_ANALYTICS_ALL;
    }
    return AddUsersAnalyticsAll;
}());
var SetUsersAnalyticsAll = (function () {
    function SetUsersAnalyticsAll(payload) {
        this.payload = payload;
        this.type = SET_USERS_ANALYTICS_ALL;
    }
    return SetUsersAnalyticsAll;
}());
var SetUsersAnalyticsAllLoading = (function () {
    function SetUsersAnalyticsAllLoading(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_USERS_ANALYTICS_ALL_LOADING;
    }
    return SetUsersAnalyticsAllLoading;
}());
var SetUsersIndexAll = (function () {
    function SetUsersIndexAll(payload) {
        this.payload = payload;
        //todo change name
        this.type = ADD_USERS_INDEX_ALL;
    }
    return SetUsersIndexAll;
}());
var SetUsersListApiType = (function () {
    function SetUsersListApiType(payload) {
        this.payload = payload;
        this.type = SET_USERS_LIST_API_TYPE;
    }
    return SetUsersListApiType;
}());
var SetUsersListDataMap = (function () {
    function SetUsersListDataMap(payload) {
        this.payload = payload;
        this.type = SET_USERS_LIST_DATA_MAP;
    }
    return SetUsersListDataMap;
}());
var SetUsersMarkersDataMap = (function () {
    function SetUsersMarkersDataMap(payload) {
        this.payload = payload;
        this.type = SET_USERS_MARKERS_DATA_MAP;
    }
    return SetUsersMarkersDataMap;
}());
var SetListActive = (function () {
    function SetListActive(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_LIST_ACTIVE;
    }
    return SetListActive;
}());
var SetMarkersActive = (function () {
    function SetMarkersActive(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_MARKERS_ACTIVE;
    }
    return SetMarkersActive;
}());
var SetSummaryActive = (function () {
    function SetSummaryActive(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_SUMMARY_ACTIVE;
    }
    return SetSummaryActive;
}());
var SetUsersSummary = (function () {
    function SetUsersSummary(payload) {
        this.payload = payload;
        this.type = SET_USERS_SUMMARY;
    }
    return SetUsersSummary;
}());
var SetSummaryLoading = (function () {
    function SetSummaryLoading(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_USERS_SUMMARY_LOADING;
    }
    return SetSummaryLoading;
}());



var UsersDispatcher = Object.freeze({
	SET_USER_DATA: SET_USER_DATA,
	SET_PLACELINE_ID: SET_PLACELINE_ID,
	TOGGLE_PLACELINE_ID: TOGGLE_PLACELINE_ID,
	SET_PLACELINE_QUERY: SET_PLACELINE_QUERY,
	ADD_PLACELINE_QUERY: ADD_PLACELINE_QUERY,
	SET_PLACELINE_LOADING: SET_PLACELINE_LOADING,
	SET_LIST_ACTIVE: SET_LIST_ACTIVE,
	SET_LIST_ID: SET_LIST_ID,
	SET_LIST_QUERY: SET_LIST_QUERY,
	ADD_LIST_QUERY: ADD_LIST_QUERY,
	CLEAR_QUERY_KEY: CLEAR_QUERY_KEY,
	TOGGLE_LIST_ID: TOGGLE_LIST_ID,
	SET_USERS_ANALYTICS_PAGE: SET_USERS_ANALYTICS_PAGE,
	SET_USERS_ANALYTICS_ID: SET_USERS_ANALYTICS_ID,
	SET_USERS_ANALYTICS_QUERY: SET_USERS_ANALYTICS_QUERY,
	SET_USERS_ANALYTICS_LOADING: SET_USERS_ANALYTICS_LOADING,
	SET_USERS_LIST_DATA_MAP: SET_USERS_LIST_DATA_MAP,
	SET_MARKERS_ACTIVE: SET_MARKERS_ACTIVE,
	SET_USERS_ANALYTICS_ALL: SET_USERS_ANALYTICS_ALL,
	ADD_USERS_ANALYTICS_ALL: ADD_USERS_ANALYTICS_ALL,
	SET_USERS_ANALYTICS_ALL_QUERY: SET_USERS_ANALYTICS_ALL_QUERY,
	ADD_USERS_ANALYTICS_ALL_QUERY: ADD_USERS_ANALYTICS_ALL_QUERY,
	SET_USERS_ANALYTICS_ALL_LOADING: SET_USERS_ANALYTICS_ALL_LOADING,
	SET_USERS_MARKERS_DATA_MAP: SET_USERS_MARKERS_DATA_MAP,
	SET_SUMMARY_ACTIVE: SET_SUMMARY_ACTIVE,
	SET_USERS_SUMMARY: SET_USERS_SUMMARY,
	SET_USERS_SUMMARY_LOADING: SET_USERS_SUMMARY_LOADING,
	SET_USERS_INDEX_PAGE: SET_USERS_INDEX_PAGE,
	ADD_USERS_INDEX_ALL: ADD_USERS_INDEX_ALL,
	SET_USERS_LIST_API_TYPE: SET_USERS_LIST_API_TYPE,
	SetUserData: SetUserData,
	SetPlacelineId: SetPlacelineId,
	TogglePlacelineId: TogglePlacelineId,
	SetPlacelineQuery: SetPlacelineQuery,
	AddPlacelineQuery: AddPlacelineQuery,
	SetPlacelineLoading: SetPlacelineLoading,
	SetUsersListId: SetUsersListId,
	ToggleUsersListId: ToggleUsersListId,
	SetListQuery: SetListQuery,
	AddListQuery: AddListQuery,
	ClearQueryKey: ClearQueryKey,
	SetUsersAnalyticsPage: SetUsersAnalyticsPage,
	SetUsersAnalyticsLoading: SetUsersAnalyticsLoading,
	SetUsersIndexPage: SetUsersIndexPage,
	AddUsersAnalyticsAll: AddUsersAnalyticsAll,
	SetUsersAnalyticsAll: SetUsersAnalyticsAll,
	SetUsersAnalyticsAllLoading: SetUsersAnalyticsAllLoading,
	SetUsersIndexAll: SetUsersIndexAll,
	SetUsersListApiType: SetUsersListApiType,
	SetUsersListDataMap: SetUsersListDataMap,
	SetUsersMarkersDataMap: SetUsersMarkersDataMap,
	SetListActive: SetListActive,
	SetMarkersActive: SetMarkersActive,
	SetSummaryActive: SetSummaryActive,
	SetUsersSummary: SetUsersSummary,
	SetSummaryLoading: SetSummaryLoading
});

var __assign$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var initialUsersAnalyticsAll = {
    resultsEntity: {},
    isFirst: false
};
var initialUsersIndexAll = {
    resultsEntity: {},
    isFirst: false
};
var initialState = {
    usersListActive: false,
    usersMarkersActive: false,
    usersSummaryActive: false,
    listApiType: ApiType.analytics,
    usersAnalyticsAll: initialUsersAnalyticsAll,
    usersIndexAll: initialUsersIndexAll
};
function usersReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        /*
        placeline
         */
        case SET_USER_DATA: {
            return __assign$1({}, state, { userData: action.payload });
        }
        case SET_PLACELINE_ID: {
            return __assign$1({}, state, { placelineId: action.payload });
        }
        case TOGGLE_PLACELINE_ID: {
            var placelineId = state.placelineId == action.payload ? null : action.payload;
            return __assign$1({}, state, { placelineId: placelineId });
        }
        case SET_PLACELINE_QUERY: {
            return __assign$1({}, state, { placelineQuery: action.payload });
        }
        case ADD_PLACELINE_QUERY: {
            return __assign$1({}, state, { placelineQuery: __assign$1({}, state.placelineQuery, action.payload) });
        }
        case SET_PLACELINE_LOADING: {
            return __assign$1({}, state, { placelineLoading: !!action.payload });
        }
        /*
        List
         */
        case SET_LIST_ID: {
            return __assign$1({}, state, { listId: action.payload });
        }
        case TOGGLE_LIST_ID: {
            var listId = state.listId == action.payload ? null : action.payload;
            return __assign$1({}, state, { listId: listId });
        }
        case SET_LIST_ACTIVE: {
            return __assign$1({}, state, { usersListActive: action.payload });
        }
        case ADD_LIST_QUERY: {
            return __assign$1({}, state, { listQuery: __assign$1({}, state.listQuery, action.payload) });
        }
        case SET_LIST_QUERY: {
            return __assign$1({}, state, { listQuery: action.payload });
        }
        case CLEAR_QUERY_KEY: {
            var listQuery = __assign$1({}, state.listQuery);
            if (listQuery)
                delete listQuery[action.payload];
            return __assign$1({}, state, { listQuery: listQuery });
        }
        /*
        Analytics page
         */
        case SET_USERS_ANALYTICS_PAGE: {
            return __assign$1({}, state, { usersAnalyticsPage: action.payload });
        }
        case SET_USERS_ANALYTICS_LOADING: {
            return __assign$1({}, state, { analyticsLoading: action.payload });
        }
        case SET_USERS_INDEX_PAGE: {
            return __assign$1({}, state, { usersIndexPage: action.payload });
        }
        case ADD_USERS_ANALYTICS_ALL: {
            var resultsEntity = {};
            if (state.usersAnalyticsAll) {
                resultsEntity = __assign$1({}, state.usersAnalyticsAll.resultsEntity, indexBy(action.payload.results, "id"));
            }
            return __assign$1({}, state, { usersAnalyticsAll: {
                    next: action.payload.next,
                    previous: action.payload.previous,
                    count: action.payload.count,
                    resultsEntity: resultsEntity
                } });
        }
        case SET_USERS_ANALYTICS_ALL: {
            var resultsEntity = {};
            if (state.usersAnalyticsAll) {
                resultsEntity = indexBy(action.payload.results, "id");
            }
            return __assign$1({}, state, { usersAnalyticsAll: {
                    next: action.payload.next,
                    previous: action.payload.previous,
                    count: action.payload.count,
                    resultsEntity: resultsEntity
                } });
        }
        case SET_USERS_ANALYTICS_ALL_LOADING: {
            return __assign$1({}, state, { analyticsAllLoading: action.payload });
        }
        case ADD_USERS_INDEX_ALL: {
            // const newEntities = _.indexBy(action.payload.results, 'id');
            var resultsEntity = state.usersIndexAll
                ? __assign$1({}, state.usersIndexAll.resultsEntity, action.payload.resultsEntity) : {};
            return __assign$1({}, state, { usersIndexAll: __assign$1({}, action.payload, { resultsEntity: resultsEntity }) });
        }
        case SET_USERS_LIST_DATA_MAP: {
            return __assign$1({}, state, { usersListDataMap: action.payload });
        }
        case SET_USERS_MARKERS_DATA_MAP: {
            return __assign$1({}, state, { usersMarkersDataMap: action.payload });
        }
        case SET_USERS_LIST_API_TYPE: {
            return __assign$1({}, state, { listApiType: action.payload });
        }
        case SET_MARKERS_ACTIVE: {
            return __assign$1({}, state, { usersMarkersActive: action.payload });
        }
        /*
        Summary
         */
        case SET_SUMMARY_ACTIVE: {
            return __assign$1({}, state, { usersSummaryActive: action.payload });
        }
        case SET_USERS_SUMMARY: {
            return __assign$1({}, state, { usersSummary: action.payload });
        }
        case SET_USERS_SUMMARY_LOADING: {
            return __assign$1({}, state, { summaryLoading: !!action.payload });
        }
        default: {
            return state;
        }
    }
}
var getUserData = function (state) { return state.userData; };
var getPlacelineId = function (state) { return state.placelineId; };
var getPlacelineQuery = function (state) { return state.placelineQuery; };
var getPlacelineLoading = function (state) { return state.placelineLoading; };
var getListActive = function (state) { return state.usersListActive; };
var getListId = function (state) { return state.listId; };
var getListQuery = function (state) { return state.listQuery; };
var getAnalyticsPage = function (state) { return state.usersAnalyticsPage; };
var getAnalyticsLoading = function (state) { return state.analyticsLoading; };
var getAnalyticsAll = function (state) { return state.usersAnalyticsAll; };
var getAnalyticsAllLoading = function (state) {
    return state.analyticsAllLoading;
};
var getMarkerDataMap = function (state) { return state.usersMarkersDataMap; };
var getIndexAll = function (state) { return state.usersIndexAll; };
// export const getAnalyticFilteredsMarkers = (state: State) => validMarkers(state.usersAnalyticsAll);
// export const getIndexFilteredMarkers = (state: State) => validMarkers(state.usersIndexAll);
var getIndexPage = function (state) { return state.usersIndexPage; };
var getListApiType = function (state) { return state.listApiType; };
var getMarkersActive = function (state) { return state.usersMarkersActive; };
var getSummary = function (state) { return state.usersSummary; };
var getSummaryActive = function (state) { return state.usersSummaryActive; };
var getSummaryLoading = function (state) { return state.summaryLoading; };
var getAnalyticFilteredMarkers = createSelector(getAnalyticsAll, getMarkerDataMap, function (allData, mapFunc) {
    return mapFunc ? mapFunc(allData) : allData;
});
var getIndexFilteredMarkers = createSelector(getIndexAll, getMarkerDataMap, function (allData, mapFunc) {
    return mapFunc ? mapFunc(allData) : allData;
});
var getIndexActive = createSelector(getListApiType, getListActive, function (apiType, isListActive) {
    return false;
    // return apiType === ApiType.index && isListActive
});
var getAnalyticsActive = createSelector(getListApiType, getListActive, function (apiType, isListActive) {
    return isListActive;
    // return apiType === ApiType.analytics && isListActive
});
var getIndexMarkersActive = createSelector(getListApiType, getMarkersActive, function (apiType, isMarkersActive) {
    return false;
    // return apiType === ApiType.index && isMarkersActive
});
var getAnalyticsMarkersActive = createSelector(getListApiType, getMarkersActive, function (apiType, isMarkersActive) {
    return isMarkersActive;
    // return apiType === ApiType.analytics && isMarkersActive
});

var SET_SELECTED_ID = "[SEGMENTS] set selected id";
var SET_HIGHLIGHTED_ID = "[SEGMENTS] set highlighted id";
var SET_RESET_MAP_ID = "[SEGMENTS] set reset map id";
var SET_POPUP_ID = "[SEGMENTS] set popup id";
var SetSelectedId = (function () {
    function SetSelectedId(payload) {
        this.payload = payload;
        this.type = SET_SELECTED_ID;
    }
    return SetSelectedId;
}());
var SetHighlightedId = (function () {
    function SetHighlightedId(payload) {
        this.payload = payload;
        this.type = SET_HIGHLIGHTED_ID;
    }
    return SetHighlightedId;
}());
var SetResetMapId = (function () {
    function SetResetMapId(payload) {
        this.payload = payload;
        this.type = SET_RESET_MAP_ID;
    }
    return SetResetMapId;
}());
var SetPopupId = (function () {
    function SetPopupId(payload) {
        this.payload = payload;
        this.type = SET_POPUP_ID;
    }
    return SetPopupId;
}());



var SegmentsDispatcher = Object.freeze({
	SET_SELECTED_ID: SET_SELECTED_ID,
	SET_HIGHLIGHTED_ID: SET_HIGHLIGHTED_ID,
	SET_RESET_MAP_ID: SET_RESET_MAP_ID,
	SET_POPUP_ID: SET_POPUP_ID,
	SetSelectedId: SetSelectedId,
	SetHighlightedId: SetHighlightedId,
	SetResetMapId: SetResetMapId,
	SetPopupId: SetPopupId
});

var __assign$2 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var initialState$1 = {};
function segmentsReducer(state, action) {
    if (state === void 0) { state = initialState$1; }
    switch (action.type) {
        case SET_SELECTED_ID: {
            return __assign$2({}, state, { selectedId: action.payload });
        }
        case SET_RESET_MAP_ID: {
            return __assign$2({}, state, { resetMapId: action.payload });
        }
        case SET_HIGHLIGHTED_ID: {
            return !!state.selectedId
                ? __assign$2({}, state, { highlightedId: action.payload }) : state;
        }
        case SET_POPUP_ID: {
            return !!state.selectedId ? __assign$2({}, state, { popupId: action.payload }) : state;
        }
        default: {
            return state;
        }
    }
}
var getSelectedId = function (state) { return state.selectedId; };
var getResetMapId = function (state) { return state.resetMapId; };

var SET_LIST_ACTIVE$1 = "[GROUPS] set list active";
var SET_ID = "[GROUPS] set id";
var SET_GROUPS = "[GROUPS] set groups";
var SET_GROUP = "[GROUPS] set group";
var SetListActive$1 = (function () {
    function SetListActive(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_LIST_ACTIVE$1;
    }
    return SetListActive;
}());
var SetGroupId = (function () {
    function SetGroupId(payload) {
        this.payload = payload;
        this.type = SET_ID;
    }
    return SetGroupId;
}());
var SetGroupsAll = (function () {
    function SetGroupsAll(payload) {
        this.payload = payload;
        this.type = SET_GROUPS;
    }
    return SetGroupsAll;
}());
var SetGroup = (function () {
    function SetGroup(payload) {
        this.payload = payload;
        this.type = SET_GROUP;
    }
    return SetGroup;
}());



var GroupsDispatcher = Object.freeze({
	SET_LIST_ACTIVE: SET_LIST_ACTIVE$1,
	SET_ID: SET_ID,
	SET_GROUPS: SET_GROUPS,
	SET_GROUP: SET_GROUP,
	SetListActive: SetListActive$1,
	SetGroupId: SetGroupId,
	SetGroupsAll: SetGroupsAll,
	SetGroup: SetGroup
});

var __assign$3 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var initialState$2 = {
    listActive: false
};
function groupsReducer(state, action) {
    if (state === void 0) { state = initialState$2; }
    switch (action.type) {
        case SET_LIST_ACTIVE$1: {
            return __assign$3({}, state, { listActive: action.payload });
        }
        case SET_ID: {
            return __assign$3({}, state, { selectedId: action.payload });
        }
        case SET_GROUPS: {
            return __assign$3({}, state, { allGroups: action.payload });
        }
        case SET_GROUP: {
            return __assign$3({}, state, { group: action.payload });
        }
        default: {
            return state;
        }
    }
}
var getId = function (state) { return state.selectedId; };
var getAllGroups = function (state) { return state.allGroups; };
var getListActive$1 = function (state) { return state.listActive; };

var SET_ACCOUNT_USER = "[ACCOUNT] set account user";
var SET_MEMBERHSHIPS_ALL = "[ACCOUNT] set memberships all";
var SET_KEY = "[ACCOUNT] set key";
var SET_TEMP_KEY = "[ACCOUNT] set temp key";
var SET_USER_ID = "[ACCOUNT] set user id";
var SetAccountUser = (function () {
    function SetAccountUser(payload) {
        this.payload = payload;
        this.type = SET_ACCOUNT_USER;
    }
    return SetAccountUser;
}());
var SetMembershipsAll = (function () {
    function SetMembershipsAll(payload) {
        this.payload = payload;
        this.type = SET_MEMBERHSHIPS_ALL;
    }
    return SetMembershipsAll;
}());
var SetKey = (function () {
    function SetKey(payload) {
        this.payload = payload;
        this.type = SET_KEY;
    }
    return SetKey;
}());
var SetUserId = (function () {
    function SetUserId(payload) {
        this.payload = payload;
        this.type = SET_USER_ID;
    }
    return SetUserId;
}());

var __assign$4 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var initialState$3 = {
    key: "false"
};
function reducer$1(state, action) {
    if (state === void 0) { state = initialState$3; }
    switch (action.type) {
        case SET_ACCOUNT_USER: {
            return __assign$4({}, state, { accountUser: action.payload });
        }
        case SET_MEMBERHSHIPS_ALL: {
            // let results = state.membershipsAll ? [...state.membershipsAll.results, ...action.payload.results] : action.payload.results;
            // return {...state, membershipsAll: {...action.payload, results}}
            return __assign$4({}, state, { membershipsAll: action.payload });
        }
        case SET_KEY: {
            return __assign$4({}, state, { key: action.payload });
        }
        case SET_TEMP_KEY: {
            return __assign$4({}, state, { tempKey: action.payload });
        }
        case SET_USER_ID: {
            return __assign$4({}, state, { userId: action.payload });
        }
        default: {
            return state;
        }
    }
}
var getAccountUser$1 = function (state) { return state.accountUser; };
var getMembershipsAll = function (state) { return state.membershipsAll; };
var getKey = function (state) { return state.key; };
var getTempKey = function (state) { return state.tempKey; };
var getUserId = function (state) { return state.userId; };
var getCurrentKey = createSelector(getKey, getTempKey, function (key, tempKey) {
    return tempKey || key;
});

/*
List
 */
var SET_ACTIONS_LIST = "[ACTIONS] set actions list";
var SET_ACTIONS_LIST_QUERY = "[ACTIONS] set actions list query";
var ADD_ACTIONS_LIST_QUERY = "[ACTIONS] add actions list query";
var SET_ACTIONS_LIST_ACTIVE = "[ACTIONS] set actions list active";
var SET_ACTIONS_LIST_LOADING = "[ACTIONS] set actions list loading";
/*
Graph
 */
var SET_ACTIONS_GRAPH = "[ACTIONS] set actions graph";
var SET_ACTIONS_GRAPH_QUERY = "[ACTIONS] set actions graph query";
var ADD_ACTIONS_GRAPH_QUERY = "[ACTIONS] add actions graph query";
var SET_ACTIONS_GRAPH_LOADING = "[ACTIONS] set actions graph loading";
/*
Summary
 */
var SET_ACTIONS_SUMMARY = "[ACTIONS] set actions summary";
var SET_ACTIONS_SUMMARY_ACTIVE = "[ACTIONS] set actions summary active";
var ADD_ACTIONS_SUMMARY_QUERY = "[ACTIONS] actions summary query";
var SET_ACTIONS_SUMMARY_QUERY = "[ACTIONS] add set actions summary query";
var SET_ACTIONS_SUMMARY_LOADING = "[ACTIONS] set actions summary loading";
/*
Heatmap
 */
// export const SET_ACTIONS_HEATMAP = "[ACTIONS] set actions summary";
// export const SET_ACTIONS_HEATMAP_ACTIVE = "[ACTIONS] set actions summary active";
// export const ADD_ACTIONS_HEATMAP_QUERY = "[ACTIONS] actions summary query";
// export const SET_ACTIONS_HEATMAP_QUERY = "[ACTIONS] add set actions summary query";
// export const SET_ACTIONS_HEATMAP_LOADING = "[ACTIONS] set actions graph loading";
var SetList = (function () {
    function SetList(payload) {
        this.payload = payload;
        this.type = SET_ACTIONS_LIST;
    }
    return SetList;
}());
var SetListQuery$1 = (function () {
    function SetListQuery(payload) {
        this.payload = payload;
        this.type = SET_ACTIONS_LIST_QUERY;
    }
    return SetListQuery;
}());
var SetListActive$2 = (function () {
    function SetListActive(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_ACTIONS_LIST_ACTIVE;
    }
    return SetListActive;
}());
var SetListLoading = (function () {
    function SetListLoading(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_ACTIONS_LIST_LOADING;
    }
    return SetListLoading;
}());
var SetSummary = (function () {
    function SetSummary(payload) {
        this.payload = payload;
        this.type = SET_ACTIONS_SUMMARY;
    }
    return SetSummary;
}());
var SetSummaryQuery = (function () {
    function SetSummaryQuery(payload) {
        this.payload = payload;
        this.type = SET_ACTIONS_SUMMARY_QUERY;
    }
    return SetSummaryQuery;
}());
var SetSummaryLoading$1 = (function () {
    function SetSummaryLoading(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_ACTIONS_SUMMARY_LOADING;
    }
    return SetSummaryLoading;
}());
var SetSummaryActive$1 = (function () {
    function SetSummaryActive(payload) {
        if (payload === void 0) { payload = true; }
        this.payload = payload;
        this.type = SET_ACTIONS_SUMMARY_ACTIVE;
    }
    return SetSummaryActive;
}());

var __assign$5 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};

var initialState$4 = {
    list: null,
    listLoading: false,
    listQuery: {},
    listActive: false,
    summary: null,
    summaryActive: false,
    summaryLoading: false,
    summaryQuery: {},
    graph: null,
    graphLoading: false,
    graphQuery: {}
};
function actionsReducer(state, action) {
    if (state === void 0) { state = initialState$4; }
    switch (action.type) {
        /*
        list
         */
        case SET_ACTIONS_LIST: {
            return __assign$5({}, state, { list: action.payload });
        }
        case SET_ACTIONS_LIST_ACTIVE: {
            return __assign$5({}, state, { listActive: action.payload });
        }
        case SET_ACTIONS_LIST_QUERY: {
            return __assign$5({}, state, { listQuery: action.payload });
        }
        case ADD_ACTIONS_LIST_QUERY: {
            var listQuery = __assign$5({}, state.listQuery, action.payload);
            return __assign$5({}, state, { listQuery: listQuery });
        }
        case SET_ACTIONS_LIST_LOADING: {
            return __assign$5({}, state, { listLoading: action.payload });
        }
        /*
        Summary
         */
        case SET_ACTIONS_SUMMARY: {
            return __assign$5({}, state, { summary: action.payload });
        }
        case SET_ACTIONS_SUMMARY_LOADING: {
            return __assign$5({}, state, { summaryLoading: action.payload });
        }
        case SET_ACTIONS_SUMMARY_ACTIVE: {
            return __assign$5({}, state, { summaryActive: action.payload });
        }
        case SET_ACTIONS_SUMMARY_QUERY: {
            return __assign$5({}, state, { summaryQuery: action.payload });
        }
        case ADD_ACTIONS_SUMMARY_QUERY: {
            var summaryQuery = __assign$5({}, state.summaryQuery, action.payload);
            return __assign$5({}, state, { summaryQuery: summaryQuery });
        }
        /*
        Graph
         */
        case SET_ACTIONS_GRAPH: {
            return __assign$5({}, state, { graph: action.payload });
        }
        case SET_ACTIONS_GRAPH_LOADING: {
            return __assign$5({}, state, { graphLoading: action.payload });
        }
        case SET_ACTIONS_GRAPH_QUERY: {
            return __assign$5({}, state, { graphQuery: action.payload });
        }
        case ADD_ACTIONS_GRAPH_QUERY: {
            var graphQuery = __assign$5({}, state.graphQuery, action.payload);
            return __assign$5({}, state, { graphQuery: graphQuery });
        }
        default: {
            return state;
        }
    }
}

var getList = function (state) { return state.list; };
var getListLoading = function (state) { return state.listLoading; };
var getListActive$2 = function (state) { return state.listActive; };
var getListQuery$1 = function (state) { return state.listQuery; };
var getSummary$1 = function (state) { return state.summary; };
var getSummaryActive$1 = function (state) { return state.summaryActive; };
var getSummaryQuery = function (state) { return state.summaryQuery; };
var getSummaryLoading$1 = function (state) { return state.summaryLoading; };
var getGraph = function (state) { return state.graph; };
var getGraphQuery = function (state) { return state.graphQuery; };
var getGraphLoading = function (state) { return state.graphLoading; };

var reducers = {};
function reducer(state, action) {
    return combineReducers(reducers);
}
var metaReducers = [];
/**
 * Users selectors
 */
var getUsersState = createFeatureSelector("users");
var getUsersUsersData = createSelector(getUsersState, getUserData);
var getUsersPlacelineId = createSelector(getUsersState, getPlacelineId);
var getUsersPlacelineQuery = createSelector(getUsersState, getPlacelineQuery);
var getUsersPlacelineLoading = createSelector(getUsersState, getPlacelineLoading);
var getUsersListActive = createSelector(getUsersState, getListActive);
var getUsersListId = createSelector(getUsersState, getListId);
var getUsersListQuery = createSelector(getUsersState, getListQuery);
var getUsersAnalyticsPage = createSelector(getUsersState, getAnalyticsPage);
var getUsersAnalyticsLoading = createSelector(getUsersState, getAnalyticsLoading);
var getUsersIndexPage = createSelector(getUsersState, getIndexPage);
// export const getUsersListApiType = createSelector(getUsersState, fromUsers.getListApiType);
var getUsersIndexIsActive = createSelector(getUsersState, getIndexActive);
var getUsersAnalyticsIsActive = createSelector(getUsersState, getAnalyticsActive);
var getUsersIndexMarkersIsActive = createSelector(getUsersState, getIndexMarkersActive);
var getUsersAnalyticsMarkersIsActive = createSelector(getUsersState, getAnalyticsMarkersActive);
var getUsersAnalyticsAllLoading = createSelector(getUsersState, getAnalyticsAllLoading);
var getUsersIndexFilteredMarker = createSelector(getUsersState, getIndexFilteredMarkers);
var getUsersAnalyticsFilteredMarker = createSelector(getUsersState, getAnalyticFilteredMarkers);
var getUsersIndexAll = createSelector(getUsersState, getIndexAll);
var getUsersAnalyticsAll = createSelector(getUsersState, getAnalyticsAll);
var getUsersSummary = createSelector(getUsersState, getSummary);
var getUsersSummaryActive = createSelector(getUsersState, getSummaryActive);
var getUsersSummaryLoading = createSelector(getUsersState, getSummaryLoading);
/**
 * Segment selectors
 */
var getSegmentsState = createFeatureSelector("segments");
var getSegmentsSelectedId = createSelector(getSegmentsState, getSelectedId);
var getSegmentsResetMapId = createSelector(getSegmentsState, getResetMapId);
/**
 *
 * Groups reducer
 */
var getGroupsState = createFeatureSelector("groups");
var getGroupId = createSelector(getGroupsState, getId);
var getGroupAll = createSelector(getGroupsState, getAllGroups);
var getGroupListActive = createSelector(getGroupsState, getListActive$1);
/**
 Account
 */
var getAccountState = createFeatureSelector("accounts");
var getAccountUser = createSelector(getAccountState, getAccountUser$1);
var getAccountMembershipsAll = createSelector(getAccountState, getMembershipsAll);
var getAccountKey = createSelector(getAccountState, getKey);
var getAccountTempKey = createSelector(getAccountState, getTempKey);
var getAccountCurrentKey = createSelector(getAccountState, getCurrentKey);
var getAccountUserId = createSelector(getAccountState, getUserId);
/**
 * Actions
 */
var getActionsState = createFeatureSelector("actions");
var getActionsList = createSelector(getActionsState, getList);
var getActionsListLoading = createSelector(getActionsState, getListLoading);
var getActionsListActive = createSelector(getActionsState, getListActive$2);
var getActionsListQuery = createSelector(getActionsState, getListQuery$1);
var getActionsSummary = createSelector(getActionsState, getSummary$1);
var getActionsSummaryActive = createSelector(getActionsState, getSummaryActive$1);
var getActionsSummaryLoading = createSelector(getActionsState, getSummaryLoading$1);
var getActionsSummaryQuery = createSelector(getActionsState, getSummaryQuery);
var getActionsGraph = createSelector(getActionsState, getGraph);
var getActionsGraphLoading = createSelector(getActionsState, getGraphLoading);
var getActionsGraphQuery = createSelector(getActionsState, getGraphQuery);

var EntityItemClient = (function () {
    function EntityItemClient() {
        //listGetData
        this.updateStrategy = "live";
        this.pollDuration = 10000;
        // api$;
        this.name = "item";
        this.allowedQueryKeys = null;
        // setData(data) {
        //
        // };
        // setActive(isActive: boolean = true){
        //
        // }
    }
    // init: () => void;
    // getData$: (data) => any;
    EntityItemClient.prototype.firstDataEffect = function () {
        this.setLoading(false);
    };
    EntityItemClient.prototype.getDefaultQuery = function () {
        return {};
    };
    Object.defineProperty(EntityItemClient.prototype, "apiParams$", {
        get: function () {
            return this.getApiParams$();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityItemClient.prototype, "apiQuery$", {
        get: function () {
            return this.getApiQuery$();
        },
        enumerable: true,
        configurable: true
    });
    return EntityItemClient;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$6 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function getIdQueryDataMixin(Base) {
    return (function (_super) {
        __extends$2(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getData$ = function (_a) {
            var _this = this;
            var id = _a[0], query = _a[1];
            var update = this.getFirstData$([id, query]).pipe(expand(function (data) {
                return timer$1(_this.pollDuration).pipe(switchMap(function () {
                    return _this.api$(id, query);
                }));
            }));
            return this.updateStrategy != "once"
                ? update
                : this.getFirstData$([id, query]);
        };
        return class_1;
    }(Base));
}
function getPageDataMixin(Base) {
    return (function (_super) {
        __extends$2(class_2, _super);
        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_2.prototype.getData$ = function (_a) {
            var _this = this;
            var query = _a[0];
            var update = this.getFirstData$([query]).pipe(expand(function (data) {
                return timer$1(_this.pollDuration).pipe(switchMap(function () {
                    if (_this.updateStrategy == "live") {
                        return _this.api$(query);
                    }
                    else {
                        var ids = map(data.results, function (item) {
                            return item["id"];
                        });
                        var updateQuery = __assign$6({}, query, { id: ids.toString(), status: null, page: null });
                        return _this.api$(updateQuery).pipe(map$1(function (newData) {
                            return __assign$6({}, data, { results: newData.results });
                        }));
                    }
                }));
            }));
            return this.updateStrategy != "once"
                ? update
                : this.getFirstData$([query]);
        };
        return class_2;
    }(Base));
}
function getQueryDataMixin(Base) {
    return (function (_super) {
        __extends$2(class_3, _super);
        function class_3() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_3.prototype.getData$ = function (_a) {
            var _this = this;
            var query = _a[0];
            var update = this.getFirstData$([query]).pipe(expand(function (data) {
                return timer$1(_this.pollDuration).pipe(switchMap(function () {
                    return _this.api$(query);
                }));
            }));
            return this.updateStrategy != "once"
                ? update
                : this.getFirstData$([query]);
        };
        return class_3;
    }(Base));
}
function getAllPageDataMixin(Base) {
    return (function (_super) {
        __extends$2(class_4, _super);
        function class_4() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_4.prototype.getData$ = function (_a) {
            var query = _a[0];
            return this.getFirstData$([query]);
        };
        return class_4;
    }(Base));
}

var __assign$7 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var MergeQuery = function (defaultQuery) {
    return function (query$) {
        return query$.pipe(map$1(function (query) {
            return __assign$7({}, defaultQuery, query);
        }));
    };
};
// export const CombineQuery = (addQuery$) => {
//   return (query$) => {
//     if(addQuery$) {
//       return combineLatest(
//         addQuery$,
//         query$,
//         (addQuery, query) => {
//           return query ? {...addQuery, ...query} : query;
//         }
//       )
//     } else {
//       return query$
//     }
//
//   }
// };
// export const PageResults = (pageData$: Observable<Page<any> | null>): Observable<any[] | any> => {
//   return pageData$.pipe(map((pageDate: Page<any> | null) => {
//     return pageDate ? pageDate.results : pageDate;
//   }))
// };
// export const DateRangeToQuery = (dateRangeParam: string): (param: Observable<IDateRange>) => Observable<object> => {
//   return (dateRangeQuery$: Observable<IDateRange>) => {
//     return dateRangeQuery$.pipe(
//       map((dateRange) => {
//         if (!dateRange) return {};
//         let start =  dateRange['start'];
//         let end = dateRange['end'];
//         let param = dateRangeParam;
//         return {[`min_${param}`]: start, [`max_${param}`]: end}
//       })
//     )
//   }
// };

// export const itemAsPage = <T>() => {
//   return (item$): Observable<Page<T>> => {
//     return item$.pipe(
//       map((item) => {
//         return item ?
//           {
//             count: 1,
//             next: null,
//             previous: null,
//             results: [item]
//           } : null
//       })
//     )
//   }
// };

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// import {MergeQuery} from "ht-data";
function listQueryMixin(Base) {
    return (function (_super) {
        __extends$3(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getApiQuery$ = function () {
            return this.getApiParams$().pipe(map$1(function (data) {
                return data[0];
            }));
        };
        class_1.prototype.getBaseQuery$ = function () {
            var baseQuery$ = this.query$.pipe(AllowedQueryMap(this.allowedQueryMap), MergeQuery(this.getDefaultQuery()), CombineQueries([this.dateRange.data$.pipe(DateRangeToQuery$(this.dateParam)) || of$1({})]));
            return baseQuery$;
        };
        class_1.prototype.getApiParams$ = function () {
            var baseQuery$ = this.getBaseQuery$().pipe(map$1(function (data) {
                return [data];
            }));
            return this.active$
                ? this.active$.pipe(switchMap(function (isActive) {
                    // console.log(isActive, "accc");
                    return isActive ? baseQuery$ : of$1([]);
                }))
                : baseQuery$;
        };
        return class_1;
    }(Base));
}
function itemQueryMixin(Base) {
    return (function (_super) {
        __extends$3(class_2, _super);
        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_2.prototype.getApiQuery$ = function () {
            return this.getApiParams$().pipe(map$1(function (data) {
                return data[1];
            }));
        };
        class_2.prototype.getApiParams$ = function () {
            return combineLatest$1(this.id$, this.query$.pipe(MergeQuery(this.getDefaultQuery())));
        };
        return class_2;
    }(Base));
}

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function clientSubMixin(Base) {
    return (function (_super) {
        __extends$4(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            _this.init();
            return _this;
        }
        class_1.prototype.init = function () {
            var _this = this;
            if (!this.dataSub) {
                this.dataSub = this.getApiParams$()
                    .pipe(switchMap(function (data) {
                    if (data && data[0]) {
                        var loading = typeof data[0] === "string" ? data[0] : true;
                        _this.setLoading(loading);
                        return _this.getData$(data);
                    }
                    else {
                        return empty$1();
                    }
                }))
                    .subscribe(function (data) {
                    _this.setData(data);
                });
            }
        };
        return class_1;
    }(Base));
}

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function getFirstDataMixin(Base) {
    return (function (_super) {
        __extends$5(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getFirstData$ = function (args) {
            var _this = this;
            var entity = this;
            return entity.api$.apply(entity, args).pipe(tap(function (data) {
                _this.firstDataEffect(data);
            }));
        };
        return class_1;
    }(Base));
}
//
// export interface IQueryFirstDataBase {
//   setLoading(any): void,
//   api$(query): Observable<any>
// }
//
// export function getQueryFirstDataMixin <TBase extends Constructor<IQueryFirstDataBase>>(Base: TBase) {
//   return class extends Base {
//     getFirstData$([query]) {
//       let entity = this;
//       return entity.api$(query).pipe(
//         tap((data) => {
//           this.setLoading(false);
//         })
//       );
//     }
//   }
// }

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var UsersPlaceline = (function (_super) {
    __extends$1(UsersPlaceline, _super);
    function UsersPlaceline(_a) {
        var store = _a.store, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "users placeline";
        _this.updateStrategy = "live";
        _this.api$ = function (id, query) { return api.placeline(id, query); };
        _this.store = store;
        _this.query$ = _this.store.select(getUsersPlacelineQuery);
        _this.data$ = _this.store.select(getUsersUsersData);
        _this.loading$ = _this.store.select(getUsersPlacelineLoading);
        _this.id$ = _this.store.select(getUsersPlacelineId);
        _this.segmentsState$ = _this.store.select(getSegmentsState);
        _this.segmentSelectedId$ = _this.store.select(getSegmentsSelectedId);
        _this.segmentResetId$ = _this.store.select(getSegmentsResetMapId);
        return _this;
        // this.init()
    }
    UsersPlaceline.prototype.setData = function (data) {
        this.store.dispatch(new SetUserData(data));
    };
    UsersPlaceline.prototype.setLoading = function (data) {
        this.store.dispatch(new SetPlacelineLoading(data));
    };
    UsersPlaceline.prototype.setId = function (id) {
        this.store.dispatch(new SetPlacelineId(id));
    };
    UsersPlaceline.prototype.toggleId = function (userId) {
        this.store.dispatch(new TogglePlacelineId(userId));
    };
    UsersPlaceline.prototype.setQuery = function (query) {
        this.store.dispatch(new SetPlacelineQuery(query));
    };
    UsersPlaceline.prototype.setSegmentSelectedId = function (segmentId) {
        this.store.dispatch(new SetSelectedId(segmentId));
    };
    UsersPlaceline.prototype.setSegmentResetMapId = function (segmentId) {
        this.store.dispatch(new SetResetMapId(segmentId));
    };
    UsersPlaceline.prototype.getMapData$ = function () {
        // return dataWithSelectedId$(this.data$, this.segmentSelectedId$, [
        //   "segments"
        // ]);
    };
    UsersPlaceline.prototype.clearData = function () {
        this.setData(null);
        this.setQuery({});
    };
    return UsersPlaceline;
}(EntityItemClient));
var UsersPlacelineClient = clientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(UsersPlaceline))));
// applyMixins(UsersPlacelineClient, [ItemGetData, ItemQuery, ClientSub]);
// export const UsersPlacelineClientFactory = (): UsersPlaceline => {
//   let innerConfig: Partial<EntityTypeConfig> = {
//     name: 'users placeline',
//     updateStrategy: 'live',
//   };
//
//   let itemSelectors: EntityItemSelectors = {
//     query$: store.select(fromRoot.getQueryPlacelineQuery),
//     data$: store.select(fromRoot.getUsersUsersData),
//     loading$: store.select(fromRoot.getLoadingUserData),
//     id$: store.select(fromRoot.getQueryPlacelineId)
//   };
//
//   let placelineSelectors: AddUsersPlacelineSelector = {
//     segmentsState$: store.select(fromRoot.getSegmentsState),
//     getMapData$() {
//       return Observable.combineLatest(
//         this.data$,
//         this.segmentsState$,
//         (userData: IUserData, {selectedId, resetMapId}) => {
//           if(userData && (selectedId || resetMapId)) {
//             const id = selectedId || resetMapId;
//             let segments = _.filter(userData.segments, (segment: ISegment) => {
//               return segment.id === id;
//             });
//             userData = {...userData, segments: segments, events: [], actions: []}
//           }
//           return userData
//         }
//       )
//     }
//   };
//
//   let dispatchers: EntityItemDispatchers = {
//     setData(data) {
//       store.dispatch(new fromUsersDispatcher.SetUserData(data))
//     },
//     setLoading(data) {
//       store.dispatch(new fromLoadingDispatcher.SetLoadingUserData(data))
//     },
//     setId(id) {
//       store.dispatch(new fromQueryDispatcher.SetPlacelineId(id))
//     },
//     toggleId(userId: string) {
//       store.dispatch(new fromQueryDispatcher.TogglePlacelineId(userId))
//     },
//     addQuery(query) {
//       store.dispatch(new fromQueryDispatcher.SetPlacelineQuery(query))
//     }
//   };
//
//   let placelineDispatchers: AddUsersPlacelineDispatchers = {
//     setSegmentSelectedId(segmentId) {
//       store.dispatch(new fromSegmentsDispatcher.SetSelectedId(segmentId))
//     },
//     setSegmentResetMapId(segmentId: string) {
//       store.dispatch(new fromSegmentsDispatcher.SetResetMapId(segmentId))
//     },
//   };
//
//
//   let api = clientApi.users;
//   let api$ = (id, query) => api.placeline(id, query);
//
//   let state = {
//     api$,
//     selectors: {
//       ...itemSelectors,
//       ...placelineSelectors
//     },
//     dispatchers: {
//       ...dispatchers,
//       ...placelineDispatchers
//     }
//   };
//
//   const placeline = entityClientFactory(state, innerConfig, 'item') as UsersPlaceline;
//
//   placeline.init();
//
//   return placeline
// };

var EntityListClient = (function () {
    function EntityListClient() {
        //listGetData
        this.updateStrategy = "live";
        this.pollDuration = 10000;
        // api$;
        this.name = "list";
        //
        // setData(data) {
        //
        // };
        //
        // setActive(isActive: boolean = true){
        //
        // }
    }
    // init: () => void;
    // getData$: (data) => any;
    // dataSub: Subscription;
    EntityListClient.prototype.firstDataEffect = function (data) {
        this.setLoading(false);
    };
    EntityListClient.prototype.getDefaultQuery = function () {
        return { page_size: 10 };
    };
    Object.defineProperty(EntityListClient.prototype, "apiParams$", {
        get: function () {
            return this.getApiParams$();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityListClient.prototype, "apiQuery$", {
        get: function () {
            return this.getApiQuery$();
        },
        enumerable: true,
        configurable: true
    });
    return EntityListClient;
}());

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$8 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var UsersAnalytics = (function (_super) {
    __extends$6(UsersAnalytics, _super);
    function UsersAnalytics(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "users analytics list";
        _this.defaultQuery = { ordering: "-last_heartbeat_at" };
        _this.api$ = function (query) {
            return api.analytics(query);
        };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.query$ = _this.store.select(getUsersListQuery);
        _this.dateParam = dateParam;
        _this.active$ = _this.store.select(getUsersAnalyticsIsActive);
        _this.data$ = _this.store.select(getUsersAnalyticsPage);
        _this.id$ = _this.store.select(getUsersListId);
        _this.loading$ = _this.store.select(getUsersAnalyticsLoading);
        _this.dataArray$ = _this.data$.pipe(PageResults$);
        return _this;
        // this.init()
    }
    UsersAnalytics.prototype.getDefaultQuery = function () {
        return __assign$8({}, _super.prototype.getDefaultQuery.call(this), this.defaultQuery);
        // return {...this.defaultQuery}
    };
    UsersAnalytics.prototype.firstDataEffect = function () {
        this.setLoading(false);
    };
    UsersAnalytics.prototype.setLoading = function (data) {
        this.store.dispatch(new SetUsersAnalyticsLoading(data));
    };
    UsersAnalytics.prototype.setData = function (data) {
        this.store.dispatch(new SetUsersAnalyticsPage(data));
    };
    UsersAnalytics.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        isActive = isActive ? new Date().toISOString() : isActive;
        this.store.dispatch(new SetListActive(isActive));
    };
    Object.defineProperty(UsersAnalytics.prototype, "apiQuery$", {
        get: function () {
            return this.getApiQuery$();
        },
        enumerable: true,
        configurable: true
    });
    UsersAnalytics.prototype.addQuery = function (query) {
        if (query === void 0) { query = {}; }
        this.store.dispatch(new AddListQuery(query));
    };
    UsersAnalytics.prototype.setQuery = function (query) {
        if (query === void 0) { query = {}; }
        this.store.dispatch(new SetListQuery(query));
    };
    UsersAnalytics.prototype.setQueryReset = function (query) {
        this.store.dispatch(new AddListQuery(__assign$8({}, query, { page: null })));
    };
    UsersAnalytics.prototype.clearQueryKey = function (key) {
        this.store.dispatch(new ClearQueryKey(key));
    };
    UsersAnalytics.prototype.toggleId = function (userId) {
        this.store.dispatch(new ToggleUsersListId(userId));
    };
    UsersAnalytics.prototype.setId = function (userId) {
        this.store.dispatch(new SetUsersListId(userId));
    };
    UsersAnalytics.prototype.clearData = function () {
        this.setData(null);
        this.setActive(false);
        this.setQuery({});
    };
    UsersAnalytics.prototype.destroy = function () {
        this.clearData();
        this.dataSub.unsubscribe();
    };
    return UsersAnalytics;
}(EntityListClient));
var UsersAnalyticsClient = clientSubMixin(getPageDataMixin(getFirstDataMixin(listQueryMixin(UsersAnalytics))));
// applyMixins(UsersAnalytics, [ListGetData, ListQuery, ClientSub]);

var __assign$9 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var EntityClient = (function () {
    function EntityClient() {
    }
    EntityClient.prototype.dataArrayWithSelected$ = function (id$, dataArray$, selected$) {
        var userId$ = id$;
        var placelinePage$ = selected$.pipe(distinctUntilChanged(), map$1(function (data) {
            return data ? [data] : null;
        })); //todo take query from placeline
        var array$ = combineLatest$1(placelinePage$, userId$, dataArray$, function (placelinePage, userId, dataArray) {
            var filteredData = filter(dataArray, function (user) {
                return userId ? user.id == userId : true;
            });
            return placelinePage && userId ? placelinePage : filteredData;
        });
        return array$;
    };
    EntityClient.prototype.pageDataWithSelected$ = function (id$, pageData$, selected$) {
        // const userId$ = id$;
        var placelinePage$ = selected$.pipe(itemAsPage$());
        var newPageData$ = combineLatest$1(placelinePage$, id$, pageData$, function (placelinePage, userId, pageData) {
            if (!pageData)
                return pageData;
            var placelineResults = placelinePage ? placelinePage.results : null;
            var filteredData = filter(pageData.results, function (user) {
                return userId ? user.id == userId : true;
            });
            var results = placelineResults && userId ? placelineResults : filteredData;
            var count = userId ? 0 : pageData.count;
            return __assign$9({}, pageData, { results: results, count: count });
        });
        return newPageData$;
    };
    EntityClient.prototype.getPageFromEntity = function (item$) {
        return item$;
    };
    return EntityClient;
}());

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function isFunction(x) {
    return typeof x === 'function';
}
var isFunction_2 = isFunction;


var isFunction_1 = {
	isFunction: isFunction_2
};

var isArray_1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });


var isArray = {
	isArray: isArray_1
};

function isObject(x) {
    return x != null && typeof x === 'object';
}
var isObject_2 = isObject;


var isObject_1 = {
	isObject: isObject_2
};

// typeof any so that it we don't have to cast when comparing a result to the error object
var errorObject_1 = { e: {} };


var errorObject = {
	errorObject: errorObject_1
};

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.errorObject.e = e;
        return errorObject.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
var tryCatch_2 = tryCatch;



var tryCatch_1 = {
	tryCatch: tryCatch_2
};

var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends$11(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
var UnsubscriptionError_2 = UnsubscriptionError;


var UnsubscriptionError_1 = {
	UnsubscriptionError: UnsubscriptionError_2
};

/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);
            }
        }
        if (isArray.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty$$1) {
        empty$$1.closed = true;
        return empty$$1;
    }(new Subscription()));
    return Subscription;
}());
var Subscription_2 = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}


var Subscription_1 = {
	Subscription: Subscription_2
};

var empty$2 = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};


var Observer = {
	empty: empty$2
};

// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof commonjsGlobal !== 'undefined' && commonjsGlobal;
var _root = __window || __global || __self;
var root_1 = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();


var root = {
	root: root_1
};

var rxSubscriber = createCommonjsModule(function (module, exports) {
var Symbol = root.root.Symbol;
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;

});

var rxSubscriber_1 = rxSubscriber.rxSubscriber;
var rxSubscriber_2 = rxSubscriber.$$rxSubscriber;

var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};




/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends$10(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
var Subscriber_2 = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends$10(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));


var Subscriber_1 = {
	Subscriber: Subscriber_2
};

var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter$1(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var filter_2 = filter$1;
var FilterOperator = (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = (function (_super) {
    __extends$9(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber));

var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map$4(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var map_2 = map$4;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = (function (_super) {
    __extends$12(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$11 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var EntityAllItemsClient = (function (_super) {
    __extends$8(EntityAllItemsClient, _super);
    // data$: Observable<Page<any>>;
    function EntityAllItemsClient() {
        var _this = _super.call(this) || this;
        _this.updateStrategy = "once";
        _this.allowedQueryKeys = ["search", "status"];
        return _this;
    }
    Object.defineProperty(EntityAllItemsClient.prototype, "data$", {
        get: function () {
            return this.dataEntities$.pipe(map_2(function (allData) {
                if (!allData)
                    return allData;
                var results = values(allData.resultsEntity);
                return {
                    count: allData.count || 0,
                    results: results,
                    previous: allData.previous || "",
                    next: allData.next || ""
                };
            }));
        },
        enumerable: true,
        configurable: true
    });
    EntityAllItemsClient.prototype.getDefaultQuery = function () {
        return __assign$11({}, _super.prototype.getDefaultQuery.call(this), { page_size: 100, ordering: "-created_at" });
    };
    EntityAllItemsClient.prototype.firstDataEffect = function (data) {
        if ((data && !data.next) || !data) {
            this.setLoading(false);
        }
    };
    Object.defineProperty(EntityAllItemsClient.prototype, "dataArray$", {
        get: function () {
            var dataArray$ = this.data$.pipe(filter_2(function (data) { return !!data; }), map_2(function (data) {
                var resutls = values(data.resultsEntity);
                return resutls;
            }));
            return dataArray$;
        },
        enumerable: true,
        configurable: true
    });
    EntityAllItemsClient.prototype.getAllMarkers$ = function () {
        var _this = this;
        var allMarkers$ = this.dataArray$.pipe(map_2(function (markers) {
            return reduce(markers, function (acc, marker) {
                var isValid = _this.isValidMarker(marker);
                if (isValid) {
                    acc.valid.push(marker);
                }
                else {
                    acc.invalid.push(marker);
                }
                return acc;
            }, { valid: [], invalid: [] });
            // return markers
        }));
        return allMarkers$;
    };
    EntityAllItemsClient.prototype.isValidMarker = function (marker) {
        return true;
    };
    EntityAllItemsClient.prototype.getMarkers$ = function () {
        return this.getAllMarkers$().pipe(pluck("valid"));
    };
    return EntityAllItemsClient;
}(EntityListClient));

var __extends$13 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function listAllClientSubMixin(Base) {
    return (function (_super) {
        __extends$13(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            _this.init();
            return _this;
        }
        class_1.prototype.init = function () {
            var _this = this;
            if (!this.dataSub) {
                this.dataSub = this.getApiParams$()
                    .pipe(switchMap(function (data) {
                    if (data && data[0]) {
                        var loading = typeof data[0] === "string" ? data[0] : true;
                        _this.setLoading(loading);
                        return _this.getData$(data);
                    }
                    else {
                        return empty$1();
                    }
                }))
                    .subscribe(function (data) {
                    _this.addData(data);
                });
            }
        };
        return class_1;
    }(Base));
}

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$10 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var UsersAnalyticsListAll = (function (_super) {
    __extends$7(UsersAnalyticsListAll, _super);
    function UsersAnalyticsListAll(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.id$ = empty$1();
        _this.allowedQueryKeys = ["status", "show_all", "search"];
        _this.name = "users analytics all";
        _this.defaultQuery = {};
        _this.allowedQueryMap = [
            {
                key: "status",
                filter: function (value, oldValue) { return !!value; }
            },
            {
                key: "show_all",
                filter: function (value, oldValue) {
                    if (!value)
                        _this.clearData();
                    return true;
                }
            }
        ];
        _this.api$ = function (query) { return api.allPages(api.analytics(query)); };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.query$ = _this.store.select(getUsersListQuery);
        _this.dateParam = dateParam;
        _this.active$ = _this.store.select(getUsersAnalyticsMarkersIsActive);
        _this.dataEntities$ = _this.store.select(getUsersAnalyticsFilteredMarker);
        // this.id$ = this.store.select(fromRoot.getQueryUserId);
        _this.loading$ = _this.store.select(getUsersAnalyticsAllLoading);
        return _this;
        // this.dataArray$ = this.data$.pipe(PageResults$);
        // this.init()
    }
    UsersAnalyticsListAll.prototype.getDefaultQuery = function () {
        return __assign$10({}, _super.prototype.getDefaultQuery.call(this), this.defaultQuery);
        // return {...this.defaultQuery}
    };
    UsersAnalyticsListAll.prototype.firstDataEffect = function (data) {
        if (!data.next)
            this.setLoading(false);
    };
    UsersAnalyticsListAll.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        isActive = isActive ? new Date().toISOString() : isActive;
        this.store.dispatch(new SetMarkersActive(isActive));
    };
    UsersAnalyticsListAll.prototype.addData = function (data) {
        data = data || { results: [], next: "no_next", count: 0, previous: "" };
        this.store.dispatch(new AddUsersAnalyticsAll(data));
    };
    UsersAnalyticsListAll.prototype.setData = function (data) {
        data = data || { results: [], next: "no_next", count: 0, previous: "" };
        this.store.dispatch(new SetUsersAnalyticsAll(data));
    };
    UsersAnalyticsListAll.prototype.setLoading = function (data) {
        this.store.dispatch(new SetUsersAnalyticsAllLoading(data));
    };
    UsersAnalyticsListAll.prototype.setDataMap = function (mapFunc) {
        this.store.dispatch(new SetUsersMarkersDataMap(mapFunc));
    };
    UsersAnalyticsListAll.prototype.isValidMarker = function (marker) {
        return htUser(marker).isValidMarker();
    };
    UsersAnalyticsListAll.prototype.clearData = function () {
        var nullData = { results: [], next: "no_next", count: 0, previous: "" };
        this.setData(nullData);
    };
    UsersAnalyticsListAll.prototype.destroy = function () {
        this.clearData();
        this.setActive(false);
        this.dataSub.unsubscribe();
    };
    return UsersAnalyticsListAll;
}(EntityAllItemsClient));
var UsersAnalyticsListAllClient = listAllClientSubMixin(getAllPageDataMixin(getFirstDataMixin(listQueryMixin(UsersAnalyticsListAll))));

var __assign$12 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var BaseFilter = (function () {
    function BaseFilter() {
        this.sortingQueryMap = {};
    }
    Object.defineProperty(BaseFilter.prototype, "sortingQueryLabel", {
        get: function () {
            return this.getLabelArrayFromMap(this.sortingQueryMap);
        },
        enumerable: true,
        configurable: true
    });
    BaseFilter.prototype.getLabelArrayFromMap = function (queryMap) {
        var keys = Object.keys(queryMap);
        return map(keys, function (key) {
            var label = queryMap[key] || key;
            return {
                value: key,
                label: label
            };
        });
    };
    BaseFilter.prototype.getQueryDisplay = function (queryArray, key) {
        return map(queryArray, function (queryLabel) {
            var value = queryLabel.values ? queryLabel.values.toString() : queryLabel.value;
            return __assign$12({}, queryLabel, { param: (_a = {}, _a[key] = value, _a) });
            var _a;
        });
    };
    BaseFilter.prototype.getQueryLabel = function (query) {
        var _this = this;
        var keys = Object.keys(query);
        return reduce(keys, function (acc, key) {
            var value = query[key] || key;
            var label = _this.getQueryLabelFromValue(value, key);
            var queryLabel = {
                label: label,
                values: [key],
                value: key,
                param: (_a = {}, _a[key] = value, _a)
            };
            return label ? acc.concat([queryLabel]) : acc;
            var _a;
        }, []);
    };
    BaseFilter.prototype.getQueryLabelFromValue = function (value, key) {
        if (key === "search")
            return value;
        if (key === "show_all")
            return "Show All"; //todo add this after clear on show all removed
        var queryLabel = find(this.allQueryArray, function (queryLabel) {
            var valueString;
            if (queryLabel.values) {
                valueString = queryLabel.values.toString();
            }
            else if (queryLabel.values) {
                valueString = queryLabel.values;
            }
            else {
                return false;
            }
            return valueString === value;
        });
        return queryLabel ? queryLabel.label : null;
    };
    
    BaseFilter.prototype.summaryCharts = function (queryLabels, data, status) {
        if (data) {
            var max_1;
            var total_1 = 0;
            var values$$1 = map(queryLabels, function (entity) {
                var sum = reduce(entity.values, function (acc, key) {
                    return acc + data[key];
                }, 0);
                var value = entity.value || 0 + sum;
                max_1 = max_1 && value < max_1 ? max_1 : value;
                total_1 = total_1 + value;
                return __assign$12({}, entity, { value: value });
            });
            var totalUsers = total_1;
            var hasSelected_1 = false;
            var chart = map(values$$1, function (datum) {
                var selected = false;
                if (status && status == datum.values.toString()) {
                    selected = true;
                    hasSelected_1 = true;
                }
                var w = max_1 ? datum.value / max_1 : 0;
                return __assign$12({}, datum, { w: w, selected: selected });
            });
            return { totalUsers: totalUsers, chart: chart, hasSelected: hasSelected_1 };
        }
        else {
            return data;
        }
        // return data;
    };
    return BaseFilter;
}());

var __extends$14 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DefaultUsersFilter = (function (_super) {
    __extends$14(DefaultUsersFilter, _super);
    function DefaultUsersFilter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.customQueryArray = [];
        _this.statusQueryArray = [
            {
                label: "Stopped",
                values: ["stopped"],
                color: Color.stop
            },
            {
                label: "Moving",
                values: ["on_trip"],
                color: Color.blue
            },
            {
                label: "Logged off",
                values: ["logged_off"],
                color: "#8a91a0"
            },
            {
                label: "Location disabled",
                values: ["location_disabled"],
                color: Color.red
            },
            {
                label: "Network offline",
                values: ["network_offline"],
                color: "#ccc"
            }
        ];
        _this.activityQueryArray = [
            {
                label: "Logged in",
                values: ["stopped", "on_trip", "network_offline"],
                color: Color.blue
            },
            {
                label: "Logged off",
                values: ["logged_off"],
                color: "#a8a8a8"
            },
            {
                label: "Location disabled",
                values: ["location_disabled"],
                color: Color.red
            }
        ];
        _this.genericQueryArray = [
            {
                label: "Show all",
                values: ["show_all"]
            }
        ];
        _this.showAllQueryArray = [
            {
                label: "Never tracked",
                values: ["never_tracked"],
                color: "#575757"
            }
        ];
        _this.sortingQueryMap = {
            num_trips: "Trips",
            name: "Name",
            status: "Status",
            num_places: "Places",
            total_distance: "Distance",
            total_duration: "Duration",
            stop_duration: "Stop duration",
            location_disabled_duration: "Location disabled",
            network_offline_duration: "Network offline",
            num_actions: "Actions",
            last_heartbeat_at: "Last updated"
        };
        _this.mapQueries = [];
        _this.statusOverviewQueries = ["search", "show_all"];
        return _this;
    }
    Object.defineProperty(DefaultUsersFilter.prototype, "allQueryArray", {
        get: function () {
            return this.statusQueryArray.concat(this.genericQueryArray, this.showAllQueryArray, this.customQueryArray);
        },
        enumerable: true,
        configurable: true
    });
    DefaultUsersFilter.prototype.getStatusQueryArray = function (showAll) {
        if (showAll === void 0) { showAll = false; }
        return showAll
            ? this.statusQueryArray.concat(this.showAllQueryArray) : this.statusQueryArray;
    };
    return DefaultUsersFilter;
}(BaseFilter));

var __extends$15 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var UsersSummary = (function (_super) {
    __extends$15(UsersSummary, _super);
    function UsersSummary(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "users summary";
        _this.defaultQuery = { page_size: null };
        _this.updateStrategy = "live";
        _this.allowedQueryKeys = ["show_all", "search"];
        _this.allowedQueryMap = [
            {
                key: "show_all",
            },
            {
                key: "search"
            }
        ];
        _this.api$ = function (query) { return api.summary(query); };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.dateParam = dateParam;
        _this.query$ = _this.store.select(getUsersListQuery);
        _this.active$ = _this.store.select(getUsersSummaryActive);
        _this.data$ = _this.store.select(getUsersSummary);
        _this.loading$ = _this.store.select(getUsersSummaryLoading);
        return _this;
    }
    UsersSummary.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        isActive = isActive ? new Date().toISOString() : isActive;
        this.store.dispatch(new SetSummaryActive(isActive));
    };
    UsersSummary.prototype.setData = function (usersSummary) {
        this.store.dispatch(new SetUsersSummary(usersSummary));
    };
    UsersSummary.prototype.setLoading = function (data) {
        this.store.dispatch(new SetSummaryLoading(data));
    };
    UsersSummary.prototype.setQuery = function (query) { };
    UsersSummary.prototype.clearData = function () {
        this.setData(null);
    };
    UsersSummary.prototype.destroy = function () {
        this.clearData();
        this.setActive(false);
        this.dataSub.unsubscribe();
    };
    return UsersSummary;
}(EntityListClient));
var UsersSummaryClient = clientSubMixin(getQueryDataMixin(getFirstDataMixin(listQueryMixin(UsersSummary))));

var __extends$16 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Dispatcher = (function (_super) {
    __extends$16(Dispatcher, _super);
    function Dispatcher() {
        return _super.call(this, { type: "INIT" }) || this;
    }
    Dispatcher.prototype.next = function (action) {
        if (typeof action === "undefined") {
            throw new TypeError("Actions must be objects");
        }
        else if (typeof action.type === "undefined") {
            throw new TypeError("Actions must have a type property");
        }
        _super.prototype.next.call(this, action);
    };
    return Dispatcher;
}(BehaviorSubject$1));

var __extends$17 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$13 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var ReducerObservable = (function (_super) {
    __extends$17(ReducerObservable, _super);
    function ReducerObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReducerObservable;
}(Observable$1));
var ReducerManagerDispatcher = (function (_super) {
    __extends$17(ReducerManagerDispatcher, _super);
    function ReducerManagerDispatcher() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReducerManagerDispatcher;
}(Dispatcher));
var UPDATE = "@ngrx/store/update-reducers";
var ReducerManager = (function (_super) {
    __extends$17(ReducerManager, _super);
    function ReducerManager(dispatcher, initialState, reducers, reducerFactory) {
        var _this = _super.call(this, reducerFactory(reducers, initialState)) || this;
        _this.dispatcher = dispatcher;
        _this.initialState = initialState;
        _this.reducers = reducers;
        _this.reducerFactory = reducerFactory;
        return _this;
    }
    ReducerManager.prototype.addFeature = function (_a) {
        var reducers = _a.reducers, reducerFactory = _a.reducerFactory, metaReducers = _a.metaReducers, initialState = _a.initialState, key = _a.key;
        var reducer = typeof reducers === "function"
            ? function (state, action) { return reducers(state || initialState, action); }
            : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);
        this.addReducer(key, reducer);
    };
    ReducerManager.prototype.removeFeature = function (_a) {
        var key = _a.key;
        this.removeReducer(key);
    };
    ReducerManager.prototype.addReducer = function (key, reducer) {
        this.reducers = __assign$13({}, this.reducers, (_a = {}, _a[key] = reducer, _a));
        this.updateReducers();
        var _a;
    };
    ReducerManager.prototype.removeReducer = function (key) {
        this.reducers = omit(this.reducers, key);
        this.updateReducers();
    };
    ReducerManager.prototype.updateReducers = function () {
        this.next(this.reducerFactory(this.reducers, this.initialState));
        this.dispatcher.next({ type: UPDATE });
    };
    ReducerManager.prototype.ngOnDestroy = function () {
        this.complete();
    };
    return ReducerManager;
}(BehaviorSubject$1));

var __extends$18 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ScannedActionsSubject = (function (_super) {
    __extends$18(ScannedActionsSubject, _super);
    function ScannedActionsSubject() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScannedActionsSubject;
}(Subject$1));

var __extends$22 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = (function (_super) {
    __extends$22(Action, _super);
    function Action(scheduler, work) {
        _super.call(this);
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
var Action_2 = Action;


var Action_1 = {
	Action: Action_2
};

var __extends$21 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = (function (_super) {
    __extends$21(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return root.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return root.root.clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_1.Action));
var AsyncAction_2 = AsyncAction;


var AsyncAction_1 = {
	AsyncAction: AsyncAction_2
};

var __extends$20 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = (function (_super) {
    __extends$20(QueueAction, _super);
    function QueueAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
var QueueAction_2 = QueueAction;


var QueueAction_1 = {
	QueueAction: QueueAction_2
};

/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 */
var Scheduler = (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
var Scheduler_2 = Scheduler;


var Scheduler_1 = {
	Scheduler: Scheduler_2
};

var __extends$24 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

var AsyncScheduler = (function (_super) {
    __extends$24(AsyncScheduler, _super);
    function AsyncScheduler() {
        _super.apply(this, arguments);
        this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         */
        this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         */
        this.scheduled = undefined;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
var AsyncScheduler_2 = AsyncScheduler;


var AsyncScheduler_1 = {
	AsyncScheduler: AsyncScheduler_2
};

var __extends$23 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

var QueueScheduler = (function (_super) {
    __extends$23(QueueScheduler, _super);
    function QueueScheduler() {
        _super.apply(this, arguments);
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
var QueueScheduler_2 = QueueScheduler;


var QueueScheduler_1 = {
	QueueScheduler: QueueScheduler_2
};

/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
var queue_1 = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);

var __extends$19 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var StateObservable = (function (_super) {
    __extends$19(StateObservable, _super);
    function StateObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StateObservable;
}(Observable$1));
var State = (function (_super) {
    __extends$19(State, _super);
    function State(actions$, reducer$, scannedActions, initialState) {
        var _this = _super.call(this, initialState) || this;
        var actionsOnQueue$ = observeOn$1.call(actions$, queue_1);
        var withLatestReducer$ = withLatestFrom$1.call(actionsOnQueue$, reducer$);
        var stateAndAction$ = scan$1.call(withLatestReducer$, reduceState, { state: initialState });
        _this.stateSubscription = stateAndAction$.subscribe(function (_a) {
            var state = _a.state, action = _a.action;
            _this.next(state);
            scannedActions.next(action);
        });
        return _this;
    }
    State.prototype.ngOnDestroy = function () {
        this.stateSubscription.unsubscribe();
        this.complete();
    };
    State.INIT = "INIT";
    return State;
}(BehaviorSubject$1));
function reduceState(stateActionPair, _a) {
    if (stateActionPair === void 0) { stateActionPair = { state: undefined }; }
    var action = _a[0], reducer = _a[1];
    var state = stateActionPair.state;
    return { state: reducer(state, action), action: action };
}

var __extends$25 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Store = (function (_super) {
    __extends$25(Store, _super);
    function Store(state$, dispatcher, reducerManager) {
        var _this = _super.call(this) || this;
        _this.dispatcher = dispatcher;
        _this.reducerManager = reducerManager;
        _this.source = state$;
        return _this;
    }
    Store.prototype.select = function (pathOrMapFn) {
        var paths = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            paths[_i - 1] = arguments[_i];
        }
        var mapped$;
        if (typeof pathOrMapFn === "string") {
            mapped$ = pluck$2.call.apply(pluck$2, [this, pathOrMapFn].concat(paths));
        }
        else if (typeof pathOrMapFn === "function") {
            mapped$ = map$3.call(this, pathOrMapFn);
        }
        else {
            throw new TypeError("Unexpected type '" + typeof pathOrMapFn + "' in select operator," +
                " expected 'string' or 'function'");
        }
        return distinctUntilChanged$2.call(mapped$);
    };
    Store.prototype.lift = function (operator) {
        var store = new Store(this, this.dispatcher, this.reducerManager);
        store.operator = operator;
        return store;
    };
    Store.prototype.dispatch = function (action) {
        this.dispatcher.next(action);
    };
    Store.prototype.next = function (action) {
        this.dispatcher.next(action);
    };
    Store.prototype.error = function (err) {
        this.dispatcher.error(err);
    };
    Store.prototype.complete = function () {
        this.dispatcher.complete();
    };
    Store.prototype.addReducer = function (key, reducer) {
        this.reducerManager.addReducer(key, reducer);
    };
    Store.prototype.removeReducer = function (key) {
        this.reducerManager.removeReducer(key);
    };
    return Store;
}(Observable$1));

var Effects = (function () {
    function Effects(dispatcher) {
        // dispatcher.pipe(
        //   flatMap((action) => GetEffect(action)),
        //   filter(data => !!data)
        // ).subscribe((action) => {
        //   dispatcher.next(action)
        // })
    }
    return Effects;
}());

var storeFactory = function (reducers, config) {
    if (config === void 0) { config = {}; }
    var INITIAL_STATE = config.initialState;
    var metaReducers = config.metaReducers;
    var _REDUCER_FACTORY = config.reducerFactory
        ? config.reducerFactory
        : combineReducers;
    var REDUCER_FACTORY = createReducerFactory(_REDUCER_FACTORY, metaReducers);
    var dispatcher = new Dispatcher(); //actionSubject
    var EFFECTS_PROVIDERS = new Effects(dispatcher);
    var reducerManager = new ReducerManager(dispatcher, INITIAL_STATE, reducers, REDUCER_FACTORY);
    var SCANNED_ACTIONS_SUBJECT_PROVIDERS = new ScannedActionsSubject();
    var STATE_PROVIDERS = new State(dispatcher, reducerManager, SCANNED_ACTIONS_SUBJECT_PROVIDERS, INITIAL_STATE);
    var STORE_PROVIDERS = new Store(STATE_PROVIDERS, dispatcher, reducerManager);
    return {
        INITIAL_STATE: INITIAL_STATE,
        metaReducers: metaReducers,
        _REDUCER_FACTORY: _REDUCER_FACTORY,
        dispatcher: dispatcher,
        SCANNED_ACTIONS_SUBJECT_PROVIDERS: SCANNED_ACTIONS_SUBJECT_PROVIDERS,
        REDUCER_FACTORY: REDUCER_FACTORY,
        EFFECTS_PROVIDERS: EFFECTS_PROVIDERS,
        reducerManager: reducerManager,
        STATE_PROVIDERS: STATE_PROVIDERS,
        STORE_PROVIDERS: STORE_PROVIDERS
    };
};

// const storeProvider: StoreProvider = storeFactory(fromRoot.reducers);
// Object.freeze(storeProvider);
// export const store = storeProvider.STORE_PROVIDERS;
var apiStoreFactory = function () {
    var storeProvider = storeFactory(reducers);
    return storeProvider.STORE_PROVIDERS;
};
var ApiStoreService = (function () {
    var instance;
    return {
        getInstance: function () {
            if (!instance) {
                instance = apiStoreFactory();
            }
            return instance;
        },
        getNewInstance: function () {
            return apiStoreFactory();
        }
    };
})();

var __extends$26 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan$2(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
var scan_2 = scan$2;
var ScanOperator = (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = (function (_super) {
    __extends$26(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_1.Subscriber));

var __assign$14 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var defaultDateRange = __assign$14({}, DateRangeMap.today);
var DateRange = (function () {
    function DateRange(initialDate) {
        if (initialDate === void 0) { initialDate = {}; }
        this.dataBehaviour$ = new BehaviorSubject$1(__assign$14({}, defaultDateRange, initialDate));
        this.data$ = this.dataBehaviour$.asObservable();
    }
    
    DateRange.prototype.setDateRange = function (dateRange) {
        if (dateRange === void 0) { dateRange = null; }
        this.dataBehaviour$.next(dateRange);
    };
    DateRange.prototype.getDateRange = function () {
        return this.dataBehaviour$.getValue();
    };
    Object.defineProperty(DateRange.prototype, "display$", {
        get: function () {
            return this.data$.pipe(map$1(function (range) {
                return dateRangeDisplay(range);
            }));
        },
        enumerable: true,
        configurable: true
    });
    return DateRange;
}());
var dateRangeFactory = function (initialDate) {
    if (initialDate === void 0) { initialDate = {}; }
    return new DateRange(initialDate);
};
var dateRangeService = (function () {
    var instance;
    return {
        getInstance: function (initialDate) {
            if (!instance) {
                instance = dateRangeFactory(initialDate);
            }
            return instance;
        }
    };
})();

var UsersHeatmap = (function () {
    function UsersHeatmap(_a) {
        var dateRange = _a.dateRange, dateParam = _a.dateParam, api = _a.api;
        this.query$ = of$1({});
        this.loadingState$ = new BehaviorSubject$1(false);
        this.loading$ = this.loadingState$.asObservable();
        this.dataState$ = new BehaviorSubject$1(null);
        this.data$ = this.dataState$.asObservable();
        this.active$ = new BehaviorSubject$1(false);
        this.dataArray$ = this.data$.pipe(PageResults$);
        this.api$ = function (query) { return api.allPages(api.heatmap(query)); };
        this.dateRange = dateRange;
        this.dateParam = dateParam;
    }
    UsersHeatmap.prototype.setActive = function (active) {
        if (active === void 0) { active = true; }
        this.active$.next(active);
    };
    UsersHeatmap.prototype.getDefaultQuery = function () {
        return { page_size: 300 };
    };
    
    UsersHeatmap.prototype.firstDataEffect = function (data) {
        if ((data && !data.next) || !data) {
            this.setLoading(false);
        }
    };
    UsersHeatmap.prototype.setLoading = function (isLoading) {
        this.loadingState$.next(isLoading);
    };
    UsersHeatmap.prototype.setData = function (data) {
        this.dataState$.next(data);
    };
    UsersHeatmap.prototype.addData = function (data) {
        this.dataState$.next(data);
    };
    return UsersHeatmap;
}());

var UsersHeatmapClient = listAllClientSubMixin(getAllPageDataMixin(getFirstDataMixin(listQueryMixin(UsersHeatmap))));

var HtToken = (function () {
    function HtToken(token) {
        if (token === void 0) { token = ""; }
        this.token = token;
    }
    Object.defineProperty(HtToken.prototype, "token", {
        get: function () {
            return this._token;
        },
        set: function (token) {
            this._token = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtToken.prototype, "tempToken", {
        get: function () {
            return this._tempToken;
        },
        set: function (token) {
            this._groupToken = "";
            this._tempToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtToken.prototype, "groupToken", {
        get: function () {
            return this._groupToken;
        },
        set: function (token) {
            this._groupToken = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtToken.prototype, "currentToken", {
        get: function () {
            return this.groupToken || this.tempToken || this.token;
        },
        enumerable: true,
        configurable: true
    });
    return HtToken;
}());

var __assign$15 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtRequest = (function () {
    function HtRequest(token) {
        this.baseUrl = "https://api.hypertrack.com/api/v1/";
        this.isAdmin = false;
        this.defaultHeader = { "X-Hypertrack-Client": 'js-sdk' };
        this.tokenServie = new HtToken(token);
    }
    HtRequest.prototype.setClientType = function (clientType) {
        this.defaultHeader = __assign$15({}, this.defaultHeader, { "X-Hypertrack-Client": clientType });
    };
    HtRequest.prototype.setBaseUrl = function (baseUrl) {
        this.baseUrl = baseUrl;
    };
    
    Object.defineProperty(HtRequest.prototype, "token", {
        get: function () {
            return this.tokenServie.token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtRequest.prototype, "currentToken", {
        get: function () {
            var token = this.tokenServie.currentToken;
            return token;
        },
        enumerable: true,
        configurable: true
    });
    HtRequest.prototype.headerObj = function (token) {
        return __assign$15({ Authorization: "token " + (token || this.currentToken) }, this.defaultHeader);
    };
    
    HtRequest.prototype.adminHeaderObj = function () {
        return __assign$15({ Authorization: "token " + this.token }, this.defaultHeader);
    };
    HtRequest.prototype.headerStrings = function () {
        return ["Authorization", "token " + this.currentToken];
    };
    HtRequest.prototype.url = function (url, query, isPure) {
        if (query === void 0) { query = {}; }
        if (isPure === void 0) { isPure = false; }
        if (isPure)
            return url;
        var string = HtQuerySerialize(query);
        return this.baseUrl + url + "?" + string;
    };
    HtRequest.prototype.getObservable = function (url, options) {
        if (options === void 0) { options = {}; }
        var p = this.getFetch(url, options);
        return fromPromise$1(p);
    };
    HtRequest.prototype.postObservable = function (url, body, options) {
        if (options === void 0) { options = {}; }
        var p = this.postFetch(url, body, options);
        return fromPromise$1(p);
    };
    HtRequest.prototype.api$ = function (url, query, options) {
        if (options === void 0) { options = {}; }
        url = this.url(url, query, options.pureUrl);
        var headers = options.isAdmin ? this.adminHeaderObj() : this.headerObj(options.token);
        return this.getObservable(url, { headers: headers });
    };
    HtRequest.prototype.postApi$ = function (url, body, options) {
        url = this.url(url);
        var headers = options.isAdmin ? this.adminHeaderObj() : this.headerObj(options.token);
        return this.postObservable(url, body, { headers: headers });
    };
    HtRequest.prototype.getFetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, options).then(function (res) {
            return res.json();
        });
    };
    HtRequest.prototype.postFetch = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, __assign$15({ method: "POST", body: JSON.stringify(body) }, options)).then(function (res) { return res.json(); });
    };
    return HtRequest;
}());

var htRequestService = (function () {
    var instance;
    return {
        getInstance: function (token) {
            if (!instance) {
                instance = new HtRequest(token);
            }
            return instance;
        },
        setInstance: function (newintance) {
            if (instance) {
                var tokenService = instance.tokenServie;
                newintance.tokenServie = tokenService;
            }
            instance = newintance;
        }
    };
})();

var __assign$1$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtBaseApi = (function () {
    function HtBaseApi(request, base) {
        this.request = request;
        this.base = base;
    }
    HtBaseApi.prototype.get = function (id, query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/" + id + "/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.index = function (query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.summary = function (query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/summary/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.heatmap = function (query, token) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/heatmap/";
        return this.api$(path, query, { token: token });
    };
    HtBaseApi.prototype.api$ = function (path, query, options) {
        if (query === void 0) { query = {}; }
        if (options === void 0) { options = {}; }
        return this.request.api$(path, query, options);
    };
    HtBaseApi.prototype.postApi$ = function (path, body, options) {
        if (options === void 0) { options = {}; }
        return this.request.postApi$(path, body, options);
    };
    // getReqFromTail<T>(tail, query = {}, options = {}): Observable<T> {
    //   return this.request.api$(this.base + tail, query, options)
    // }
    //
    // postReqFromTail<T>(tail, body, options?): Observable<T> {
    //   return this.request.postApi$(this.base + tail, body, options)
    // }
    HtBaseApi.prototype.placeline = function (id, query, token) {
        if (query === void 0) { query = {}; }
        var tail = this.base + ("/" + id + "/placeline/");
        return this.api$(tail, query, { token: token });
    };
    HtBaseApi.prototype.allPages = function (api$, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return api$.pipe(expand(function (data) {
            return data["next"]
                ? _this.request.api$(data["next"], {}, __assign$1$1({}, options, { pureUrl: true })).pipe(map$1(function (newData) {
                    return __assign$1$1({}, newData, { results: data.results.concat(newData.results) });
                }))
                : empty$1();
        }));
    };
    HtBaseApi.prototype.analytics = function (query) {
        return empty$1();
    };
    return HtBaseApi;
}());

var __extends$27 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtUsersApi = (function (_super) {
    __extends$27(HtUsersApi, _super);
    function HtUsersApi(request) {
        var _this = _super.call(this, request, "users") || this;
        _this.name = "user";
        return _this;
    }
    HtUsersApi.prototype.analytics = function (query, token) {
        var path = this.base + "/analytics/";
        return this.api$(path, query, { token: token });
    };
    return HtUsersApi;
}(HtBaseApi));

var __extends$1$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtActionsApi = (function (_super) {
    __extends$1$1(HtActionsApi, _super);
    function HtActionsApi(request) {
        var _this = _super.call(this, request, "actions") || this;
        _this.name = "Action";
        return _this;
    }
    HtActionsApi.prototype.graph = function (query, token) {
        var path = this.base + "/graph/";
        return this.api$(path, query, { token: token }).pipe(map$1(function (obj) {
            return Object.keys(obj).reduce(function (dataArray, key) {
                dataArray.push(obj[key]);
                return dataArray;
            }, []).sort(function (a, b) {
                return new Date(a.created_date).getTime() - new Date(b.created_date).getTime();
            });
        }));
    };
    return HtActionsApi;
}(HtBaseApi));
var __extends$2$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtGroupsApi = (function (_super) {
    __extends$2$1(HtGroupsApi, _super);
    function HtGroupsApi(request) {
        var _this = _super.call(this, request, "groups") || this;
        _this.name = "group";
        return _this;
    }
    HtGroupsApi.prototype.children = function (groupId, token) {
        var query = { parent_group_id: groupId };
        return this.getAll(query, token);
    };
    HtGroupsApi.prototype.root = function (token) {
        var query = { has_parent: false };
        return this.getAll(query, token);
    };
    HtGroupsApi.prototype.getAll = function (query, token) {
        return this.allPages(this.index(query, token));
    };
    return HtGroupsApi;
}(HtBaseApi));

var __extends$3$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtAccountUserApi = (function (_super) {
    __extends$3$1(HtAccountUserApi, _super);
    function HtAccountUserApi(request) {
        var _this = _super.call(this, request, "account_users") || this;
        _this.name = "user";
        return _this;
    }
    HtAccountUserApi.prototype.login = function (user) {
        var tail = "login/";
        return this.request.postObservable(this.request.baseUrl + tail, user);
    };
    HtAccountUserApi.prototype.get = function (id, token) {
        var path = this.base + "/" + id + "/";
        return this.api$(path, {}, { isAdmin: true });
    };
    HtAccountUserApi.prototype.memberships = function (id, query, options) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/" + id + "/memberships/";
        return this.api$(path, query, options);
    };
    HtAccountUserApi.prototype.membershipsAll = function (id, query, token) {
        var options = { isAdmin: true, token: token };
        return this.allPages(this.memberships(id, query, options), options);
    };
    return HtAccountUserApi;
}(HtBaseApi));

var HtApi = (function () {
    function HtApi(token) {
        this.request = htRequestService.getInstance();
        if (token)
            this.request.tokenServie.token = token;
        this.users = new HtUsersApi(this.request);
        this.actions = new HtActionsApi(this.request);
        this.groups = new HtGroupsApi(this.request);
        this.accountUser = new HtAccountUserApi(this.request);
    }
    
    HtApi.prototype.setToken = function (token) {
        this.request.tokenServie.token = token;
    };
    return HtApi;
}());

var __extends$4$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$2$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtTrackingApi = (function (_super) {
    __extends$4$1(HtTrackingApi, _super);
    function HtTrackingApi(request) {
        var _this = _super.call(this, request, "actions") || this;
        _this.name = "Tracking";
        _this.trackType = {
            shortCode: "short_code",
            lookupId: 'lookup_id',
            collectionId: 'collection_id',
            actionId: 'id'
        };
        return _this;
    }
    HtTrackingApi.prototype.track = function (id, idType, token) {
        if (idType === void 0) { idType = 'shortCode'; }
        var trackKey = this.trackType[idType];
        if (trackKey) {
            var query = (_a = {}, _a[trackKey] = id, _a);
            var path = this.base + "/track/";
            return this.api$(path, query, { token: token }).pipe(map$1(function (data) {
                var actions = [];
                data.results.forEach(function (result) {
                    var actionsWithAccount = result.actions.map(function (action) {
                        return __assign$2$1({}, action, { account: result.account });
                    });
                    actions.push.apply(actions, actionsWithAccount);
                });
                return actions;
            }));
        }
        else {
            console.error('Invalid Tracking type ' + idType);
        }
        var _a;
    };
    return HtTrackingApi;
}(HtBaseApi));

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var HtUsersClient = (function (_super) {
    __extends(HtUsersClient, _super);
    function HtUsersClient(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.filterClass = new DefaultUsersFilter();
        _this.showAll = false;
        var api = new HtApi().users;
        _this.key$ = ApiStoreService.getInstance().select(getAccountCurrentKey);
        _this.api = api;
        var store = ApiStoreService.getNewInstance();
        store.addReducer("users", usersReducer);
        store.addReducer("segments", segmentsReducer);
        _this.store = store;
        var dateRange = _this.options.dateRange;
        var dateParam = 'recorded_at';
        _this.analytics = new UsersAnalyticsClient({ dateRange: dateRange, store: store, dateParam: dateParam, api: api });
        _this.placeline = new UsersPlacelineClient({ store: store, api: api });
        _this.analyticsAll = new UsersAnalyticsListAllClient({
            dateRange: dateRange,
            store: store,
            dateParam: dateParam,
            api: api
        });
        _this.summary = new UsersSummaryClient({ dateRange: dateRange, store: store, dateParam: dateParam, api: api });
        _this.list = _this.analytics;
        _this.listAll = _this.analyticsAll;
        _this.heatmap = new UsersHeatmapClient({ dateRange: dateRange, dateParam: dateParam, api: api });
        _this.initEffects();
        return _this;
    }
    HtUsersClient.prototype.getLoading$ = function () {
        return CombineLoadings$(this.list.loading$, this.summary.loading$);
    };
    Object.defineProperty(HtUsersClient.prototype, "statusQueryArray", {
        set: function (data) {
            this._statusQueryArray = data;
            this.filterClass.customQueryArray = data;
        },
        enumerable: true,
        configurable: true
    });
    HtUsersClient.prototype.setShowAll = function (showAll) {
        if (showAll === void 0) { showAll = true; }
        this.showAll = showAll;
        this.list.setQuery({ show_all: true });
    };
    HtUsersClient.prototype.getInitialDateRange = function (range) {
        if (range === void 0) { range = {}; }
        var initialRange = DateRangeMap.today;
        return __assign({}, range, initialRange);
    };
    HtUsersClient.prototype.listStatusOverview$ = function () {
        return this.summary.data$.pipe(map$1(function (summary) {
            if (summary) {
                return summary.status_overview;
            }
            return null;
        }));
    };
    HtUsersClient.prototype.listStatusChart$ = function (queryLabels) {
        var _this = this;
        // return status_overview.
        if (queryLabels)
            (_a = this.filterClass.customQueryArray).push.apply(_a, queryLabels);
        return combineLatest$1(this.list.query$, this.listStatusOverview$()).pipe(map$1(function (_a) {
            var query = _a[0], overview = _a[1];
            if (overview) {
                var total_1 = 0;
                var max_1 = 0;
                var summaryEntity = queryLabels || _this.filterClass.getStatusQueryArray(_this.showAll);
                var status_1 = query ? query["status"] : null;
                // let summaryEntity = this.filterClass.activityQueryArray;
                var values$$1 = map(summaryEntity, function (entity) {
                    var sum = reduce(entity.values, function (acc, key) {
                        return acc + overview[key];
                    }, 0);
                    var value = entity.value || 0 + sum;
                    max_1 = max_1 && value < max_1 ? max_1 : value;
                    total_1 = total_1 + value;
                    return __assign({}, entity, { value: value });
                });
                var totalUsers = total_1;
                var hasSelected_1 = false;
                var chart = map(values$$1, function (datum) {
                    var selected = false;
                    if (status_1 && status_1 == datum.values.toString()) {
                        selected = true;
                        hasSelected_1 = true;
                    }
                    var w = max_1 ? datum.value / max_1 : 0;
                    return __assign({}, datum, { w: w, selected: selected });
                });
                return { totalUsers: totalUsers, chart: chart, hasSelected: hasSelected_1 };
            }
            return null;
        }));
        var _a;
    };
    Object.defineProperty(HtUsersClient.prototype, "queryLabel$", {
        get: function () {
            var _this = this;
            var query$ = this.list.getBaseQuery$().pipe(filter_2(function (data) { return !!data; }));
            return query$.pipe(map$1(function (query) {
                // console.log("cl", query);
                var queryLabel = _this.filterClass.getQueryLabel(query);
                return queryLabel;
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtUsersClient.prototype, "ordering$", {
        get: function () {
            var _this = this;
            return this.list.getApiQuery$().pipe(filter_2(function (data) { return !!data; }), map$1(function (query) {
                var ordering = query ? query["ordering"] : null;
                var orderingMod = _this.getOrderingMod(ordering);
                return {
                    string: _this.filterClass.sortingQueryMap[orderingMod.string],
                    sign: orderingMod.sign
                };
            }), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    HtUsersClient.prototype.getOrderingMod = function (ordering) {
        var string = ordering;
        var sign = 1;
        if (ordering.includes("-")) {
            string = ordering.substring(1);
            sign = 0;
        }
        return {
            string: string,
            sign: sign
        };
    };
    HtUsersClient.prototype.getSegmentsStates = function () {
        return this.store.select(getSegmentsState);
    };
    HtUsersClient.prototype.getCurrentPlaceline$ = function () {
        return combineLatest$1(this.placeline.data$, this.getSegmentsStates(), function (userData, _a) {
            var selectedId = _a.selectedId, resetMapId = _a.resetMapId;
            if (userData && (selectedId || resetMapId)) {
                var id_1 = selectedId || resetMapId;
                var segments = filter(userData.segments, function (segment) {
                    return segment.id === id_1;
                });
                userData = __assign({}, userData, { segments: segments, events: [], actions: [] });
            }
            return userData;
        });
    };
    HtUsersClient.prototype.initEffects = function () {
        var _this = this;
        this.list.query$.pipe(filter_2(function (data) { return !!data; })).subscribe(function (query) {
            _this.setListAllFilter(query);
        });
        // this.listAll.active$.pipe(filter(data => !!data)).flatMap(() => {
        //   return this.listStatusChart$()
        // })
        //   .takeUntil(this.listAll.active$.filter(data => !data).skip(1))
        //   .withLatestFrom(this.list.query$)
        //   .switchMap(([statusOverview, query]) => {
        //     // return Observable.of({})
        //     console.log(statusOverview, query);
        //     return this.getListAllUpdateQuery$(statusOverview, query)
        //   })//todo finish this
        this.placeline.id$
            .pipe(scan_2(function (acc, currentId) {
            var isSame = acc.oldId === currentId;
            var oldId = currentId;
            return { isSame: isSame, oldId: oldId };
        }, { isSame: false, oldId: null }), pluck("isSame"), filter_2(function (data) { return !data; }))
            .subscribe(function (isDiff) {
            _this.placeline.setData(null);
        });
    };
    HtUsersClient.prototype.setListAllFilter = function (query) {
        var statusString = query["status"];
        var search = query["search"];
        var ids = query["id"];
        var userMarkerFilters = [];
        if (statusString) {
            var statusArray = statusString.split(",");
            // this.updateUserMap(query);
            var statusFilter_1 = [];
            statusArray.forEach(function (status) {
                statusFilter_1.push(htUser().getMarkerFilter(status));
            });
            var allStatusFilter = function (user) {
                return reduce(statusFilter_1, function (acc, filter$$1) {
                    return acc || filter$$1(user);
                }, false);
            };
            userMarkerFilters.push(allStatusFilter);
        }
        if (search) {
            userMarkerFilters.push(function (user) {
                return htUser().getMarkerSearched(search)(user); // || userMarkerFilter(user)
            });
            // this.updateUserMap(query);
        }
        if (ids) {
            var userIds_1 = ids.split(",");
            userMarkerFilters.push(function (user) {
                return contains(userIds_1, user.id);
            });
        }
        var userMarkerFilter = function (user) {
            return reduce(userMarkerFilters, function (acc, filter$$1) {
                return acc && filter$$1(user);
            }, true);
        };
        var dataMap = function (allResults) {
            var results = filter(allResults.resultsEntity, userMarkerFilter);
            var resultsEntity = indexBy(results, "id");
            return __assign({}, allResults, { resultsEntity: resultsEntity });
        };
        this.listAll.setDataMap(dataMap);
    };
    HtUsersClient.prototype.getListAllUpdateQuery$ = function (overview, query) {
        return this.listAll.data$.pipe(flatMap(function (allData) {
            var results = values(allData.resultsEntity);
            var currentTotalUsers = results.length;
            var totalUsers = overview.totalUsers, chart = overview.chart;
            var status = query["status"];
            if (!!status) {
                var value = find(chart, function (datum) {
                    return datum.keys.toString(",") == status;
                });
                return value && value !== currentTotalUsers ? of$1(true) : empty$1();
            }
            else if (currentTotalUsers < totalUsers) {
                return of$1(true);
            }
            return empty$1();
        }));
    };
    return HtUsersClient;
}(EntityClient));
var usersClientFactory = function (options) {
    if (options === void 0) { options = {}; }
    var dateRange = options.dateRange || dateRangeService.getInstance();
    return new HtUsersClient({ dateRange: dateRange });
};

var __extends$28 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ActionsFilter = (function (_super) {
    __extends$28(ActionsFilter, _super);
    function ActionsFilter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.customQueryArray = [];
        _this.statusQueryArray = [
            {
                label: "Not yet started",
                values: ["created"],
                color: "#8a91a0"
            },
            {
                label: "Assigned",
                values: ["assigned", "started"],
                color: Color.blue
            },
            {
                label: "Completed",
                values: ["completed"],
                color: Color.stop
            },
            {
                label: "Suspended",
                values: ["suspended"],
                color: Color.red
            }
        ];
        _this.sortingQueryMap = {
            assigned_at: "Assigned",
            completed_at: "Completed",
            distance: "Distance",
            duration: "Duration",
            type: "Type",
            user__name: "User name",
            status: "Status"
        };
        _this.genericQueryArray = [];
        return _this;
    }
    Object.defineProperty(ActionsFilter.prototype, "allQueryArray", {
        get: function () {
            return this.statusQueryArray.concat(this.genericQueryArray, this.customQueryArray);
        },
        enumerable: true,
        configurable: true
    });
    return ActionsFilter;
}(BaseFilter));

var __assign$16 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var GroupsList = (function () {
    function GroupsList(_a) {
        var store = _a.store, api = _a.api;
        this.name = "group";
        this.defaultQuery = { ordering: "-created_at" };
        this.query$ = of$1({});
        this.updateStrategy = "once";
        this.pollDuration = 10000;
        this.loading$ = of$1(false);
        this.api$ = function (query) { return api.index(query); };
        this.store = store;
        this.data$ = this.store.select(getGroupAll);
        this.active$ = this.store.select(getGroupListActive);
        this.dataArray$ = this.data$.pipe(PageResults$);
    }
    GroupsList.prototype.setData = function (data) {
        this.store.dispatch(new SetGroupsAll(data));
    };
    GroupsList.prototype.setLoading = function (data) {
        console.log("loading", data);
    };
    GroupsList.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        this.store.dispatch(new SetListActive$1(isActive));
    };
    GroupsList.prototype.setQuery = function () { };
    GroupsList.prototype.firstDataEffect = function (data) {
        this.setLoading(false);
    };
    GroupsList.prototype.getRoots = function () {
        return this.api$({ has_parent: false });
    };
    GroupsList.prototype.getChildren = function (groupId) {
        return this.api$({ parent_group_id: groupId });
    };
    GroupsList.prototype.getDefaultQuery = function () {
        return __assign$16({ page_size: 10 }, this.defaultQuery);
    };
    GroupsList.prototype.clearData = function () {
        this.setData(null);
    };
    GroupsList.prototype.destroy = function () {
        this.clearData();
        this.setActive(false);
        this.dataSub.unsubscribe();
    };
    return GroupsList;
}());
var GroupsListClient = clientSubMixin(getPageDataMixin(getFirstDataMixin(listQueryMixin(GroupsList))));
// applyMixins(GroupsListClient, [ListGetData, ListQuery, ClientSub]);

var __extends$30 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$17 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var GroupsItem = (function (_super) {
    __extends$30(GroupsItem, _super);
    function GroupsItem(_a) {
        var store = _a.store, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "group";
        _this.defaultQuery = { ordering: "-created_at" };
        _this.updateStrategy = "once";
        _this.query$ = of$1({});
        _this.data$ = empty$1();
        _this.loading$ = of$1(false);
        _this.api$ = function (id, query) { return api.get(id, query); };
        _this.store = store;
        _this.id$ = _this.store.select(getGroupId);
        return _this;
        // this.init()
    }
    GroupsItem.prototype.getDefaultQuery = function () {
        return __assign$17({}, _super.prototype.getDefaultQuery.call(this), this.defaultQuery);
    };
    GroupsItem.prototype.setId = function (id) {
        this.store.dispatch(new SetGroupId(id));
    };
    GroupsItem.prototype.setData = function (data) {
        this.store.dispatch(new SetGroup(data));
    };
    GroupsItem.prototype.setLoading = function (data) { };
    GroupsItem.prototype.setQuery = function () { };
    GroupsItem.prototype.clearData = function () {
        this.setData(null);
    };
    GroupsItem.prototype.destroy = function () {
        this.clearData();
        this.dataSub.unsubscribe();
    };
    return GroupsItem;
}(EntityItemClient));
var GroupsItemClient = clientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(GroupsItem))));
// applyMixins(GroupsItemClient, [ItemGetData, ItemQuery, ClientSub]);
// export const groupsItemsClientFactory = (config = {}): GroupsItem => {
//   let innerConfig = {
//     name: 'group',
//     defaultQuery: {ordering: '-created_at'},
//     updateStrategy: 'once',
//     ...config
//   };
//
//   let itemSelector: EntityItemSelectors = {
//     id$: store.select(fromGroup.getGroupId),
//     query$: Observable.of({}),
//     data$: Observable.empty(),
//     loading$: Observable.of(false),
//   };
//
//   let dispatchers: EntityItemDispatchers = {
//     setId(id) {
//       store.dispatch(new fromGroupDispatcher.SetGroupId(id))
//     },
//     setData(data) {
//       store.dispatch(new fromGroupDispatcher.SetGroup(data))
//     },
//     setLoading(data) {
//
//     },
//     setQuery() {
//
//     }
//
//   };
//
//   const state = {
//     api$: (id, query?) => clientApi.groups.get(id, query),
//     dispatchers,
//     selectors: itemSelector
//   };
//
//   let groupsIndex = entityClientFactory(state, innerConfig, 'item');
//   groupsIndex.init();
//   return groupsIndex as GroupsItem;
//
// };

var __extends$29 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HtGroupsClient = (function (_super) {
    __extends$29(HtGroupsClient, _super);
    function HtGroupsClient(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        var api = new HtApi().groups;
        _this.api = api;
        var store = ApiStoreService.getNewInstance();
        store.addReducer("groups", groupsReducer);
        _this.store = store;
        _this.list = new GroupsListClient({ store: store, api: api });
        _this.item = new GroupsItemClient({ store: store, api: api });
        return _this;
    }
    HtGroupsClient.prototype.key$ = function (id) {
        return this.api.get(id).pipe(map$1(function (group) {
            return group["token"];
        }));
    };
    HtGroupsClient.prototype.lookupIdKey$ = function (lookupId) {
        return this.api.index({ lookup_id: lookupId }).pipe(map$1(function (groupPage) {
            return groupPage && groupPage["results"]
                ? groupPage["results"][0]["token"]
                : null;
        }));
    };
    HtGroupsClient.prototype.getChildren = function (groupId) {
        var query = { parent_group_id: groupId };
        return this.getAll(query);
    };
    HtGroupsClient.prototype.getRoot = function () {
        var query = { has_parent: false };
        return this.getAll(query);
    };
    HtGroupsClient.prototype.getAll = function (query) {
        return this.api.allPages(this.api.index(query));
    };
    return HtGroupsClient;
}(EntityClient));
var groupsClientFactory = function (options) {
    if (options === void 0) { options = {}; }
    var dateRange = options.noDateRange
        ? null
        : options.dateRange || dateRangeService.getInstance();
    return new HtGroupsClient({ dateRange: dateRange });
};

var __extends$31 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var AccountUser = (function (_super) {
    __extends$31(AccountUser, _super);
    function AccountUser(_a) {
        var dateParam = _a.dateParam, store = _a.store, api = _a.api;
        var _this = _super.call(this) || this;
        _this.query$ = of$1({});
        _this.updateStrategy = "once";
        _this.pollDuration = 10000;
        _this.api$ = function (id, query) { return api.get(id, query); };
        _this.store = store;
        // this.active$ = this.store.select(fromRoot.getUsersAnalyticsIsActive);
        _this.data$ = _this.store.select(getAccountUser);
        _this.id$ = _this.store.select(getAccountUserId);
        _this.loading$ = _this.store.select(getAccountCurrentKey);
        return _this;
        // this.init()
    }
    AccountUser.prototype.getDefaultQuery = function () {
        return {};
    };
    AccountUser.prototype.setId = function (id) {
        this.store.dispatch(new SetUserId(id));
    };
    AccountUser.prototype.setLoading = function (loading) { };
    AccountUser.prototype.setData = function (data) {
        this.store.dispatch(new SetAccountUser(data));
    };
    return AccountUser;
}(EntityItemClient));
var AccountUserClient = clientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(AccountUser))));

var MembershipsAll = (function () {
    function MembershipsAll(_a) {
        var dateParam = _a.dateParam, store = _a.store, api = _a.api;
        this.query$ = of$1({});
        this.updateStrategy = "once";
        this.pollDuration = 10000;
        this.active$ = of$1(true);
        this.loading$ = new BehaviorSubject$1(false);
        this.api$ = function (id, query) { return api.membershipsAll(id, query); };
        this.store = store;
        // this.active$ = this.store.select(fromRoot.getUsersAnalyticsIsActive);
        this.data$ = this.store.select(getAccountMembershipsAll);
        this.id$ = this.store.select(getAccountUserId);
        // this.loading$ = this.store.select(fromRoot.getAccountCurrentKey);
        // this.init()
    }
    MembershipsAll.prototype.firstDataEffect = function () {
        this.setLoading();
    };
    MembershipsAll.prototype.getDefaultQuery = function () {
        return { page_size: 100 };
    };
    MembershipsAll.prototype.setLoading = function (loading) {
        if (loading === void 0) { loading = true; }
        this.loading$.next(loading);
    };
    MembershipsAll.prototype.addData = function (data) {
        this.store.dispatch(new SetMembershipsAll(data));
    };
    return MembershipsAll;
}());
var MemberShipsClient = listAllClientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(MembershipsAll))));

var AccountsClient = (function () {
    function AccountsClient() {
        var api = new HtApi().accountUser;
        this.api = api;
        this.store = ApiStoreService.getInstance();
        this.store.addReducer("accounts", reducer$1);
        this.accountUser = new AccountUserClient({ store: this.store, api: api });
        this.memberships = new MemberShipsClient({ store: this.store, api: api });
    }
    AccountsClient.prototype.setToken = function (token) {
        this.store.dispatch(new SetKey(token));
    };
    return AccountsClient;
}());

var ActionsGraph = (function () {
    function ActionsGraph(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        this.query$ = of$1({});
        this.dataBehaviour$ = new BehaviorSubject$1(null);
        this.data$ = this.dataBehaviour$.asObservable();
        this.loadingBehaviour$ = new BehaviorSubject$1(false);
        this.loading$ = this.loadingBehaviour$.asObservable();
        this.updateStrategy = "once";
        this.pollDuration = 10000;
        this.api$ = function (query) { return api.graph(query); };
        this.dateRange = dateRange;
        this.dateParam = dateParam;
    }
    ActionsGraph.prototype.getDefaultQuery = function () {
        return {};
    };
    
    ActionsGraph.prototype.setData = function (data) {
        this.dataBehaviour$.next(data);
    };
    ActionsGraph.prototype.firstDataEffect = function () {
        this.setLoading(false);
    };
    ActionsGraph.prototype.setLoading = function (loading) {
        if (loading === void 0) { loading = true; }
        this.loadingBehaviour$.next(!!loading);
    };
    ActionsGraph.prototype.clearData = function () {
        this.setData(null);
    };
    ActionsGraph.prototype.destroy = function () {
        this.clearData();
        this.dataSub.unsubscribe();
    };
    return ActionsGraph;
}());
var ActionsGraphClient = clientSubMixin(getQueryDataMixin(getFirstDataMixin(listQueryMixin(ActionsGraph))));

var __extends$32 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ActionsList = (function (_super) {
    __extends$32(ActionsList, _super);
    function ActionsList(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.api$ = function (query) {
            return api.index(query);
        };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.query$ = _this.store.select(getActionsListQuery);
        _this.dateParam = dateParam;
        _this.active$ = _this.store.select(getActionsListActive);
        _this.data$ = _this.store.select(getActionsList);
        _this.loading$ = _this.store.select(getActionsListLoading);
        _this.dataArray$ = _this.data$.pipe(PageResults$);
        return _this;
        // this.init()
    }
    ActionsList.prototype.setActive = function (active) {
        if (active === void 0) { active = true; }
        this.store.dispatch(new SetListActive$2(active));
    };
    ActionsList.prototype.setLoading = function (loading) {
        this.store.dispatch(new SetListLoading(loading));
    };
    
    ActionsList.prototype.setData = function (data) {
        this.store.dispatch(new SetList(data));
    };
    
    ActionsList.prototype.setQuery = function (query) {
        this.store.dispatch(new SetListQuery$1(query));
    };
    return ActionsList;
}(EntityListClient));

var ActionsListClient = clientSubMixin(getPageDataMixin(getFirstDataMixin(listQueryMixin(ActionsList))));

var __extends$33 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ActionsSummary = (function (_super) {
    __extends$33(ActionsSummary, _super);
    function ActionsSummary(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.allowedQueryMap = [
            {
                key: "show_all",
            },
            {
                key: "search"
            }
        ];
        _this.updateStrategy = 'live';
        // updateStrategy = 'once';
        _this.filter = new ActionsFilter();
        _this.api$ = function (query) { return api.summary(query); };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.dateParam = dateParam;
        _this.query$ = _this.store.select(getActionsSummaryQuery);
        _this.active$ = _this.store.select(getActionsSummaryActive);
        _this.data$ = _this.store.select(getActionsSummary);
        _this.summaryChart$ = _this.getSummaryChart();
        _this.loading$ = _this.store.select(getActionsSummaryLoading);
        return _this;
    }
    ActionsSummary.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        isActive = isActive ? new Date().toISOString() : isActive;
        this.store.dispatch(new SetSummaryActive$1(isActive));
    };
    ActionsSummary.prototype.setLoading = function (loading) {
        this.store.dispatch(new SetSummaryLoading$1(loading));
    };
    
    ActionsSummary.prototype.setData = function (data) {
        this.store.dispatch(new SetSummary(data));
    };
    ActionsSummary.prototype.setQuery = function (query) {
        this.store.dispatch(new SetSummaryQuery(query));
    };
    
    ActionsSummary.prototype.getSummaryChart = function () {
        var _this = this;
        return this.data$.pipe(map$1(function (summaryData) {
            return _this.filter.summaryCharts(_this.filter.statusQueryArray, summaryData);
        }));
    };
    return ActionsSummary;
}(EntityListClient));

var ActionsSummaryClient = clientSubMixin(getQueryDataMixin(getFirstDataMixin(listQueryMixin(ActionsSummary))));

var ActionsHeatmap = (function () {
    function ActionsHeatmap(_a) {
        var dateRange = _a.dateRange, dateParam = _a.dateParam, api = _a.api;
        this.query$ = of$1({});
        this.loadingState$ = new BehaviorSubject$1(false);
        this.loading$ = this.loadingState$.asObservable();
        this.dataState$ = new BehaviorSubject$1(null);
        this.data$ = this.dataState$.asObservable();
        this.active$ = new BehaviorSubject$1(false);
        this.dataArray$ = this.data$.pipe(PageResults$);
        this.api$ = function (query) { return api.allPages(api.heatmap(query)); };
        this.dateRange = dateRange;
        this.dateParam = dateParam;
    }
    ActionsHeatmap.prototype.setActive = function (active) {
        if (active === void 0) { active = true; }
        this.active$.next(active);
    };
    ActionsHeatmap.prototype.getDefaultQuery = function () {
        return { page_size: 300 };
    };
    
    ActionsHeatmap.prototype.firstDataEffect = function (data) {
        if ((data && !data.next) || !data) {
            this.setLoading(false);
        }
    };
    ActionsHeatmap.prototype.setLoading = function (isLoading) {
        this.loadingState$.next(isLoading);
    };
    ActionsHeatmap.prototype.setData = function (data) {
        this.dataState$.next(data);
    };
    ActionsHeatmap.prototype.addData = function (data) {
        this.dataState$.next(data);
    };
    return ActionsHeatmap;
}());
var ActionsHeatmapClient = listAllClientSubMixin(getAllPageDataMixin(getFirstDataMixin(listQueryMixin(ActionsHeatmap))));

var __extends$34 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ActionsIndexAll = (function (_super) {
    __extends$34(ActionsIndexAll, _super);
    function ActionsIndexAll(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.dataBehaviour$ = new BehaviorSubject$1(null);
        _this.loadingBehaviour$ = new BehaviorSubject$1(false);
        _this.loading$ = _this.loadingBehaviour$.asObservable();
        _this.activeBehaviour$ = new BehaviorSubject$1(false);
        _this.api$ = function (query) { return api.allPages(api.index(query)); };
        _this.dateRange = dateRange;
        _this.dateParam = dateParam;
        _this.query$ = new BehaviorSubject$1(_this.getDefaultQuery());
        _this.active$ = _this.activeBehaviour$.asObservable();
        return _this;
    }
    ActionsIndexAll.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        this.activeBehaviour$.next(isActive);
    };
    ActionsIndexAll.prototype.setQuery = function (query) {
        this.query$.next(query);
    };
    Object.defineProperty(ActionsIndexAll.prototype, "data$", {
        get: function () {
            return this.dataBehaviour$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    ActionsIndexAll.prototype.addData = function (data) {
        this.dataBehaviour$.next(data);
    };
    
    ActionsIndexAll.prototype.setData = function (data) {
        this.dataBehaviour$.next(data);
    };
    ActionsIndexAll.prototype.setLoading = function (loading) {
    };
    return ActionsIndexAll;
}(EntityAllItemsClient));

var ActionsIndexAllClient = listAllClientSubMixin(getAllPageDataMixin(getFirstDataMixin(listQueryMixin(ActionsIndexAll))));

var HtActionsClient = (function () {
    function HtActionsClient(config) {
        this.filters = new ActionsFilter();
        var api = new HtApi().actions;
        this.api = api;
        var store = ApiStoreService.getNewInstance();
        store.addReducer("actions", actionsReducer);
        this.store = store;
        var dateRange = config.dateRange;
        var dateParam = 'created_at';
        this.graph = new ActionsGraphClient({ dateRange: dateRange, dateParam: dateParam, api: api });
        this.list = new ActionsListClient({ dateRange: dateRange, store: store, dateParam: dateParam, api: api });
        this.listAll = new ActionsIndexAllClient({ dateRange: dateRange, dateParam: dateParam, api: api });
        this.summary = new ActionsSummaryClient({ dateRange: dateRange, store: store, dateParam: dateParam, api: api });
        this.heatmap = new ActionsHeatmapClient({ dateRange: dateRange, dateParam: 'completed_at', api: api });
    }
    return HtActionsClient;
}());
var actionsClientFactory = function (options) {
    if (options === void 0) { options = {}; }
    var dateRange = options.dateRange || dateRangeService.getInstance();
    return new HtActionsClient({ dateRange: dateRange });
};

var HtClient = (function () {
    function HtClient(token, request) {
        if (token === void 0) { token = ""; }
        htRequestService.setInstance(request);
        this.token = token;
    }
    Object.defineProperty(HtClient.prototype, "token", {
        set: function (token) {
            htRequestService.getInstance().tokenServie.token = token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtClient.prototype, "tempToken", {
        set: function (token) {
            htRequestService.getInstance().tokenServie.tempToken = token;
        },
        enumerable: true,
        configurable: true
    });
    return HtClient;
}());
var initClient = function (token, request) {
    return htClientService.getInstance(token, request);
};
var htClientFactory = function (token, request) {
    return new HtClient(token, request);
};
var htClientService = (function () {
    var instance;
    return {
        getInstance: function (token, request) {
            if (token === void 0) { token = ""; }
            if (!instance) {
                instance = htClientFactory(token, request);
            }
            return instance;
        }
    };
})();

var SET_USER_ANALYTICS = "[LOADING] set user analytics";
var SET_USER_INDEX = "[LOADING] set user index";
var SET_USER_ANALYTICS_ALL = "[LOADING] set user analytics all";
var SET_USER_INDEX_ALL = "[LOADING] set user index all";
var SetLoadingUserAnalytics = (function () {
    function SetLoadingUserAnalytics(payload) {
        this.payload = payload;
        this.type = SET_USER_ANALYTICS;
    }
    return SetLoadingUserAnalytics;
}());
var SetLoadingUserIndex = (function () {
    function SetLoadingUserIndex(payload) {
        this.payload = payload;
        this.type = SET_USER_INDEX;
    }
    return SetLoadingUserIndex;
}());
var SetLoadingUserAnalyticsAll = (function () {
    function SetLoadingUserAnalyticsAll(payload) {
        this.payload = payload;
        this.type = SET_USER_ANALYTICS_ALL;
    }
    return SetLoadingUserAnalyticsAll;
}());
var SetLoadingUserIndexAll = (function () {
    function SetLoadingUserIndexAll(payload) {
        this.payload = payload;
        this.type = SET_USER_INDEX_ALL;
    }
    return SetLoadingUserIndexAll;
}());



var LoadingDispatcher = Object.freeze({
	SET_USER_ANALYTICS: SET_USER_ANALYTICS,
	SET_USER_INDEX: SET_USER_INDEX,
	SET_USER_ANALYTICS_ALL: SET_USER_ANALYTICS_ALL,
	SET_USER_INDEX_ALL: SET_USER_INDEX_ALL,
	SetLoadingUserAnalytics: SetLoadingUserAnalytics,
	SetLoadingUserIndex: SetLoadingUserIndex,
	SetLoadingUserAnalyticsAll: SetLoadingUserAnalyticsAll,
	SetLoadingUserIndexAll: SetLoadingUserIndexAll
});

var SET_DATE_RANGE = "[QUERY] set date range";
var SET_USER_QUERY = "[QUERY] set user query";
var SET_USER_QUERY_RESET_PAGE = "[QUERY] set user query reset page";
var CLEAR_USER_QUERY_KEY = "[QUERY] clear user query key";
var SET_USER_ID$1 = "[USERS] set user id";
var TOGGLE_USER_ID = "[USERS] toggle user id";
var SET_PLACELINE_QUERY$1 = "[USERS] Set placeline query";
var SetDateRange = (function () {
    function SetDateRange(payload) {
        this.payload = payload;
        this.type = SET_DATE_RANGE;
    }
    return SetDateRange;
}());
var SetUserQuery = (function () {
    function SetUserQuery(payload) {
        this.payload = payload;
        this.type = SET_USER_QUERY;
    }
    return SetUserQuery;
}());
var SetUserQueryResetPage = (function () {
    function SetUserQueryResetPage(payload) {
        this.payload = payload;
        this.type = SET_USER_QUERY_RESET_PAGE;
    }
    return SetUserQueryResetPage;
}());
var ClearUserQueryKey = (function () {
    function ClearUserQueryKey(payload) {
        this.payload = payload;
        this.type = CLEAR_USER_QUERY_KEY;
    }
    return ClearUserQueryKey;
}());
var SetUserId$1 = (function () {
    function SetUserId(payload) {
        this.payload = payload;
        this.type = SET_USER_ID$1;
    }
    return SetUserId;
}());
var ToggleUserId = (function () {
    function ToggleUserId(payload) {
        this.payload = payload;
        this.type = TOGGLE_USER_ID;
    }
    return ToggleUserId;
}());
var SetPlacelineQuery$1 = (function () {
    function SetPlacelineQuery(payload) {
        if (payload === void 0) { payload = {}; }
        this.payload = payload;
        this.type = SET_PLACELINE_QUERY$1;
    }
    return SetPlacelineQuery;
}());



var QueryDispatcher = Object.freeze({
	SET_DATE_RANGE: SET_DATE_RANGE,
	SET_USER_QUERY: SET_USER_QUERY,
	SET_USER_QUERY_RESET_PAGE: SET_USER_QUERY_RESET_PAGE,
	CLEAR_USER_QUERY_KEY: CLEAR_USER_QUERY_KEY,
	SET_USER_ID: SET_USER_ID$1,
	TOGGLE_USER_ID: TOGGLE_USER_ID,
	SET_PLACELINE_QUERY: SET_PLACELINE_QUERY$1,
	SetDateRange: SetDateRange,
	SetUserQuery: SetUserQuery,
	SetUserQueryResetPage: SetUserQueryResetPage,
	ClearUserQueryKey: ClearUserQueryKey,
	SetUserId: SetUserId$1,
	ToggleUserId: ToggleUserId,
	SetPlacelineQuery: SetPlacelineQuery$1
});

var Dispatcher$1 = {
    groups: GroupsDispatcher,
    users: UsersDispatcher,
    loading: LoadingDispatcher,
    query: QueryDispatcher,
    Segment: SegmentsDispatcher
};

//helper
// export * from "./helpers/operators"
// import "rxjs/add/operator/let";

export { defaultListConfig, ApiType, HtUsersClient, usersClientFactory, UsersPlaceline, UsersPlacelineClient, UsersAnalytics, UsersAnalyticsClient, UsersAnalyticsListAll, UsersAnalyticsListAllClient, UsersSummary, UsersSummaryClient, UsersHeatmap, UsersHeatmapClient, DefaultUsersFilter, ActionsFilter, HtGroupsClient, groupsClientFactory, GroupsList, GroupsListClient, GroupsItem, GroupsItemClient, AccountsClient, AccountUser, AccountUserClient, MembershipsAll, MemberShipsClient, HtActionsClient, actionsClientFactory, ActionsGraph, ActionsGraphClient, ActionsList, ActionsListClient, ActionsSummary, ActionsSummaryClient, ActionsHeatmap, ActionsHeatmapClient, defaultDateRange, DateRange, dateRangeFactory, dateRangeService, HtClient, initClient, htClientFactory, htClientService, reducers, reducer, metaReducers, getUsersState, getUsersUsersData, getUsersPlacelineId, getUsersPlacelineQuery, getUsersPlacelineLoading, getUsersListActive, getUsersListId, getUsersListQuery, getUsersAnalyticsPage, getUsersAnalyticsLoading, getUsersIndexPage, getUsersIndexIsActive, getUsersAnalyticsIsActive, getUsersIndexMarkersIsActive, getUsersAnalyticsMarkersIsActive, getUsersAnalyticsAllLoading, getUsersIndexFilteredMarker, getUsersAnalyticsFilteredMarker, getUsersIndexAll, getUsersAnalyticsAll, getUsersSummary, getUsersSummaryActive, getUsersSummaryLoading, getSegmentsState, getSegmentsSelectedId, getSegmentsResetMapId, getGroupsState, getGroupId, getGroupAll, getGroupListActive, getAccountState, getAccountUser, getAccountMembershipsAll, getAccountKey, getAccountTempKey, getAccountCurrentKey, getAccountUserId, getActionsState, getActionsList, getActionsListLoading, getActionsListActive, getActionsListQuery, getActionsSummary, getActionsSummaryActive, getActionsSummaryLoading, getActionsSummaryQuery, getActionsGraph, getActionsGraphLoading, getActionsGraphQuery, Dispatcher$1 as Dispatcher };
