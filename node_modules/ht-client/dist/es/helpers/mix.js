export function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            // console.log(derivedCtor.prototype[name], baseCtor.prototype[name], name);
            derivedCtor.prototype[name] =
                derivedCtor.prototype[name] && !name.includes("_")
                    ? derivedCtor.prototype[name]
                    : baseCtor.prototype[name];
        });
    });
}
export function applyBaseMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        console.log(Object.getOwnPropertyNames(derivedCtor), Object.getOwnPropertyNames(baseCtor));
        console.log(Object.getOwnPropertyNames(derivedCtor.prototype), Object.getOwnPropertyNames(baseCtor.prototype));
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            // console.log(derivedCtor.prototype[name], baseCtor.prototype[name], name);
            derivedCtor[name] =
                derivedCtor.prototype[name] && !name.includes("_")
                    ? derivedCtor[name]
                    : baseCtor.prototype[name];
        });
        // console.log(derivedCtor.prototype, derivedCtor, baseCtor, baseCtor.prototype);
    });
}
export function extend(first, second) {
    var result = {};
    for (var id in second) {
        if (!result.hasOwnProperty(id)) {
            result[id] = second[id];
        }
    }
    for (var id in first) {
        result[id] = first[id];
    }
    return result;
}
// export function extendClass<T, U>(main: T, base: U): T & U {
//   Object.setPrototypeOf(main.prototype, base.prototype);
// }
// export function mix(fn, ...objs) {
//   if (typeof fn !== 'function') {
//     throw 'fn must be a function.';
//   }
//
//   objs.forEach(o => {
//     Object.keys(o).forEach(k => {
//       var descriptor = Object.getOwnPropertyDescriptor(o, k);
//       Object.defineProperty(fn.prototype, k, descriptor);
//     });
//   });
//
//   return fn;
// }
export var mix = function (superclass) { return new MixinBuilder(superclass); };
var MixinBuilder = (function () {
    function MixinBuilder(superclass) {
        this.superclass = superclass;
        // this.superclass = superclass;
    }
    MixinBuilder.prototype.with = function () {
        var mixins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            mixins[_i] = arguments[_i];
        }
        return mixins.reduce(function (c, mixin) { return mixin(c); }, this.superclass);
    };
    return MixinBuilder;
}());
export { MixinBuilder };
//# sourceMappingURL=mix.js.map