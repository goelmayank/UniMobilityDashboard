var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as _ from "underscore";
var BaseFilter = (function () {
    function BaseFilter() {
        this.sortingQueryMap = {};
    }
    Object.defineProperty(BaseFilter.prototype, "sortingQueryLabel", {
        get: function () {
            return this.getLabelArrayFromMap(this.sortingQueryMap);
        },
        enumerable: true,
        configurable: true
    });
    BaseFilter.prototype.getLabelArrayFromMap = function (queryMap) {
        var keys = Object.keys(queryMap);
        return _.map(keys, function (key) {
            var label = queryMap[key] || key;
            return {
                value: key,
                label: label
            };
        });
    };
    BaseFilter.prototype.getQueryDisplay = function (queryArray, key) {
        return _.map(queryArray, function (queryLabel) {
            var value = queryLabel.values ? queryLabel.values.toString() : queryLabel.value;
            return __assign({}, queryLabel, { param: (_a = {}, _a[key] = value, _a) });
            var _a;
        });
    };
    BaseFilter.prototype.getQueryLabel = function (query) {
        var _this = this;
        var keys = Object.keys(query);
        return _.reduce(keys, function (acc, key) {
            var value = query[key] || key;
            var label = _this.getQueryLabelFromValue(value, key);
            var queryLabel = {
                label: label,
                values: [key],
                value: key,
                param: (_a = {}, _a[key] = value, _a)
            };
            return label ? acc.concat([queryLabel]) : acc;
            var _a;
        }, []);
    };
    BaseFilter.prototype.getQueryLabelFromValue = function (value, key) {
        if (key === "search")
            return value;
        if (key === "show_all")
            return "Show All"; //todo add this after clear on show all removed
        var queryLabel = _.find(this.allQueryArray, function (queryLabel) {
            var valueString;
            if (queryLabel.values) {
                valueString = queryLabel.values.toString();
            }
            else if (queryLabel.values) {
                valueString = queryLabel.values;
            }
            else {
                return false;
            }
            return valueString === value;
        });
        return queryLabel ? queryLabel.label : null;
    };
    ;
    BaseFilter.prototype.summaryCharts = function (queryLabels, data, status) {
        if (data) {
            var max_1;
            var total_1 = 0;
            var values = _.map(queryLabels, function (entity) {
                var sum = _.reduce(entity.values, function (acc, key) {
                    return acc + data[key];
                }, 0);
                var value = entity.value || 0 + sum;
                max_1 = max_1 && value < max_1 ? max_1 : value;
                total_1 = total_1 + value;
                return __assign({}, entity, { value: value });
            });
            var totalUsers = total_1;
            var hasSelected_1 = false;
            var chart = _.map(values, function (datum) {
                var selected = false;
                if (status && status == datum.values.toString()) {
                    selected = true;
                    hasSelected_1 = true;
                }
                var w = max_1 ? datum.value / max_1 : 0;
                return __assign({}, datum, { w: w, selected: selected });
            });
            return { totalUsers: totalUsers, chart: chart, hasSelected: hasSelected_1 };
        }
        else {
            return data;
        }
        // return data;
    };
    return BaseFilter;
}());
export { BaseFilter };
//# sourceMappingURL=base-filter.js.map