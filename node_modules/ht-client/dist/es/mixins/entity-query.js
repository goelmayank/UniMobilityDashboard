var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// import {MergeQuery} from "ht-data";
import { CombineQueries, AllowedQueryMap, DateRangeToQuery$ } from "ht-data";
import { map, switchMap } from "rxjs/operators";
import { combineLatest } from "rxjs/observable/combineLatest";
import { MergeQuery } from "../helpers/operators";
import { of } from "rxjs/observable/of";
export function listQueryMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getApiQuery$ = function () {
            return this.getApiParams$().pipe(map(function (data) {
                return data[0];
            }));
        };
        class_1.prototype.getBaseQuery$ = function () {
            var baseQuery$ = this.query$.pipe(AllowedQueryMap(this.allowedQueryMap), MergeQuery(this.getDefaultQuery()), CombineQueries([this.dateRange.data$.pipe(DateRangeToQuery$(this.dateParam)) || of({})]));
            return baseQuery$;
        };
        class_1.prototype.getApiParams$ = function () {
            var baseQuery$ = this.getBaseQuery$().pipe(map(function (data) {
                return [data];
            }));
            return this.active$
                ? this.active$.pipe(switchMap(function (isActive) {
                    // console.log(isActive, "accc");
                    return isActive ? baseQuery$ : of([]);
                }))
                : baseQuery$;
        };
        return class_1;
    }(Base));
}
export function itemQueryMixin(Base) {
    return (function (_super) {
        __extends(class_2, _super);
        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_2.prototype.getApiQuery$ = function () {
            return this.getApiParams$().pipe(map(function (data) {
                return data[1];
            }));
        };
        class_2.prototype.getApiParams$ = function () {
            return combineLatest(this.id$, this.query$.pipe(MergeQuery(this.getDefaultQuery())));
        };
        return class_2;
    }(Base));
}
//# sourceMappingURL=entity-query.js.map