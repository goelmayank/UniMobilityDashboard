var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { ApiType } from "../interfaces";
// import {clientApi} from "../client-request";
import { htRequestService } from "../global/request";
import { expand, map } from "rxjs/operators";
import { empty } from "rxjs/observable/empty";
// import {HtClientConfig} from "../config";
// import {HTest, HtRequest} from "../request";
// import {UsersListStorage} from "./storage";
var HtBaseApi = /** @class */ (function () {
    // request: HtRequest;
    function HtBaseApi(base) {
        this.base = base;
    }
    Object.defineProperty(HtBaseApi.prototype, "request", {
        get: function () {
            // return ""
            return htRequestService.getInstance();
        },
        enumerable: true,
        configurable: true
    });
    HtBaseApi.prototype.get = function (id, query) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/" + id + "/";
        return this.api$(path, query);
    };
    HtBaseApi.prototype.index = function (query) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/";
        return this.api$(path, query);
    };
    HtBaseApi.prototype.summary = function (query) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/summary/";
        return this.api$(path, query);
    };
    HtBaseApi.prototype.heatmap = function (query) {
        if (query === void 0) { query = {}; }
        var path = this.base + "/heatmap/";
        return this.api$(path, query);
    };
    HtBaseApi.prototype.api$ = function (path, query, options) {
        if (query === void 0) { query = {}; }
        if (options === void 0) { options = {}; }
        return this.request.api$(path, query, options);
    };
    HtBaseApi.prototype.postApi$ = function (path, body, options) {
        if (options === void 0) { options = {}; }
        return this.request.postApi$(path, body, options);
    };
    // getReqFromTail<T>(tail, query = {}, options = {}): Observable<T> {
    //   return this.request.api$(this.base + tail, query, options)
    // }
    //
    // postReqFromTail<T>(tail, body, options?): Observable<T> {
    //   return this.request.postApi$(this.base + tail, body, options)
    // }
    HtBaseApi.prototype.placeline = function (id, query) {
        if (query === void 0) { query = {}; }
        var tail = this.base + ("/" + id + "/placeline/");
        return this.api$(tail, query);
    };
    HtBaseApi.prototype.all$ = function (query, apiType) {
        if (apiType === void 0) { apiType = ApiType.index; }
        query = __assign({ page_size: 200 }, query);
        var api$ = apiType == ApiType.index ? this.index(query) : this.analytics(query);
        return this.allPages(api$);
        // .pipe(
        //   map((value: Page<T>) => {
        //     let resultsEntity = _.indexBy(value.results, 'id');
        //     let isFirst = !value.previous;
        //     let count = value.count;
        //     return {resultsEntity, isFirst, next: value.next, previous: value.previous, count}
        //   })
        // )
    };
    HtBaseApi.prototype.allPages = function (api$, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return api$.pipe(expand(function (data) {
            return data["next"]
                ? _this.request.getObservable(data["next"], options).pipe(map(function (newData) {
                    return __assign({}, newData, { results: data.results.concat(newData.results) });
                }))
                : empty();
        }));
    };
    HtBaseApi.prototype.analytics = function (query) {
        return empty();
    };
    return HtBaseApi;
}());
export { HtBaseApi };
//# sourceMappingURL=base.js.map