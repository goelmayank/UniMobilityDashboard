var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as UserDispatch from "../dispatchers/user-dispatcher";
import { ApiType } from "../interfaces";
import { createSelector } from "../store/selector";
import * as _ from "underscore";
var initialUsersAnalyticsAll = {
    resultsEntity: {},
    isFirst: false
};
var initialUsersIndexAll = {
    resultsEntity: {},
    isFirst: false
};
var initialState = {
    usersListActive: false,
    usersMarkersActive: false,
    usersSummaryActive: false,
    listApiType: ApiType.analytics,
    usersAnalyticsAll: initialUsersAnalyticsAll,
    usersIndexAll: initialUsersIndexAll
};
export function usersReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        /*
        placeline
         */
        case UserDispatch.SET_USER_DATA: {
            return __assign({}, state, { userData: action.payload });
        }
        case UserDispatch.SET_PLACELINE_ID: {
            return __assign({}, state, { placelineId: action.payload });
        }
        case UserDispatch.TOGGLE_PLACELINE_ID: {
            var placelineId = state.placelineId == action.payload ? null : action.payload;
            return __assign({}, state, { placelineId: placelineId });
        }
        case UserDispatch.SET_PLACELINE_QUERY: {
            return __assign({}, state, { placelineQuery: action.payload });
        }
        case UserDispatch.ADD_PLACELINE_QUERY: {
            return __assign({}, state, { placelineQuery: __assign({}, state.placelineQuery, action.payload) });
        }
        case UserDispatch.SET_PLACELINE_LOADING: {
            return __assign({}, state, { placelineLoading: !!action.payload });
        }
        /*
        List
         */
        case UserDispatch.SET_LIST_ID: {
            return __assign({}, state, { listId: action.payload });
        }
        case UserDispatch.TOGGLE_LIST_ID: {
            var listId = state.listId == action.payload ? null : action.payload;
            return __assign({}, state, { listId: listId });
        }
        case UserDispatch.SET_LIST_ACTIVE: {
            return __assign({}, state, { usersListActive: action.payload });
        }
        case UserDispatch.ADD_LIST_QUERY: {
            return __assign({}, state, { listQuery: __assign({}, state.listQuery, action.payload) });
        }
        case UserDispatch.SET_LIST_QUERY: {
            return __assign({}, state, { listQuery: action.payload });
        }
        case UserDispatch.CLEAR_QUERY_KEY: {
            var listQuery = __assign({}, state.listQuery);
            if (listQuery)
                delete listQuery[action.payload];
            return __assign({}, state, { listQuery: listQuery });
        }
        /*
        Analytics page
         */
        case UserDispatch.SET_USERS_ANALYTICS_PAGE: {
            return __assign({}, state, { usersAnalyticsPage: action.payload });
        }
        case UserDispatch.SET_USERS_ANALYTICS_LOADING: {
            return __assign({}, state, { analyticsLoading: action.payload });
        }
        case UserDispatch.SET_USERS_INDEX_PAGE: {
            return __assign({}, state, { usersIndexPage: action.payload });
        }
        case UserDispatch.ADD_USERS_ANALYTICS_ALL: {
            var resultsEntity = {};
            if (state.usersAnalyticsAll) {
                resultsEntity = __assign({}, state.usersAnalyticsAll.resultsEntity, _.indexBy(action.payload.results, "id"));
            }
            return __assign({}, state, { usersAnalyticsAll: {
                    next: action.payload.next,
                    previous: action.payload.previous,
                    count: action.payload.count,
                    resultsEntity: resultsEntity
                } });
        }
        case UserDispatch.SET_USERS_ANALYTICS_ALL: {
            var resultsEntity = {};
            if (state.usersAnalyticsAll) {
                resultsEntity = _.indexBy(action.payload.results, "id");
            }
            return __assign({}, state, { usersAnalyticsAll: {
                    next: action.payload.next,
                    previous: action.payload.previous,
                    count: action.payload.count,
                    resultsEntity: resultsEntity
                } });
        }
        case UserDispatch.SET_USERS_ANALYTICS_ALL_LOADING: {
            return __assign({}, state, { analyticsAllLoading: action.payload });
        }
        case UserDispatch.ADD_USERS_INDEX_ALL: {
            // const newEntities = _.indexBy(action.payload.results, 'id');
            var resultsEntity = state.usersIndexAll
                ? __assign({}, state.usersIndexAll.resultsEntity, action.payload.resultsEntity) : {};
            return __assign({}, state, { usersIndexAll: __assign({}, action.payload, { resultsEntity: resultsEntity }) });
        }
        case UserDispatch.SET_USERS_LIST_DATA_MAP: {
            return __assign({}, state, { usersListDataMap: action.payload });
        }
        case UserDispatch.SET_USERS_MARKERS_DATA_MAP: {
            return __assign({}, state, { usersMarkersDataMap: action.payload });
        }
        case UserDispatch.SET_USERS_LIST_API_TYPE: {
            return __assign({}, state, { listApiType: action.payload });
        }
        case UserDispatch.SET_MARKERS_ACTIVE: {
            return __assign({}, state, { usersMarkersActive: action.payload });
        }
        /*
        Summary
         */
        case UserDispatch.SET_SUMMARY_ACTIVE: {
            return __assign({}, state, { usersSummaryActive: action.payload });
        }
        case UserDispatch.SET_USERS_SUMMARY: {
            return __assign({}, state, { usersSummary: action.payload });
        }
        case UserDispatch.SET_USERS_SUMMARY_LOADING: {
            return __assign({}, state, { summaryLoading: !!action.payload });
        }
        default: {
            return state;
        }
    }
}
export var getUserData = function (state) { return state.userData; };
export var getPlacelineId = function (state) { return state.placelineId; };
export var getPlacelineQuery = function (state) { return state.placelineQuery; };
export var getPlacelineLoading = function (state) { return state.placelineLoading; };
export var getListActive = function (state) { return state.usersListActive; };
export var getListId = function (state) { return state.listId; };
export var getListQuery = function (state) { return state.listQuery; };
export var getAnalyticsPage = function (state) { return state.usersAnalyticsPage; };
export var getAnalyticsLoading = function (state) { return state.analyticsLoading; };
export var getAnalyticsAll = function (state) { return state.usersAnalyticsAll; };
export var getAnalyticsAllLoading = function (state) {
    return state.analyticsAllLoading;
};
export var getMarkerDataMap = function (state) { return state.usersMarkersDataMap; };
export var getIndexAll = function (state) { return state.usersIndexAll; };
// export const getAnalyticFilteredsMarkers = (state: State) => validMarkers(state.usersAnalyticsAll);
// export const getIndexFilteredMarkers = (state: State) => validMarkers(state.usersIndexAll);
export var getIndexPage = function (state) { return state.usersIndexPage; };
export var getListApiType = function (state) { return state.listApiType; };
export var getMarkersActive = function (state) { return state.usersMarkersActive; };
export var getSummary = function (state) { return state.usersSummary; };
export var getSummaryActive = function (state) { return state.usersSummaryActive; };
export var getSummaryLoading = function (state) { return state.summaryLoading; };
export var getAnalyticFilteredMarkers = createSelector(getAnalyticsAll, getMarkerDataMap, function (allData, mapFunc) {
    return mapFunc ? mapFunc(allData) : allData;
});
export var getIndexFilteredMarkers = createSelector(getIndexAll, getMarkerDataMap, function (allData, mapFunc) {
    return mapFunc ? mapFunc(allData) : allData;
});
export var getIndexActive = createSelector(getListApiType, getListActive, function (apiType, isListActive) {
    return false;
    // return apiType === ApiType.index && isListActive
});
export var getAnalyticsActive = createSelector(getListApiType, getListActive, function (apiType, isListActive) {
    return isListActive;
    // return apiType === ApiType.analytics && isListActive
});
export var getIndexMarkersActive = createSelector(getListApiType, getMarkersActive, function (apiType, isMarkersActive) {
    return false;
    // return apiType === ApiType.index && isMarkersActive
});
export var getAnalyticsMarkersActive = createSelector(getListApiType, getMarkersActive, function (apiType, isMarkersActive) {
    return isMarkersActive;
    // return apiType === ApiType.analytics && isMarkersActive
});
//# sourceMappingURL=user-reducer.js.map