var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as fromGroup from "../../reducers";
import * as fromGroupDispatcher from "../../dispatchers/groups-dispatcher";
import { EntityItemClient } from "../../base/item-client";
import { clientSubMixin } from "../../mixins/client-subscription";
import { itemQueryMixin } from "../../mixins/entity-query";
import { getIdQueryDataMixin } from "../../mixins/get-data";
import { of } from "rxjs/observable/of";
import { empty } from "rxjs/observable/empty";
import { getFirstDataMixin } from "../../mixins/get-first-data";
var GroupsItem = (function (_super) {
    __extends(GroupsItem, _super);
    function GroupsItem(_a) {
        var store = _a.store, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "group";
        _this.defaultQuery = { ordering: "-created_at" };
        _this.updateStrategy = "once";
        _this.query$ = of({});
        _this.data$ = empty();
        _this.loading$ = of(false);
        _this.api$ = function (id, query) { return api.get(id, query); };
        _this.store = store;
        _this.id$ = _this.store.select(fromGroup.getGroupId);
        return _this;
        // this.init()
    }
    GroupsItem.prototype.getDefaultQuery = function () {
        return __assign({}, _super.prototype.getDefaultQuery.call(this), this.defaultQuery);
    };
    GroupsItem.prototype.setId = function (id) {
        this.store.dispatch(new fromGroupDispatcher.SetGroupId(id));
    };
    GroupsItem.prototype.setData = function (data) {
        this.store.dispatch(new fromGroupDispatcher.SetGroup(data));
    };
    GroupsItem.prototype.setLoading = function (data) { };
    GroupsItem.prototype.setQuery = function () { };
    GroupsItem.prototype.clearData = function () {
        this.setData(null);
    };
    GroupsItem.prototype.destroy = function () {
        this.clearData();
        this.dataSub.unsubscribe();
    };
    return GroupsItem;
}(EntityItemClient));
export { GroupsItem };
export var GroupsItemClient = clientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(GroupsItem))));
// applyMixins(GroupsItemClient, [ItemGetData, ItemQuery, ClientSub]);
// export const groupsItemsClientFactory = (config = {}): GroupsItem => {
//   let innerConfig = {
//     name: 'group',
//     defaultQuery: {ordering: '-created_at'},
//     updateStrategy: 'once',
//     ...config
//   };
//
//   let itemSelector: EntityItemSelectors = {
//     id$: store.select(fromGroup.getGroupId),
//     query$: Observable.of({}),
//     data$: Observable.empty(),
//     loading$: Observable.of(false),
//   };
//
//   let dispatchers: EntityItemDispatchers = {
//     setId(id) {
//       store.dispatch(new fromGroupDispatcher.SetGroupId(id))
//     },
//     setData(data) {
//       store.dispatch(new fromGroupDispatcher.SetGroup(data))
//     },
//     setLoading(data) {
//
//     },
//     setQuery() {
//
//     }
//
//   };
//
//   const state = {
//     api$: (id, query?) => clientApi.groups.get(id, query),
//     dispatchers,
//     selectors: itemSelector
//   };
//
//   let groupsIndex = entityClientFactory(state, innerConfig, 'item');
//   groupsIndex.init();
//   return groupsIndex as GroupsItem;
//
// };
//# sourceMappingURL=groups-item-client.js.map