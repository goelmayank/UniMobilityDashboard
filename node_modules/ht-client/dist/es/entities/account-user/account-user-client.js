var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { getIdQueryDataMixin } from "../../mixins/get-data";
import { clientSubMixin } from "../../mixins/client-subscription";
import { itemQueryMixin } from "../../mixins/entity-query";
import { of } from "rxjs/observable/of";
import * as fromRoot from "../../reducers";
import * as fromAccounts from "../../dispatchers/accounts-dispatcher";
import { getFirstDataMixin } from "../../mixins/get-first-data";
import { EntityItemClient } from "../../base/item-client";
var AccountUser = (function (_super) {
    __extends(AccountUser, _super);
    function AccountUser(_a) {
        var dateParam = _a.dateParam, store = _a.store, api = _a.api;
        var _this = _super.call(this) || this;
        _this.query$ = of({});
        _this.updateStrategy = "once";
        _this.pollDuration = 10000;
        _this.api$ = function (id, query) { return api.get(id, query); };
        _this.store = store;
        // this.active$ = this.store.select(fromRoot.getUsersAnalyticsIsActive);
        _this.data$ = _this.store.select(fromRoot.getAccountUser);
        _this.id$ = _this.store.select(fromRoot.getAccountUserId);
        _this.loading$ = _this.store.select(fromRoot.getAccountCurrentKey);
        return _this;
        // this.init()
    }
    AccountUser.prototype.getDefaultQuery = function () {
        return {};
    };
    AccountUser.prototype.setId = function (id) {
        this.store.dispatch(new fromAccounts.SetUserId(id));
    };
    AccountUser.prototype.setLoading = function (loading) { };
    AccountUser.prototype.setData = function (data) {
        this.store.dispatch(new fromAccounts.SetAccountUser(data));
    };
    return AccountUser;
}(EntityItemClient));
export { AccountUser };
export var AccountUserClient = clientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(AccountUser))));
//# sourceMappingURL=account-user-client.js.map