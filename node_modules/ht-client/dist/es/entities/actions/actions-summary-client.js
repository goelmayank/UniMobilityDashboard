var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EntityListClient } from "../../base/list-client";
import * as fromRoot from "../../reducers";
import * as fromActions from "../../dispatchers/actions-dispatcher";
import { listQueryMixin } from "../../mixins/entity-query";
import { getQueryDataMixin } from "../../mixins/get-data";
import { getFirstDataMixin } from "../../mixins/get-first-data";
import { clientSubMixin } from "../../mixins/client-subscription";
import { ActionsFilter } from "../../filters/actions-filter";
import { map } from "rxjs/operators";
var ActionsSummary = (function (_super) {
    __extends(ActionsSummary, _super);
    function ActionsSummary(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.allowedQueryMap = [
            {
                key: "show_all",
            },
            {
                key: "search"
            }
        ];
        _this.updateStrategy = 'live';
        // updateStrategy = 'once';
        _this.filter = new ActionsFilter();
        _this.api$ = function (query) { return api.summary(query); };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.dateParam = dateParam;
        _this.query$ = _this.store.select(fromRoot.getActionsSummaryQuery);
        _this.active$ = _this.store.select(fromRoot.getActionsSummaryActive);
        _this.data$ = _this.store.select(fromRoot.getActionsSummary);
        _this.summaryChart$ = _this.getSummaryChart();
        _this.loading$ = _this.store.select(fromRoot.getActionsSummaryLoading);
        return _this;
    }
    ActionsSummary.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        isActive = isActive ? new Date().toISOString() : isActive;
        this.store.dispatch(new fromActions.SetSummaryActive(isActive));
    };
    ActionsSummary.prototype.setLoading = function (loading) {
        this.store.dispatch(new fromActions.SetSummaryLoading(loading));
    };
    ;
    ActionsSummary.prototype.setData = function (data) {
        this.store.dispatch(new fromActions.SetSummary(data));
    };
    ActionsSummary.prototype.setQuery = function (query) {
        this.store.dispatch(new fromActions.SetSummaryQuery(query));
    };
    ;
    ActionsSummary.prototype.getSummaryChart = function () {
        var _this = this;
        return this.data$.pipe(map(function (summaryData) {
            return _this.filter.summaryCharts(_this.filter.statusQueryArray, summaryData);
        }));
    };
    return ActionsSummary;
}(EntityListClient));
export { ActionsSummary };
;
export var ActionsSummaryClient = clientSubMixin(getQueryDataMixin(getFirstDataMixin(listQueryMixin(ActionsSummary))));
//# sourceMappingURL=actions-summary-client.js.map