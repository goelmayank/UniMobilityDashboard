import { getFirstDataMixin } from "../../mixins/get-first-data";
import { listQueryMixin } from "../../mixins/entity-query";
import { getQueryDataMixin } from "../../mixins/get-data";
import { clientSubMixin } from "../../mixins/client-subscription";
import { BehaviorSubject } from "rxjs/BehaviorSubject";
import { of } from "rxjs/observable/of";
var ActionsGraph = (function () {
    function ActionsGraph(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        this.query$ = of({});
        this.dataBehaviour$ = new BehaviorSubject(null);
        this.data$ = this.dataBehaviour$.asObservable();
        this.loadingBehaviour$ = new BehaviorSubject(false);
        this.loading$ = this.loadingBehaviour$.asObservable();
        this.updateStrategy = "once";
        this.pollDuration = 10000;
        this.api$ = function (query) { return api.graph(query); };
        this.dateRange = dateRange;
        this.dateParam = dateParam;
    }
    ActionsGraph.prototype.getDefaultQuery = function () {
        return {};
    };
    ;
    ActionsGraph.prototype.setData = function (data) {
        this.dataBehaviour$.next(data);
    };
    ActionsGraph.prototype.firstDataEffect = function () {
        this.setLoading(false);
    };
    ActionsGraph.prototype.setLoading = function (loading) {
        if (loading === void 0) { loading = true; }
        this.loadingBehaviour$.next(!!loading);
    };
    ActionsGraph.prototype.clearData = function () {
        this.setData(null);
    };
    ActionsGraph.prototype.destroy = function () {
        this.clearData();
        this.dataSub.unsubscribe();
    };
    return ActionsGraph;
}());
export { ActionsGraph };
export var ActionsGraphClient = clientSubMixin(getQueryDataMixin(getFirstDataMixin(listQueryMixin(ActionsGraph))));
//# sourceMappingURL=actions-graph.js.map