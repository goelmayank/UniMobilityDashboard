var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as fromRoot from "../../reducers";
import * as fromUsersDispatcher from "../../dispatchers/user-dispatcher";
import { getPageDataMixin } from "../../mixins/get-data";
import { listQueryMixin } from "../../mixins/entity-query";
import { clientSubMixin } from "../../mixins/client-subscription";
import { EntityListClient } from "../../base/list-client";
import { PageResults$ } from "ht-data";
import { getFirstDataMixin } from "../../mixins/get-first-data";
var UsersAnalytics = (function (_super) {
    __extends(UsersAnalytics, _super);
    function UsersAnalytics(_a) {
        var dateRange = _a.dateRange, store = _a.store, dateParam = _a.dateParam, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "users analytics list";
        _this.defaultQuery = { ordering: "-last_heartbeat_at" };
        _this.api$ = function (query) {
            return api.analytics(query);
        };
        _this.dateRange = dateRange;
        _this.store = store;
        _this.query$ = _this.store.select(fromRoot.getUsersListQuery);
        _this.dateParam = dateParam;
        _this.active$ = _this.store.select(fromRoot.getUsersAnalyticsIsActive);
        _this.data$ = _this.store.select(fromRoot.getUsersAnalyticsPage);
        _this.id$ = _this.store.select(fromRoot.getUsersListId);
        _this.loading$ = _this.store.select(fromRoot.getUsersAnalyticsLoading);
        _this.dataArray$ = _this.data$.pipe(PageResults$);
        return _this;
        // this.init()
    }
    UsersAnalytics.prototype.getDefaultQuery = function () {
        return __assign({}, _super.prototype.getDefaultQuery.call(this), this.defaultQuery);
        // return {...this.defaultQuery}
    };
    UsersAnalytics.prototype.firstDataEffect = function () {
        this.setLoading(false);
    };
    UsersAnalytics.prototype.setLoading = function (data) {
        this.store.dispatch(new fromUsersDispatcher.SetUsersAnalyticsLoading(data));
    };
    UsersAnalytics.prototype.setData = function (data) {
        this.store.dispatch(new fromUsersDispatcher.SetUsersAnalyticsPage(data));
    };
    UsersAnalytics.prototype.setActive = function (isActive) {
        if (isActive === void 0) { isActive = true; }
        isActive = isActive ? new Date().toISOString() : isActive;
        this.store.dispatch(new fromUsersDispatcher.SetListActive(isActive));
    };
    Object.defineProperty(UsersAnalytics.prototype, "apiQuery$", {
        get: function () {
            return this.getApiQuery$();
        },
        enumerable: true,
        configurable: true
    });
    UsersAnalytics.prototype.addQuery = function (query) {
        if (query === void 0) { query = {}; }
        this.store.dispatch(new fromUsersDispatcher.AddListQuery(query));
    };
    UsersAnalytics.prototype.setQuery = function (query) {
        if (query === void 0) { query = {}; }
        this.store.dispatch(new fromUsersDispatcher.SetListQuery(query));
    };
    UsersAnalytics.prototype.setQueryReset = function (query) {
        this.store.dispatch(new fromUsersDispatcher.AddListQuery(__assign({}, query, { page: null })));
    };
    UsersAnalytics.prototype.clearQueryKey = function (key) {
        this.store.dispatch(new fromUsersDispatcher.ClearQueryKey(key));
    };
    UsersAnalytics.prototype.toggleId = function (userId) {
        this.store.dispatch(new fromUsersDispatcher.ToggleUsersListId(userId));
    };
    UsersAnalytics.prototype.setId = function (userId) {
        this.store.dispatch(new fromUsersDispatcher.SetUsersListId(userId));
    };
    UsersAnalytics.prototype.clearData = function () {
        this.setData(null);
        this.setActive(false);
        this.setQuery({});
    };
    UsersAnalytics.prototype.destroy = function () {
        this.clearData();
        this.dataSub.unsubscribe();
    };
    return UsersAnalytics;
}(EntityListClient));
export { UsersAnalytics };
export var UsersAnalyticsClient = clientSubMixin(getPageDataMixin(getFirstDataMixin(listQueryMixin(UsersAnalytics))));
// applyMixins(UsersAnalytics, [ListGetData, ListQuery, ClientSub]);
//# sourceMappingURL=users-analytics-client.js.map