var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as fromRoot from "../../reducers";
import * as fromSegmentsDispatcher from "../../dispatchers/segments-dispatcher";
import * as fromUsersDispatcher from "../../dispatchers/user-dispatcher";
import { EntityItemClient } from "../../base/item-client";
import { getIdQueryDataMixin } from "../../mixins/get-data";
import { itemQueryMixin } from "../../mixins/entity-query";
import { clientSubMixin } from "../../mixins/client-subscription";
import { getFirstDataMixin } from "../../mixins/get-first-data";
var UsersPlaceline = (function (_super) {
    __extends(UsersPlaceline, _super);
    function UsersPlaceline(_a) {
        var store = _a.store, api = _a.api;
        var _this = _super.call(this) || this;
        _this.name = "users placeline";
        _this.updateStrategy = "live";
        _this.api$ = function (id, query) { return api.placeline(id, query); };
        _this.store = store;
        _this.query$ = _this.store.select(fromRoot.getUsersPlacelineQuery);
        _this.data$ = _this.store.select(fromRoot.getUsersUsersData);
        _this.loading$ = _this.store.select(fromRoot.getUsersPlacelineLoading);
        _this.id$ = _this.store.select(fromRoot.getUsersPlacelineId);
        _this.segmentsState$ = _this.store.select(fromRoot.getSegmentsState);
        _this.segmentSelectedId$ = _this.store.select(fromRoot.getSegmentsSelectedId);
        _this.segmentResetId$ = _this.store.select(fromRoot.getSegmentsResetMapId);
        return _this;
        // this.init()
    }
    UsersPlaceline.prototype.setData = function (data) {
        this.store.dispatch(new fromUsersDispatcher.SetUserData(data));
    };
    UsersPlaceline.prototype.setLoading = function (data) {
        this.store.dispatch(new fromUsersDispatcher.SetPlacelineLoading(data));
    };
    UsersPlaceline.prototype.setId = function (id) {
        this.store.dispatch(new fromUsersDispatcher.SetPlacelineId(id));
    };
    UsersPlaceline.prototype.toggleId = function (userId) {
        this.store.dispatch(new fromUsersDispatcher.TogglePlacelineId(userId));
    };
    UsersPlaceline.prototype.setQuery = function (query) {
        this.store.dispatch(new fromUsersDispatcher.SetPlacelineQuery(query));
    };
    UsersPlaceline.prototype.setSegmentSelectedId = function (segmentId) {
        this.store.dispatch(new fromSegmentsDispatcher.SetSelectedId(segmentId));
    };
    UsersPlaceline.prototype.setSegmentResetMapId = function (segmentId) {
        this.store.dispatch(new fromSegmentsDispatcher.SetResetMapId(segmentId));
    };
    UsersPlaceline.prototype.getMapData$ = function () {
        // return dataWithSelectedId$(this.data$, this.segmentSelectedId$, [
        //   "segments"
        // ]);
    };
    UsersPlaceline.prototype.clearData = function () {
        this.setData(null);
        this.setQuery({});
    };
    return UsersPlaceline;
}(EntityItemClient));
export { UsersPlaceline };
export var UsersPlacelineClient = clientSubMixin(getIdQueryDataMixin(getFirstDataMixin(itemQueryMixin(UsersPlaceline))));
// applyMixins(UsersPlacelineClient, [ItemGetData, ItemQuery, ClientSub]);
// export const UsersPlacelineClientFactory = (): UsersPlaceline => {
//   let innerConfig: Partial<EntityTypeConfig> = {
//     name: 'users placeline',
//     updateStrategy: 'live',
//   };
//
//   let itemSelectors: EntityItemSelectors = {
//     query$: store.select(fromRoot.getQueryPlacelineQuery),
//     data$: store.select(fromRoot.getUsersUsersData),
//     loading$: store.select(fromRoot.getLoadingUserData),
//     id$: store.select(fromRoot.getQueryPlacelineId)
//   };
//
//   let placelineSelectors: AddUsersPlacelineSelector = {
//     segmentsState$: store.select(fromRoot.getSegmentsState),
//     getMapData$() {
//       return Observable.combineLatest(
//         this.data$,
//         this.segmentsState$,
//         (userData: IUserData, {selectedId, resetMapId}) => {
//           if(userData && (selectedId || resetMapId)) {
//             const id = selectedId || resetMapId;
//             let segments = _.filter(userData.segments, (segment: ISegment) => {
//               return segment.id === id;
//             });
//             userData = {...userData, segments: segments, events: [], actions: []}
//           }
//           return userData
//         }
//       )
//     }
//   };
//
//   let dispatchers: EntityItemDispatchers = {
//     setData(data) {
//       store.dispatch(new fromUsersDispatcher.SetUserData(data))
//     },
//     setLoading(data) {
//       store.dispatch(new fromLoadingDispatcher.SetLoadingUserData(data))
//     },
//     setId(id) {
//       store.dispatch(new fromQueryDispatcher.SetPlacelineId(id))
//     },
//     toggleId(userId: string) {
//       store.dispatch(new fromQueryDispatcher.TogglePlacelineId(userId))
//     },
//     addQuery(query) {
//       store.dispatch(new fromQueryDispatcher.SetPlacelineQuery(query))
//     }
//   };
//
//   let placelineDispatchers: AddUsersPlacelineDispatchers = {
//     setSegmentSelectedId(segmentId) {
//       store.dispatch(new fromSegmentsDispatcher.SetSelectedId(segmentId))
//     },
//     setSegmentResetMapId(segmentId: string) {
//       store.dispatch(new fromSegmentsDispatcher.SetResetMapId(segmentId))
//     },
//   };
//
//
//   let api = clientApi.users;
//   let api$ = (id, query) => api.placeline(id, query);
//
//   let state = {
//     api$,
//     selectors: {
//       ...itemSelectors,
//       ...placelineSelectors
//     },
//     dispatchers: {
//       ...dispatchers,
//       ...placelineDispatchers
//     }
//   };
//
//   const placeline = entityClientFactory(state, innerConfig, 'item') as UsersPlaceline;
//
//   placeline.init();
//
//   return placeline
// };
//# sourceMappingURL=users-placeline-client.js.map