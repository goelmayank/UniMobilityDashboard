var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { filter } from "rxjs/operators/filter";
import { map } from "rxjs/operators/map";
import * as _ from "underscore";
import { EntityListClient } from "./list-client";
import { pluck } from "rxjs/operators";
var EntityAllItemsClient = (function (_super) {
    __extends(EntityAllItemsClient, _super);
    // data$: Observable<Page<any>>;
    function EntityAllItemsClient() {
        var _this = _super.call(this) || this;
        _this.updateStrategy = "once";
        _this.allowedQueryKeys = ["search", "status"];
        return _this;
    }
    Object.defineProperty(EntityAllItemsClient.prototype, "data$", {
        get: function () {
            return this.dataEntities$.pipe(map(function (allData) {
                if (!allData)
                    return allData;
                var results = _.values(allData.resultsEntity);
                return {
                    count: allData.count || 0,
                    results: results,
                    previous: allData.previous || "",
                    next: allData.next || ""
                };
            }));
        },
        enumerable: true,
        configurable: true
    });
    EntityAllItemsClient.prototype.getDefaultQuery = function () {
        return __assign({}, _super.prototype.getDefaultQuery.call(this), { page_size: 100, ordering: "-created_at" });
    };
    EntityAllItemsClient.prototype.firstDataEffect = function (data) {
        if ((data && !data.next) || !data) {
            this.setLoading(false);
        }
    };
    Object.defineProperty(EntityAllItemsClient.prototype, "dataArray$", {
        get: function () {
            var dataArray$ = this.data$.pipe(filter(function (data) { return !!data; }), map(function (data) {
                var resutls = _.values(data.resultsEntity);
                return resutls;
            }));
            return dataArray$;
        },
        enumerable: true,
        configurable: true
    });
    EntityAllItemsClient.prototype.getAllMarkers$ = function () {
        var _this = this;
        var allMarkers$ = this.dataArray$.pipe(map(function (markers) {
            return _.reduce(markers, function (acc, marker) {
                var isValid = _this.isValidMarker(marker);
                if (isValid) {
                    acc.valid.push(marker);
                }
                else {
                    acc.invalid.push(marker);
                }
                return acc;
            }, { valid: [], invalid: [] });
            // return markers
        }));
        return allMarkers$;
    };
    EntityAllItemsClient.prototype.isValidMarker = function (marker) {
        return true;
    };
    EntityAllItemsClient.prototype.getMarkers$ = function () {
        return this.getAllMarkers$().pipe(pluck("valid"));
    };
    return EntityAllItemsClient;
}(EntityListClient));
export { EntityAllItemsClient };
//# sourceMappingURL=all-items.client.js.map