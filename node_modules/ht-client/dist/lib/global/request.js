"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ht_utility_1 = require("ht-utility");
var fromPromise_1 = require("rxjs/observable/fromPromise");
var client_1 = require("./client");
var HtRequest = /** @class */ (function () {
    function HtRequest() {
        this.baseUrl = "https://api.hypertrack.com/api/v1/";
        // subToken: string = '';
        this.isAdmin = false;
        // this.currentToken = currentToken || HtClientConfig.currentToken
    }
    Object.defineProperty(HtRequest.prototype, "token", {
        // setToken(token) {
        //   this.token = token;
        // }
        get: function () {
            return client_1.htClientService.getInstance().token;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtRequest.prototype, "currentToken", {
        // setIsAdmin(isAdmin) {
        //   this.isAdmin = isAdmin;
        // }
        get: function () {
            var token = client_1.htClientService.getInstance().currentToken;
            return token;
        },
        enumerable: true,
        configurable: true
    });
    HtRequest.prototype.headerObj = function () {
        return { Authorization: "token " + this.currentToken };
    };
    HtRequest.prototype.headerStrings = function () {
        return ["Authorization", "token " + this.currentToken];
    };
    HtRequest.prototype.url = function (url, query) {
        if (query === void 0) { query = {}; }
        var string = ht_utility_1.HtQuerySerialize(query);
        return this.baseUrl + url + "?" + string;
    };
    HtRequest.prototype.getObservable = function (url, options) {
        if (options === void 0) { options = {}; }
        var p = this.getFetch(url, options);
        return fromPromise_1.fromPromise(p);
    };
    HtRequest.prototype.postObservable = function (url, body, options) {
        if (options === void 0) { options = {}; }
        var p = this.postFetch(url, body, options);
        return fromPromise_1.fromPromise(p);
    };
    HtRequest.prototype.api$ = function (url, query, options) {
        if (options === void 0) { options = {}; }
        url = this.url(url, query);
        return this.getObservable(url, options);
    };
    HtRequest.prototype.postApi$ = function (url, body, options) {
        url = this.url(url);
        return this.postObservable(url, body, options);
    };
    HtRequest.prototype.getFetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, __assign({ headers: this.headerObj() }, options)).then(function (res) {
            return res.json();
        });
    };
    HtRequest.prototype.postFetch = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return fetch(url, __assign({ headers: this.headerObj(), method: "POST", body: JSON.stringify(body) }, options)).then(function (res) { return res.json(); });
    };
    return HtRequest;
}());
exports.HtRequest = HtRequest;
exports.htRequestService = (function () {
    var instance;
    return {
        getInstance: function (token, config) {
            if (config === void 0) { config = {}; }
            if (!instance) {
                instance = new HtRequest();
            }
            return instance;
        },
        setInstance: function (newintance) {
            instance = newintance;
        }
    };
})();
// export const htRequest = (options?) => new HtRequest(options);
//# sourceMappingURL=request.js.map