"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
var combineLatest_1 = require("rxjs/observable/combineLatest");
var operators_1 = require("rxjs/operators");
var ht_data_1 = require("ht-data");
var EntityClient = (function () {
    function EntityClient() {
    }
    EntityClient.prototype.dataArrayWithSelected$ = function (id$, dataArray$, selected$) {
        var userId$ = id$;
        var placelinePage$ = selected$.pipe(operators_1.distinctUntilChanged(), operators_1.map(function (data) {
            return data ? [data] : null;
        })); //todo take query from placeline
        var array$ = combineLatest_1.combineLatest(placelinePage$, userId$, dataArray$, function (placelinePage, userId, dataArray) {
            var filteredData = _.filter(dataArray, function (user) {
                return userId ? user.id == userId : true;
            });
            return placelinePage && userId ? placelinePage : filteredData;
        });
        return array$;
    };
    EntityClient.prototype.pageDataWithSelected$ = function (id$, pageData$, selected$) {
        // const userId$ = id$;
        var placelinePage$ = selected$.pipe(ht_data_1.itemAsPage$());
        var newPageData$ = combineLatest_1.combineLatest(placelinePage$, id$, pageData$, function (placelinePage, userId, pageData) {
            if (!pageData)
                return pageData;
            var placelineResults = placelinePage ? placelinePage.results : null;
            var filteredData = _.filter(pageData.results, function (user) {
                return userId ? user.id == userId : true;
            });
            var results = placelineResults && userId ? placelineResults : filteredData;
            var count = userId ? 0 : pageData.count;
            return __assign({}, pageData, { results: results, count: count });
        });
        return newPageData$;
    };
    EntityClient.prototype.getPageFromEntity = function (item$) {
        return item$;
    };
    return EntityClient;
}());
exports.EntityClient = EntityClient;
//# sourceMappingURL=entity-client.js.map