"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var dispatcher_1 = require("./dispatcher");
var reducer_manager_1 = require("./reducer-manager");
var scanned_action_1 = require("./scanned-action");
var state_1 = require("./state");
var store_1 = require("./store");
var effects_1 = require("./effects");
var StoreProvider = (function () {
    function StoreProvider(reducers, config) {
        if (config === void 0) { config = {}; }
        this.INITIAL_STATE = config.initialState;
        this.metaReducers = config.metaReducers;
        this._REDUCER_FACTORY = config.reducerFactory
            ? config.reducerFactory
            : utils_1.combineReducers;
        this.REDUCER_FACTORY = utils_1.createReducerFactory(this._REDUCER_FACTORY, this.metaReducers);
        this.dispatcher = new dispatcher_1.Dispatcher(); //actionSubject
        this.EFFECTS_PROVIDERS = new effects_1.Effects(this.dispatcher);
        this.reducerManager = new reducer_manager_1.ReducerManager(this.dispatcher, this.INITIAL_STATE, reducers, this.REDUCER_FACTORY);
        this.SCANNED_ACTIONS_SUBJECT_PROVIDERS = new scanned_action_1.ScannedActionsSubject();
        this.STATE_PROVIDERS = new state_1.State(this.dispatcher, this.reducerManager, this.SCANNED_ACTIONS_SUBJECT_PROVIDERS, this.INITIAL_STATE);
        this.STORE_PROVIDERS = new store_1.Store(this.STATE_PROVIDERS, this.dispatcher, this.reducerManager);
    }
    return StoreProvider;
}());
exports.StoreProvider = StoreProvider;
exports.storeFactory = function (reducers, config) {
    if (config === void 0) { config = {}; }
    var INITIAL_STATE = config.initialState;
    var metaReducers = config.metaReducers;
    var _REDUCER_FACTORY = config.reducerFactory
        ? config.reducerFactory
        : utils_1.combineReducers;
    var REDUCER_FACTORY = utils_1.createReducerFactory(_REDUCER_FACTORY, metaReducers);
    var dispatcher = new dispatcher_1.Dispatcher(); //actionSubject
    var EFFECTS_PROVIDERS = new effects_1.Effects(dispatcher);
    var reducerManager = new reducer_manager_1.ReducerManager(dispatcher, INITIAL_STATE, reducers, REDUCER_FACTORY);
    var SCANNED_ACTIONS_SUBJECT_PROVIDERS = new scanned_action_1.ScannedActionsSubject();
    var STATE_PROVIDERS = new state_1.State(dispatcher, reducerManager, SCANNED_ACTIONS_SUBJECT_PROVIDERS, INITIAL_STATE);
    var STORE_PROVIDERS = new store_1.Store(STATE_PROVIDERS, dispatcher, reducerManager);
    return {
        INITIAL_STATE: INITIAL_STATE,
        metaReducers: metaReducers,
        _REDUCER_FACTORY: _REDUCER_FACTORY,
        dispatcher: dispatcher,
        SCANNED_ACTIONS_SUBJECT_PROVIDERS: SCANNED_ACTIONS_SUBJECT_PROVIDERS,
        REDUCER_FACTORY: REDUCER_FACTORY,
        EFFECTS_PROVIDERS: EFFECTS_PROVIDERS,
        reducerManager: reducerManager,
        STATE_PROVIDERS: STATE_PROVIDERS,
        STORE_PROVIDERS: STORE_PROVIDERS
    };
};
//# sourceMappingURL=index.js.map