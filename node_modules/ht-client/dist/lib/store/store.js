"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var distinctUntilChanged_1 = require("rxjs/operator/distinctUntilChanged");
var map_1 = require("rxjs/operator/map");
var Observable_1 = require("rxjs/Observable");
var pluck_1 = require("rxjs/operator/pluck");
var Store = (function (_super) {
    __extends(Store, _super);
    function Store(state$, dispatcher, reducerManager) {
        var _this = _super.call(this) || this;
        _this.dispatcher = dispatcher;
        _this.reducerManager = reducerManager;
        _this.source = state$;
        return _this;
    }
    Store.prototype.select = function (pathOrMapFn) {
        var paths = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            paths[_i - 1] = arguments[_i];
        }
        var mapped$;
        if (typeof pathOrMapFn === "string") {
            mapped$ = pluck_1.pluck.call.apply(pluck_1.pluck, [this, pathOrMapFn].concat(paths));
        }
        else if (typeof pathOrMapFn === "function") {
            mapped$ = map_1.map.call(this, pathOrMapFn);
        }
        else {
            throw new TypeError("Unexpected type '" + typeof pathOrMapFn + "' in select operator," +
                " expected 'string' or 'function'");
        }
        return distinctUntilChanged_1.distinctUntilChanged.call(mapped$);
    };
    Store.prototype.lift = function (operator) {
        var store = new Store(this, this.dispatcher, this.reducerManager);
        store.operator = operator;
        return store;
    };
    Store.prototype.dispatch = function (action) {
        this.dispatcher.next(action);
    };
    Store.prototype.next = function (action) {
        this.dispatcher.next(action);
    };
    Store.prototype.error = function (err) {
        this.dispatcher.error(err);
    };
    Store.prototype.complete = function () {
        this.dispatcher.complete();
    };
    Store.prototype.addReducer = function (key, reducer) {
        this.reducerManager.addReducer(key, reducer);
    };
    Store.prototype.removeReducer = function (key) {
        this.reducerManager.removeReducer(key);
    };
    return Store;
}(Observable_1.Observable));
exports.Store = Store;
//# sourceMappingURL=store.js.map