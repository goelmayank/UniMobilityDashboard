"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
var operators_1 = require("rxjs/operators");
var timer_1 = require("rxjs/observable/timer");
function getIdQueryDataMixin(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getData$ = function (_a) {
            var _this = this;
            var id = _a[0], query = _a[1];
            var update = this.getFirstData$([id, query]).pipe(operators_1.expand(function (data) {
                return timer_1.timer(_this.pollDuration).pipe(operators_1.switchMap(function () {
                    return _this.api$(id, query);
                }));
            }));
            return this.updateStrategy != "once"
                ? update
                : this.getFirstData$([id, query]);
        };
        return class_1;
    }(Base));
}
exports.getIdQueryDataMixin = getIdQueryDataMixin;
function getPageDataMixin(Base) {
    return (function (_super) {
        __extends(class_2, _super);
        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_2.prototype.getData$ = function (_a) {
            var _this = this;
            var query = _a[0];
            var update = this.getFirstData$([query]).pipe(operators_1.expand(function (data) {
                return timer_1.timer(_this.pollDuration).pipe(operators_1.switchMap(function () {
                    if (_this.updateStrategy == "live") {
                        return _this.api$(query);
                    }
                    else {
                        var ids = _.map(data.results, function (item) {
                            return item["id"];
                        });
                        var updateQuery = __assign({}, query, { id: ids.toString(), status: null, page: null });
                        return _this.api$(updateQuery).pipe(operators_1.map(function (newData) {
                            return __assign({}, data, { results: newData.results });
                        }));
                    }
                }));
            }));
            return this.updateStrategy != "once"
                ? update
                : this.getFirstData$([query]);
        };
        return class_2;
    }(Base));
}
exports.getPageDataMixin = getPageDataMixin;
function getQueryDataMixin(Base) {
    return (function (_super) {
        __extends(class_3, _super);
        function class_3() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_3.prototype.getData$ = function (_a) {
            var _this = this;
            var query = _a[0];
            var update = this.getFirstData$([query]).pipe(operators_1.expand(function (data) {
                return timer_1.timer(_this.pollDuration).pipe(operators_1.switchMap(function () {
                    return _this.api$(query);
                }));
            }));
            return this.updateStrategy != "once"
                ? update
                : this.getFirstData$([query]);
        };
        return class_3;
    }(Base));
}
exports.getQueryDataMixin = getQueryDataMixin;
function getAllPageDataMixin(Base) {
    return (function (_super) {
        __extends(class_4, _super);
        function class_4() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_4.prototype.getData$ = function (_a) {
            var query = _a[0];
            return this.getFirstData$([query]);
        };
        return class_4;
    }(Base));
}
exports.getAllPageDataMixin = getAllPageDataMixin;
//# sourceMappingURL=get-data.js.map