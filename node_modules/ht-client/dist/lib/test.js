"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mix_1 = require("./helpers/mix");
exports.listF = function () {
    var state = {
        name: "list",
        hi: function () { }
    };
    return __assign({}, state, exports.sayHi(state), exports.setName(state), exports.excl(state));
};
exports.sayHi = function (state) { return ({
    hi: function () {
        return "hi " + state.name;
    }
}); };
exports.setName = function (state) { return ({
    set: function (name) {
        state.name = name;
    }
}); };
exports.excl = function (state) { return ({
    ex: function () {
        // console.log(state);
        return state.hi() + "!";
    }
}); };
var Main = (function () {
    function Main() {
        this.name = "test";
    }
    return Main;
}());
exports.Main = Main;
var Base = (function () {
    function Base() {
    }
    Base.prototype.say = function () {
        return this.name;
    };
    return Base;
}());
exports.Base = Base;
var Ex = (function () {
    function Ex() {
    }
    Ex.prototype.exc = function () {
        return this.say() + "!";
    };
    Ex.prototype.comp = function () {
        return "Hi";
    };
    return Ex;
}());
exports.Ex = Ex;
var Ex2 = (function () {
    function Ex2() {
    }
    Ex2.prototype.comp = function () {
        return "So hi";
    };
    Ex2.prototype.log = function (name) {
        return name + " Say " + this.comp() + this.say();
    };
    return Ex2;
}());
exports.Ex2 = Ex2;
mix_1.applyMixins(Main, [Ex, Base, Ex2]);
var Sup = (function (_super) {
    __extends(Sup, _super);
    function Sup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "hoho";
        return _this;
    }
    return Sup;
}(Main));
exports.Sup = Sup;
//# sourceMappingURL=test.js.map