"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var users_placeline_client_1 = require("./users-placeline-client");
var users_analytics_client_1 = require("./users-analytics-client");
var _ = require("underscore");
var entity_client_1 = require("../../base/entity-client");
var users_analytics_markers_1 = require("./users-analytics-markers");
var ht_data_1 = require("ht-data");
var users_filter_1 = require("../../filters/users-filter");
var fromRoot = require("../../reducers");
var users_summary_client_1 = require("./users-summary-client");
var store_provider_1 = require("../../global/store-provider");
var filter_1 = require("rxjs/operators/filter");
var scan_1 = require("rxjs/operators/scan");
var operators_1 = require("rxjs/operators");
var combineLatest_1 = require("rxjs/observable/combineLatest");
var of_1 = require("rxjs/observable/of");
var empty_1 = require("rxjs/observable/empty");
var date_range_1 = require("../../global/date-range");
var fromUsers = require("../../reducers/user-reducer");
var fromSegments = require("../../reducers/segments-reducer");
var ht_data_2 = require("ht-data");
var users_heatmap_client_1 = require("./users-heatmap-client");
var ht_api_1 = require("ht-api");
var HtUsersClient = (function (_super) {
    __extends(HtUsersClient, _super);
    function HtUsersClient(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.filterClass = new users_filter_1.DefaultUsersFilter();
        _this.showAll = false;
        var api = new ht_api_1.HtApi().users;
        _this.key$ = store_provider_1.ApiStoreService.getInstance().select(fromRoot.getAccountCurrentKey);
        _this.api = api;
        var store = store_provider_1.ApiStoreService.getNewInstance();
        store.addReducer("users", fromUsers.usersReducer);
        store.addReducer("segments", fromSegments.segmentsReducer);
        _this.store = store;
        var dateRange = _this.options.dateRange;
        var dateParam = 'recorded_at';
        _this.analytics = new users_analytics_client_1.UsersAnalyticsClient({ dateRange: dateRange, store: store, dateParam: dateParam, api: api });
        _this.placeline = new users_placeline_client_1.UsersPlacelineClient({ store: store, api: api });
        _this.analyticsAll = new users_analytics_markers_1.UsersAnalyticsListAllClient({
            dateRange: dateRange,
            store: store,
            dateParam: dateParam,
            api: api
        });
        _this.summary = new users_summary_client_1.UsersSummaryClient({ dateRange: dateRange, store: store, dateParam: dateParam, api: api });
        _this.list = _this.analytics;
        _this.listAll = _this.analyticsAll;
        _this.heatmap = new users_heatmap_client_1.UsersHeatmapClient({ dateRange: dateRange, dateParam: dateParam, api: api });
        _this.initEffects();
        return _this;
    }
    HtUsersClient.prototype.getLoading$ = function () {
        return ht_data_2.CombineLoadings$(this.list.loading$, this.summary.loading$);
    };
    Object.defineProperty(HtUsersClient.prototype, "statusQueryArray", {
        set: function (data) {
            this._statusQueryArray = data;
            this.filterClass.customQueryArray = data;
        },
        enumerable: true,
        configurable: true
    });
    HtUsersClient.prototype.setShowAll = function (showAll) {
        if (showAll === void 0) { showAll = true; }
        this.showAll = showAll;
        this.list.setQuery({ show_all: true });
    };
    HtUsersClient.prototype.getInitialDateRange = function (range) {
        if (range === void 0) { range = {}; }
        var initialRange = ht_data_2.DateRangeMap.today;
        return __assign({}, range, initialRange);
    };
    HtUsersClient.prototype.listStatusOverview$ = function () {
        return this.summary.data$.pipe(operators_1.map(function (summary) {
            if (summary) {
                return summary.status_overview;
            }
            return null;
        }));
    };
    HtUsersClient.prototype.listStatusChart$ = function (queryLabels) {
        var _this = this;
        // return status_overview.
        if (queryLabels)
            (_a = this.filterClass.customQueryArray).push.apply(_a, queryLabels);
        return combineLatest_1.combineLatest(this.list.query$, this.listStatusOverview$()).pipe(operators_1.map(function (_a) {
            var query = _a[0], overview = _a[1];
            if (overview) {
                var total_1 = 0;
                var statusTotal = void 0;
                var max_1 = 0;
                var summaryEntity = queryLabels || _this.filterClass.getStatusQueryArray(_this.showAll);
                var status_1 = query ? query["status"] : null;
                // let summaryEntity = this.filterClass.activityQueryArray;
                var values = _.map(summaryEntity, function (entity) {
                    var sum = _.reduce(entity.values, function (acc, key) {
                        return acc + overview[key];
                    }, 0);
                    var value = entity.value || 0 + sum;
                    max_1 = max_1 && value < max_1 ? max_1 : value;
                    total_1 = total_1 + value;
                    return __assign({}, entity, { value: value });
                });
                var totalUsers = total_1;
                var hasSelected_1 = false;
                var chart = _.map(values, function (datum) {
                    var selected = false;
                    if (status_1 && status_1 == datum.values.toString()) {
                        selected = true;
                        hasSelected_1 = true;
                    }
                    var w = max_1 ? datum.value / max_1 : 0;
                    return __assign({}, datum, { w: w, selected: selected });
                });
                return { totalUsers: totalUsers, chart: chart, hasSelected: hasSelected_1 };
            }
            return null;
        }));
        var _a;
    };
    Object.defineProperty(HtUsersClient.prototype, "queryLabel$", {
        get: function () {
            var _this = this;
            var query$ = this.list.getBaseQuery$().pipe(filter_1.filter(function (data) { return !!data; }));
            return query$.pipe(operators_1.map(function (query) {
                // console.log("cl", query);
                var queryLabel = _this.filterClass.getQueryLabel(query);
                return queryLabel;
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtUsersClient.prototype, "ordering$", {
        get: function () {
            var _this = this;
            return this.list.getApiQuery$().pipe(filter_1.filter(function (data) { return !!data; }), operators_1.map(function (query) {
                var ordering = query ? query["ordering"] : null;
                var orderingMod = _this.getOrderingMod(ordering);
                return {
                    string: _this.filterClass.sortingQueryMap[orderingMod.string],
                    sign: orderingMod.sign
                };
            }), operators_1.distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    HtUsersClient.prototype.getOrderingMod = function (ordering) {
        var string = ordering;
        var sign = 1;
        if (ordering.includes("-")) {
            string = ordering.substring(1);
            sign = 0;
        }
        return {
            string: string,
            sign: sign
        };
    };
    HtUsersClient.prototype.getSegmentsStates = function () {
        return this.store.select(fromRoot.getSegmentsState);
    };
    HtUsersClient.prototype.getCurrentPlaceline$ = function () {
        return combineLatest_1.combineLatest(this.placeline.data$, this.getSegmentsStates(), function (userData, _a) {
            var selectedId = _a.selectedId, resetMapId = _a.resetMapId;
            if (userData && (selectedId || resetMapId)) {
                var id_1 = selectedId || resetMapId;
                var segments = _.filter(userData.segments, function (segment) {
                    return segment.id === id_1;
                });
                userData = __assign({}, userData, { segments: segments, events: [], actions: [] });
            }
            return userData;
        });
    };
    HtUsersClient.prototype.initEffects = function () {
        var _this = this;
        this.list.query$.pipe(filter_1.filter(function (data) { return !!data; })).subscribe(function (query) {
            _this.setListAllFilter(query);
        });
        // this.listAll.active$.pipe(filter(data => !!data)).flatMap(() => {
        //   return this.listStatusChart$()
        // })
        //   .takeUntil(this.listAll.active$.filter(data => !data).skip(1))
        //   .withLatestFrom(this.list.query$)
        //   .switchMap(([statusOverview, query]) => {
        //     // return Observable.of({})
        //     console.log(statusOverview, query);
        //     return this.getListAllUpdateQuery$(statusOverview, query)
        //   })//todo finish this
        this.placeline.id$
            .pipe(scan_1.scan(function (acc, currentId) {
            var isSame = acc.oldId === currentId;
            var oldId = currentId;
            return { isSame: isSame, oldId: oldId };
        }, { isSame: false, oldId: null }), operators_1.pluck("isSame"), filter_1.filter(function (data) { return !data; }))
            .subscribe(function (isDiff) {
            _this.placeline.setData(null);
        });
    };
    HtUsersClient.prototype.setListAllFilter = function (query) {
        var statusString = query["status"];
        var search = query["search"];
        var ids = query["id"];
        var userMarkerFilters = [];
        if (statusString) {
            var statusArray = statusString.split(",");
            // this.updateUserMap(query);
            var statusFilter_1 = [];
            statusArray.forEach(function (status) {
                statusFilter_1.push(ht_data_1.htUser().getMarkerFilter(status));
            });
            var allStatusFilter = function (user) {
                return _.reduce(statusFilter_1, function (acc, filter) {
                    return acc || filter(user);
                }, false);
            };
            userMarkerFilters.push(allStatusFilter);
        }
        if (search) {
            userMarkerFilters.push(function (user) {
                return ht_data_1.htUser().getMarkerSearched(search)(user); // || userMarkerFilter(user)
            });
            // this.updateUserMap(query);
        }
        if (ids) {
            var userIds_1 = ids.split(",");
            userMarkerFilters.push(function (user) {
                return _.contains(userIds_1, user.id);
            });
        }
        var userMarkerFilter = function (user) {
            return _.reduce(userMarkerFilters, function (acc, filter) {
                return acc && filter(user);
            }, true);
        };
        var dataMap = function (allResults) {
            var results = _.filter(allResults.resultsEntity, userMarkerFilter);
            var resultsEntity = _.indexBy(results, "id");
            return __assign({}, allResults, { resultsEntity: resultsEntity });
        };
        this.listAll.setDataMap(dataMap);
    };
    HtUsersClient.prototype.getListAllUpdateQuery$ = function (overview, query) {
        return this.listAll.data$.pipe(operators_1.flatMap(function (allData) {
            var results = _.values(allData.resultsEntity);
            var currentTotalUsers = results.length;
            var totalUsers = overview.totalUsers, chart = overview.chart;
            var status = query["status"];
            if (!!status) {
                var value = _.find(chart, function (datum) {
                    return datum.keys.toString(",") == status;
                });
                return value && value !== currentTotalUsers ? of_1.of(true) : empty_1.empty();
            }
            else if (currentTotalUsers < totalUsers) {
                return of_1.of(true);
            }
            return empty_1.empty();
        }));
    };
    return HtUsersClient;
}(entity_client_1.EntityClient));
exports.HtUsersClient = HtUsersClient;
exports.usersClientFactory = function (options) {
    if (options === void 0) { options = {}; }
    var dateRange = options.dateRange || date_range_1.dateRangeService.getInstance();
    return new HtUsersClient({ dateRange: dateRange });
};
//# sourceMappingURL=users-client.js.map